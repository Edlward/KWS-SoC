// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dw_layer1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_V_dout,
        in_stream_V_empty_n,
        in_stream_V_read,
        out_stream_V_din,
        out_stream_V_full_n,
        out_stream_V_write,
        dw_weight1_address0,
        dw_weight1_ce0,
        dw_weight1_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_pp0_stage0 = 9'd2;
parameter    ap_ST_fsm_state4 = 9'd4;
parameter    ap_ST_fsm_state5 = 9'd8;
parameter    ap_ST_fsm_state6 = 9'd16;
parameter    ap_ST_fsm_pp2_stage0 = 9'd32;
parameter    ap_ST_fsm_state17 = 9'd64;
parameter    ap_ST_fsm_pp3_stage0 = 9'd128;
parameter    ap_ST_fsm_state20 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_stream_V_dout;
input   in_stream_V_empty_n;
output   in_stream_V_read;
output  [31:0] out_stream_V_din;
input   out_stream_V_full_n;
output   out_stream_V_write;
output  [2:0] dw_weight1_address0;
output   dw_weight1_ce0;
input  [31:0] dw_weight1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_read;
reg out_stream_V_write;
reg dw_weight1_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] x_5_address0;
reg    x_5_ce0;
reg    x_5_we0;
wire   [31:0] x_5_q0;
reg   [8:0] y_5_address0;
reg    y_5_ce0;
reg    y_5_we0;
wire   [31:0] y_5_q0;
reg   [8:0] y_5_address1;
reg    y_5_ce1;
reg    y_5_we1;
wire   [31:0] y_5_q1;
reg    in_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln34_reg_1064;
reg    out_stream_V_blk_n;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln63_reg_1195;
reg   [8:0] indvar_flatten_reg_226;
reg   [5:0] h_0_reg_237;
reg   [3:0] w_0_reg_248;
reg   [11:0] indvar_flatten71_reg_292;
reg   [2:0] kh_0_reg_303;
reg   [10:0] indvar_flatten37_reg_314;
reg   [1:0] kw_0_reg_325;
reg   [9:0] indvar_flatten18_reg_336;
reg   [5:0] oh1_0_reg_347;
reg   [3:0] ow2_0_reg_358;
reg   [8:0] indvar_flatten83_reg_369;
reg   [5:0] oh3_0_reg_380;
reg   [3:0] ow4_0_reg_391;
wire   [0:0] icmp_ln34_fu_412_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] add_ln34_fu_418_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] select_ln38_fu_436_p3;
reg   [3:0] select_ln38_reg_1073;
wire   [5:0] select_ln38_4_fu_444_p3;
reg   [5:0] select_ln38_4_reg_1078;
wire   [3:0] w_fu_452_p2;
wire   [8:0] add_ln42_fu_506_p2;
wire    ap_CS_fsm_state5;
wire   [5:0] select_ln45_1_fu_532_p3;
wire   [0:0] icmp_ln42_fu_500_p2;
wire   [3:0] ow_fu_577_p2;
wire   [0:0] icmp_ln50_fu_615_p2;
reg   [0:0] icmp_ln50_reg_1108;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state7_pp2_stage0_iter0;
wire    ap_block_state8_pp2_stage0_iter1;
wire    ap_block_state9_pp2_stage0_iter2;
wire    ap_block_state10_pp2_stage0_iter3;
wire    ap_block_state11_pp2_stage0_iter4;
wire    ap_block_state12_pp2_stage0_iter5;
wire    ap_block_state13_pp2_stage0_iter6;
wire    ap_block_state14_pp2_stage0_iter7;
wire    ap_block_state15_pp2_stage0_iter8;
wire    ap_block_state16_pp2_stage0_iter9;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln50_reg_1108_pp2_iter1_reg;
reg   [0:0] icmp_ln50_reg_1108_pp2_iter2_reg;
reg   [0:0] icmp_ln50_reg_1108_pp2_iter3_reg;
reg   [0:0] icmp_ln50_reg_1108_pp2_iter4_reg;
reg   [0:0] icmp_ln50_reg_1108_pp2_iter5_reg;
reg   [0:0] icmp_ln50_reg_1108_pp2_iter6_reg;
reg   [0:0] icmp_ln50_reg_1108_pp2_iter7_reg;
reg   [0:0] icmp_ln50_reg_1108_pp2_iter8_reg;
wire   [11:0] add_ln50_fu_621_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [2:0] select_ln50_1_fu_647_p3;
reg   [2:0] select_ln50_1_reg_1117;
wire   [1:0] select_ln51_1_fu_757_p3;
reg   [1:0] select_ln51_1_reg_1122;
wire   [3:0] select_ln55_fu_832_p3;
reg   [3:0] select_ln55_reg_1132;
wire   [5:0] select_ln55_2_fu_884_p3;
reg   [5:0] select_ln55_2_reg_1137;
wire   [3:0] ow_3_fu_913_p2;
wire   [9:0] select_ln52_fu_925_p3;
wire   [10:0] select_ln51_4_fu_939_p3;
reg    ap_enable_reg_pp2_iter1;
reg   [8:0] y_5_addr_2_reg_1174;
reg   [8:0] y_5_addr_2_reg_1174_pp2_iter2_reg;
reg   [8:0] y_5_addr_2_reg_1174_pp2_iter3_reg;
reg   [8:0] y_5_addr_2_reg_1174_pp2_iter4_reg;
reg   [8:0] y_5_addr_2_reg_1174_pp2_iter5_reg;
reg   [8:0] y_5_addr_2_reg_1174_pp2_iter6_reg;
reg   [8:0] y_5_addr_2_reg_1174_pp2_iter7_reg;
reg   [8:0] y_5_addr_2_reg_1174_pp2_iter8_reg;
wire   [31:0] grp_fu_406_p2;
reg   [31:0] tmp_1_reg_1180;
reg   [31:0] y_5_load_reg_1185;
reg    ap_enable_reg_pp2_iter4;
wire   [31:0] grp_fu_402_p2;
reg   [31:0] tmp_s_reg_1190;
wire   [0:0] icmp_ln63_fu_981_p2;
wire    ap_block_state18_pp3_stage0_iter0;
reg    ap_block_state19_pp3_stage0_iter1;
reg    ap_block_pp3_stage0_11001;
wire   [8:0] add_ln63_fu_987_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [5:0] select_ln67_1_fu_1013_p3;
reg   [5:0] select_ln67_1_reg_1204;
wire   [3:0] ow_4_fu_1058_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state6;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state7;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
wire    ap_CS_fsm_state17;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state18;
reg   [5:0] ap_phi_mux_h_0_phi_fu_241_p4;
reg   [8:0] indvar_flatten11_reg_259;
wire    ap_CS_fsm_state4;
reg   [5:0] oh_0_reg_270;
reg   [3:0] ow_0_reg_281;
reg   [2:0] ap_phi_mux_kh_0_phi_fu_307_p4;
wire    ap_block_pp2_stage0;
reg   [1:0] ap_phi_mux_kw_0_phi_fu_329_p4;
reg   [5:0] ap_phi_mux_oh1_0_phi_fu_351_p4;
reg   [5:0] ap_phi_mux_oh3_0_phi_fu_384_p4;
wire   [63:0] zext_ln38_8_fu_495_p1;
wire   [63:0] zext_ln45_3_fu_572_p1;
wire   [63:0] select_ln51_2_fu_779_p3;
wire   [63:0] zext_ln55_8_fu_908_p1;
wire   [63:0] zext_ln56_2_fu_976_p1;
wire   [63:0] zext_ln67_3_fu_1053_p1;
reg    ap_block_pp3_stage0_01001;
wire   [0:0] icmp_ln35_fu_430_p2;
wire   [5:0] h_fu_424_p2;
wire   [8:0] tmp_279_fu_458_p3;
wire   [6:0] tmp_280_fu_469_p3;
wire   [9:0] zext_ln38_6_fu_476_p1;
wire   [9:0] zext_ln38_fu_465_p1;
wire   [9:0] add_ln38_fu_480_p2;
wire   [9:0] zext_ln38_7_fu_486_p1;
wire   [9:0] add_ln38_4_fu_489_p2;
wire   [0:0] icmp_ln43_fu_518_p2;
wire   [5:0] oh_fu_512_p2;
wire   [8:0] tmp_281_fu_544_p3;
wire   [9:0] zext_ln45_fu_540_p1;
wire   [9:0] zext_ln45_1_fu_552_p1;
wire   [3:0] select_ln45_fu_524_p3;
wire   [9:0] add_ln45_fu_556_p2;
wire   [9:0] zext_ln45_2_fu_562_p1;
wire   [9:0] add_ln45_1_fu_566_p2;
wire   [3:0] tmp_282_fu_587_p3;
wire   [4:0] zext_ln55_fu_599_p1;
wire   [4:0] zext_ln51_fu_595_p1;
wire   [5:0] zext_ln50_fu_583_p1;
wire   [0:0] icmp_ln51_fu_633_p2;
wire   [2:0] kh_fu_627_p2;
wire   [3:0] tmp_283_fu_663_p3;
wire   [3:0] tmp_284_fu_675_p3;
wire   [4:0] zext_ln50_2_fu_671_p1;
wire   [4:0] add_ln55_2_fu_603_p2;
wire   [4:0] select_ln50_2_fu_687_p3;
wire   [5:0] zext_ln55_1_fu_659_p1;
wire   [5:0] add_ln55_fu_609_p2;
wire   [0:0] icmp_ln53_fu_713_p2;
wire   [0:0] xor_ln50_fu_707_p2;
wire   [0:0] icmp_ln52_fu_725_p2;
wire   [1:0] select_ln50_fu_639_p3;
wire   [0:0] and_ln50_1_fu_731_p2;
wire   [0:0] or_ln51_fu_743_p2;
wire   [1:0] kw_fu_737_p2;
wire   [63:0] zext_ln55_2_fu_683_p1;
wire   [63:0] zext_ln55_3_fu_769_p1;
wire   [63:0] add_ln55_3_fu_773_p2;
wire   [63:0] zext_ln50_3_fu_695_p1;
wire   [5:0] zext_ln50_1_fu_655_p1;
wire   [5:0] select_ln50_3_fu_699_p3;
wire   [0:0] xor_ln51_fu_796_p2;
wire   [0:0] and_ln50_fu_719_p2;
wire   [0:0] or_ln51_1_fu_802_p2;
wire   [5:0] select_ln51_fu_749_p3;
wire   [0:0] and_ln51_fu_808_p2;
wire   [0:0] or_ln55_fu_820_p2;
wire   [0:0] or_ln55_1_fu_826_p2;
wire   [5:0] oh_8_fu_814_p2;
wire   [5:0] add_ln55_4_fu_840_p2;
wire   [5:0] select_ln51_3_fu_788_p3;
wire   [5:0] select_ln55_1_fu_846_p3;
wire   [8:0] tmp_285_fu_854_p3;
wire   [6:0] tmp_286_fu_866_p3;
wire   [9:0] zext_ln55_5_fu_874_p1;
wire   [9:0] zext_ln55_4_fu_862_p1;
wire   [3:0] zext_ln51_1_fu_765_p1;
wire   [3:0] add_ln55_1_fu_892_p2;
wire   [9:0] add_ln55_5_fu_878_p2;
wire   [9:0] zext_ln55_7_fu_898_p1;
wire   [9:0] add_ln55_6_fu_902_p2;
wire   [9:0] add_ln52_1_fu_919_p2;
wire   [10:0] add_ln51_1_fu_933_p2;
wire   [8:0] tmp_287_fu_950_p3;
wire   [9:0] zext_ln55_6_fu_947_p1;
wire   [9:0] zext_ln56_fu_957_p1;
wire   [9:0] add_ln56_fu_961_p2;
wire   [9:0] zext_ln56_1_fu_967_p1;
wire   [9:0] add_ln56_1_fu_970_p2;
wire   [0:0] icmp_ln64_fu_999_p2;
wire   [5:0] oh_7_fu_993_p2;
wire   [8:0] tmp_288_fu_1025_p3;
wire   [9:0] zext_ln67_fu_1021_p1;
wire   [9:0] zext_ln67_1_fu_1033_p1;
wire   [3:0] select_ln67_fu_1005_p3;
wire   [9:0] add_ln67_fu_1037_p2;
wire   [9:0] zext_ln67_2_fu_1043_p1;
wire   [9:0] add_ln67_2_fu_1047_p2;
wire    ap_CS_fsm_state20;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
end

dw_layer1_x_5 #(
    .DataWidth( 32 ),
    .AddressRange( 490 ),
    .AddressWidth( 9 ))
x_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_5_address0),
    .ce0(x_5_ce0),
    .we0(x_5_we0),
    .d0(in_stream_V_dout),
    .q0(x_5_q0)
);

dw_layer1_y_5 #(
    .DataWidth( 32 ),
    .AddressRange( 414 ),
    .AddressWidth( 9 ))
y_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_5_address0),
    .ce0(y_5_ce0),
    .we0(y_5_we0),
    .d0(32'd0),
    .q0(y_5_q0),
    .address1(y_5_address1),
    .ce1(y_5_ce1),
    .we1(y_5_we1),
    .d1(tmp_s_reg_1190),
    .q1(y_5_q1)
);

kws_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fadd_32ns_32nbkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_5_load_reg_1185),
    .din1(tmp_1_reg_1180),
    .ce(1'b1),
    .dout(grp_fu_402_p2)
);

kws_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fmul_32ns_32ncud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_5_q0),
    .din1(dw_weight1_q0),
    .ce(1'b1),
    .dout(grp_fu_406_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state7)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state18))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state18))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state18);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_1064 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_0_reg_237 <= select_ln38_4_reg_1078;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h_0_reg_237 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten11_reg_259 <= 9'd0;
    end else if (((icmp_ln42_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        indvar_flatten11_reg_259 <= add_ln42_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten18_reg_336 <= 10'd0;
    end else if (((icmp_ln50_fu_615_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten18_reg_336 <= select_ln52_fu_925_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten37_reg_314 <= 11'd0;
    end else if (((icmp_ln50_fu_615_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten37_reg_314 <= select_ln51_4_fu_939_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten71_reg_292 <= 12'd0;
    end else if (((icmp_ln50_fu_615_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten71_reg_292 <= add_ln50_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar_flatten83_reg_369 <= 9'd0;
    end else if (((icmp_ln63_fu_981_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        indvar_flatten83_reg_369 <= add_ln63_fu_987_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_412_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_226 <= add_ln34_fu_418_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_226 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kh_0_reg_303 <= 3'd0;
    end else if (((icmp_ln50_reg_1108 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        kh_0_reg_303 <= select_ln50_1_reg_1117;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kw_0_reg_325 <= 2'd0;
    end else if (((icmp_ln50_reg_1108 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        kw_0_reg_325 <= select_ln51_1_reg_1122;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        oh1_0_reg_347 <= 6'd0;
    end else if (((icmp_ln50_reg_1108 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        oh1_0_reg_347 <= select_ln55_2_reg_1137;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        oh3_0_reg_380 <= 6'd0;
    end else if (((icmp_ln63_reg_1195 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        oh3_0_reg_380 <= select_ln67_1_reg_1204;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        oh_0_reg_270 <= 6'd0;
    end else if (((icmp_ln42_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        oh_0_reg_270 <= select_ln45_1_fu_532_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ow2_0_reg_358 <= 4'd0;
    end else if (((icmp_ln50_fu_615_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ow2_0_reg_358 <= ow_3_fu_913_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ow4_0_reg_391 <= 4'd0;
    end else if (((icmp_ln63_fu_981_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        ow4_0_reg_391 <= ow_4_fu_1058_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ow_0_reg_281 <= 4'd0;
    end else if (((icmp_ln42_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ow_0_reg_281 <= ow_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_412_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_0_reg_248 <= w_fu_452_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_0_reg_248 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln34_reg_1064 <= icmp_ln34_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln50_reg_1108 <= icmp_ln50_fu_615_p2;
        icmp_ln50_reg_1108_pp2_iter1_reg <= icmp_ln50_reg_1108;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln50_reg_1108_pp2_iter2_reg <= icmp_ln50_reg_1108_pp2_iter1_reg;
        icmp_ln50_reg_1108_pp2_iter3_reg <= icmp_ln50_reg_1108_pp2_iter2_reg;
        icmp_ln50_reg_1108_pp2_iter4_reg <= icmp_ln50_reg_1108_pp2_iter3_reg;
        icmp_ln50_reg_1108_pp2_iter5_reg <= icmp_ln50_reg_1108_pp2_iter4_reg;
        icmp_ln50_reg_1108_pp2_iter6_reg <= icmp_ln50_reg_1108_pp2_iter5_reg;
        icmp_ln50_reg_1108_pp2_iter7_reg <= icmp_ln50_reg_1108_pp2_iter6_reg;
        icmp_ln50_reg_1108_pp2_iter8_reg <= icmp_ln50_reg_1108_pp2_iter7_reg;
        y_5_addr_2_reg_1174_pp2_iter2_reg <= y_5_addr_2_reg_1174;
        y_5_addr_2_reg_1174_pp2_iter3_reg <= y_5_addr_2_reg_1174_pp2_iter2_reg;
        y_5_addr_2_reg_1174_pp2_iter4_reg <= y_5_addr_2_reg_1174_pp2_iter3_reg;
        y_5_addr_2_reg_1174_pp2_iter5_reg <= y_5_addr_2_reg_1174_pp2_iter4_reg;
        y_5_addr_2_reg_1174_pp2_iter6_reg <= y_5_addr_2_reg_1174_pp2_iter5_reg;
        y_5_addr_2_reg_1174_pp2_iter7_reg <= y_5_addr_2_reg_1174_pp2_iter6_reg;
        y_5_addr_2_reg_1174_pp2_iter8_reg <= y_5_addr_2_reg_1174_pp2_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln63_reg_1195 <= icmp_ln63_fu_981_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_412_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln38_4_reg_1078 <= select_ln38_4_fu_444_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_412_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln38_reg_1073 <= select_ln38_fu_436_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_615_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln50_1_reg_1117 <= select_ln50_1_fu_647_p3;
        select_ln51_1_reg_1122 <= select_ln51_1_fu_757_p3;
        select_ln55_2_reg_1137 <= select_ln55_2_fu_884_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_615_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln55_reg_1132 <= select_ln55_fu_832_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_981_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        select_ln67_1_reg_1204 <= select_ln67_1_fu_1013_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_reg_1108_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_1_reg_1180 <= grp_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_reg_1108_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_s_reg_1190 <= grp_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_reg_1108 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        y_5_addr_2_reg_1174 <= zext_ln56_2_fu_976_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_reg_1108_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        y_5_load_reg_1185 <= y_5_q0;
    end
end

always @ (*) begin
    if ((icmp_ln34_fu_412_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln50_fu_615_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln63_fu_981_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_1064 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_h_0_phi_fu_241_p4 = select_ln38_4_reg_1078;
    end else begin
        ap_phi_mux_h_0_phi_fu_241_p4 = h_0_reg_237;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_1108 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_kh_0_phi_fu_307_p4 = select_ln50_1_reg_1117;
    end else begin
        ap_phi_mux_kh_0_phi_fu_307_p4 = kh_0_reg_303;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_1108 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_kw_0_phi_fu_329_p4 = select_ln51_1_reg_1122;
    end else begin
        ap_phi_mux_kw_0_phi_fu_329_p4 = kw_0_reg_325;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_1108 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_oh1_0_phi_fu_351_p4 = select_ln55_2_reg_1137;
    end else begin
        ap_phi_mux_oh1_0_phi_fu_351_p4 = oh1_0_reg_347;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (icmp_ln63_reg_1195 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_oh3_0_phi_fu_384_p4 = select_ln67_1_reg_1204;
    end else begin
        ap_phi_mux_oh3_0_phi_fu_384_p4 = oh3_0_reg_380;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dw_weight1_ce0 = 1'b1;
    end else begin
        dw_weight1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_1064 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_V_blk_n = in_stream_V_empty_n;
    end else begin
        in_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_1064 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_stream_V_read = 1'b1;
    end else begin
        in_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (icmp_ln63_reg_1195 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        out_stream_V_blk_n = out_stream_V_full_n;
    end else begin
        out_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln63_reg_1195 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        out_stream_V_write = 1'b1;
    end else begin
        out_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_5_address0 = zext_ln55_8_fu_908_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_5_address0 = zext_ln38_8_fu_495_p1;
    end else begin
        x_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        x_5_ce0 = 1'b1;
    end else begin
        x_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_1064 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_5_we0 = 1'b1;
    end else begin
        x_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        y_5_address0 = y_5_addr_2_reg_1174_pp2_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        y_5_address0 = zext_ln45_3_fu_572_p1;
    end else begin
        y_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        y_5_address1 = zext_ln67_3_fu_1053_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter9 == 1'b1))) begin
        y_5_address1 = y_5_addr_2_reg_1174_pp2_iter8_reg;
    end else begin
        y_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        y_5_ce0 = 1'b1;
    end else begin
        y_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter9 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        y_5_ce1 = 1'b1;
    end else begin
        y_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        y_5_we0 = 1'b1;
    end else begin
        y_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_1108_pp2_iter8_reg == 1'd0) & (ap_enable_reg_pp2_iter9 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        y_5_we1 = 1'b1;
    end else begin
        y_5_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln34_fu_412_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln34_fu_412_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln42_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln50_fu_615_p2 == 1'd1)) & ~((ap_enable_reg_pp2_iter8 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter8 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter9 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln50_fu_615_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln63_fu_981_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln63_fu_981_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_fu_418_p2 = (indvar_flatten_reg_226 + 9'd1);

assign add_ln38_4_fu_489_p2 = (add_ln38_fu_480_p2 + zext_ln38_7_fu_486_p1);

assign add_ln38_fu_480_p2 = (zext_ln38_6_fu_476_p1 + zext_ln38_fu_465_p1);

assign add_ln42_fu_506_p2 = (indvar_flatten11_reg_259 + 9'd1);

assign add_ln45_1_fu_566_p2 = (add_ln45_fu_556_p2 + zext_ln45_2_fu_562_p1);

assign add_ln45_fu_556_p2 = (zext_ln45_fu_540_p1 + zext_ln45_1_fu_552_p1);

assign add_ln50_fu_621_p2 = (indvar_flatten71_reg_292 + 12'd1);

assign add_ln51_1_fu_933_p2 = (indvar_flatten37_reg_314 + 11'd1);

assign add_ln52_1_fu_919_p2 = (indvar_flatten18_reg_336 + 10'd1);

assign add_ln55_1_fu_892_p2 = (select_ln55_fu_832_p3 + zext_ln51_1_fu_765_p1);

assign add_ln55_2_fu_603_p2 = (zext_ln55_fu_599_p1 + zext_ln51_fu_595_p1);

assign add_ln55_3_fu_773_p2 = (zext_ln55_2_fu_683_p1 + zext_ln55_3_fu_769_p1);

assign add_ln55_4_fu_840_p2 = (oh_8_fu_814_p2 + zext_ln50_1_fu_655_p1);

assign add_ln55_5_fu_878_p2 = (zext_ln55_5_fu_874_p1 + zext_ln55_4_fu_862_p1);

assign add_ln55_6_fu_902_p2 = (add_ln55_5_fu_878_p2 + zext_ln55_7_fu_898_p1);

assign add_ln55_fu_609_p2 = (zext_ln50_fu_583_p1 + ap_phi_mux_oh1_0_phi_fu_351_p4);

assign add_ln56_1_fu_970_p2 = (add_ln56_fu_961_p2 + zext_ln56_1_fu_967_p1);

assign add_ln56_fu_961_p2 = (zext_ln55_6_fu_947_p1 + zext_ln56_fu_957_p1);

assign add_ln63_fu_987_p2 = (indvar_flatten83_reg_369 + 9'd1);

assign add_ln67_2_fu_1047_p2 = (add_ln67_fu_1037_p2 + zext_ln67_2_fu_1043_p1);

assign add_ln67_fu_1037_p2 = (zext_ln67_fu_1021_p1 + zext_ln67_1_fu_1033_p1);

assign and_ln50_1_fu_731_p2 = (xor_ln50_fu_707_p2 & icmp_ln52_fu_725_p2);

assign and_ln50_fu_719_p2 = (xor_ln50_fu_707_p2 & icmp_ln53_fu_713_p2);

assign and_ln51_fu_808_p2 = (or_ln51_1_fu_802_p2 & and_ln50_fu_719_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln34_reg_1064 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln34_reg_1064 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((icmp_ln63_reg_1195 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((icmp_ln63_reg_1195 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((icmp_ln63_reg_1195 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_state10_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp3_stage0_iter1 = ((icmp_ln63_reg_1195 == 1'd0) & (out_stream_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln34_reg_1064 == 1'd0) & (in_stream_V_empty_n == 1'b0));
end

assign ap_block_state7_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign dw_weight1_address0 = select_ln51_2_fu_779_p3;

assign h_fu_424_p2 = (ap_phi_mux_h_0_phi_fu_241_p4 + 6'd1);

assign icmp_ln34_fu_412_p2 = ((indvar_flatten_reg_226 == 9'd490) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_430_p2 = ((w_0_reg_248 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_500_p2 = ((indvar_flatten11_reg_259 == 9'd414) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_518_p2 = ((ow_0_reg_281 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_615_p2 = ((indvar_flatten71_reg_292 == 12'd3312) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_633_p2 = ((indvar_flatten37_reg_314 == 11'd828) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_725_p2 = ((indvar_flatten18_reg_336 == 10'd414) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_713_p2 = ((ow2_0_reg_358 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_981_p2 = ((indvar_flatten83_reg_369 == 9'd414) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_999_p2 = ((ow4_0_reg_391 == 4'd9) ? 1'b1 : 1'b0);

assign kh_fu_627_p2 = (ap_phi_mux_kh_0_phi_fu_307_p4 + 3'd1);

assign kw_fu_737_p2 = (select_ln50_fu_639_p3 + 2'd1);

assign oh_7_fu_993_p2 = (ap_phi_mux_oh3_0_phi_fu_384_p4 + 6'd1);

assign oh_8_fu_814_p2 = (select_ln51_fu_749_p3 + 6'd1);

assign oh_fu_512_p2 = (oh_0_reg_270 + 6'd1);

assign or_ln51_1_fu_802_p2 = (xor_ln51_fu_796_p2 | icmp_ln51_fu_633_p2);

assign or_ln51_fu_743_p2 = (icmp_ln51_fu_633_p2 | and_ln50_1_fu_731_p2);

assign or_ln55_1_fu_826_p2 = (or_ln55_fu_820_p2 | icmp_ln51_fu_633_p2);

assign or_ln55_fu_820_p2 = (and_ln51_fu_808_p2 | and_ln50_1_fu_731_p2);

assign out_stream_V_din = y_5_q1;

assign ow_3_fu_913_p2 = (select_ln55_fu_832_p3 + 4'd1);

assign ow_4_fu_1058_p2 = (select_ln67_fu_1005_p3 + 4'd1);

assign ow_fu_577_p2 = (select_ln45_fu_524_p3 + 4'd1);

assign select_ln38_4_fu_444_p3 = ((icmp_ln35_fu_430_p2[0:0] === 1'b1) ? h_fu_424_p2 : ap_phi_mux_h_0_phi_fu_241_p4);

assign select_ln38_fu_436_p3 = ((icmp_ln35_fu_430_p2[0:0] === 1'b1) ? 4'd0 : w_0_reg_248);

assign select_ln45_1_fu_532_p3 = ((icmp_ln43_fu_518_p2[0:0] === 1'b1) ? oh_fu_512_p2 : oh_0_reg_270);

assign select_ln45_fu_524_p3 = ((icmp_ln43_fu_518_p2[0:0] === 1'b1) ? 4'd0 : ow_0_reg_281);

assign select_ln50_1_fu_647_p3 = ((icmp_ln51_fu_633_p2[0:0] === 1'b1) ? kh_fu_627_p2 : ap_phi_mux_kh_0_phi_fu_307_p4);

assign select_ln50_2_fu_687_p3 = ((icmp_ln51_fu_633_p2[0:0] === 1'b1) ? zext_ln50_2_fu_671_p1 : add_ln55_2_fu_603_p2);

assign select_ln50_3_fu_699_p3 = ((icmp_ln51_fu_633_p2[0:0] === 1'b1) ? zext_ln55_1_fu_659_p1 : add_ln55_fu_609_p2);

assign select_ln50_fu_639_p3 = ((icmp_ln51_fu_633_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_kw_0_phi_fu_329_p4);

assign select_ln51_1_fu_757_p3 = ((and_ln50_1_fu_731_p2[0:0] === 1'b1) ? kw_fu_737_p2 : select_ln50_fu_639_p3);

assign select_ln51_2_fu_779_p3 = ((and_ln50_1_fu_731_p2[0:0] === 1'b1) ? add_ln55_3_fu_773_p2 : zext_ln50_3_fu_695_p1);

assign select_ln51_3_fu_788_p3 = ((and_ln50_1_fu_731_p2[0:0] === 1'b1) ? zext_ln50_1_fu_655_p1 : select_ln50_3_fu_699_p3);

assign select_ln51_4_fu_939_p3 = ((icmp_ln51_fu_633_p2[0:0] === 1'b1) ? 11'd1 : add_ln51_1_fu_933_p2);

assign select_ln51_fu_749_p3 = ((or_ln51_fu_743_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_oh1_0_phi_fu_351_p4);

assign select_ln52_fu_925_p3 = ((or_ln51_fu_743_p2[0:0] === 1'b1) ? 10'd1 : add_ln52_1_fu_919_p2);

assign select_ln55_1_fu_846_p3 = ((and_ln51_fu_808_p2[0:0] === 1'b1) ? add_ln55_4_fu_840_p2 : select_ln51_3_fu_788_p3);

assign select_ln55_2_fu_884_p3 = ((and_ln51_fu_808_p2[0:0] === 1'b1) ? oh_8_fu_814_p2 : select_ln51_fu_749_p3);

assign select_ln55_fu_832_p3 = ((or_ln55_1_fu_826_p2[0:0] === 1'b1) ? 4'd0 : ow2_0_reg_358);

assign select_ln67_1_fu_1013_p3 = ((icmp_ln64_fu_999_p2[0:0] === 1'b1) ? oh_7_fu_993_p2 : ap_phi_mux_oh3_0_phi_fu_384_p4);

assign select_ln67_fu_1005_p3 = ((icmp_ln64_fu_999_p2[0:0] === 1'b1) ? 4'd0 : ow4_0_reg_391);

assign tmp_279_fu_458_p3 = {{select_ln38_4_reg_1078}, {3'd0}};

assign tmp_280_fu_469_p3 = {{select_ln38_4_reg_1078}, {1'd0}};

assign tmp_281_fu_544_p3 = {{select_ln45_1_fu_532_p3}, {3'd0}};

assign tmp_282_fu_587_p3 = {{ap_phi_mux_kh_0_phi_fu_307_p4}, {1'd0}};

assign tmp_283_fu_663_p3 = {{kh_fu_627_p2}, {1'd0}};

assign tmp_284_fu_675_p3 = {{select_ln50_1_fu_647_p3}, {1'd0}};

assign tmp_285_fu_854_p3 = {{select_ln55_1_fu_846_p3}, {3'd0}};

assign tmp_286_fu_866_p3 = {{select_ln55_1_fu_846_p3}, {1'd0}};

assign tmp_287_fu_950_p3 = {{select_ln55_2_reg_1137}, {3'd0}};

assign tmp_288_fu_1025_p3 = {{select_ln67_1_fu_1013_p3}, {3'd0}};

assign w_fu_452_p2 = (select_ln38_fu_436_p3 + 4'd1);

assign xor_ln50_fu_707_p2 = (icmp_ln51_fu_633_p2 ^ 1'd1);

assign xor_ln51_fu_796_p2 = (icmp_ln52_fu_725_p2 ^ 1'd1);

assign zext_ln38_6_fu_476_p1 = tmp_280_fu_469_p3;

assign zext_ln38_7_fu_486_p1 = select_ln38_reg_1073;

assign zext_ln38_8_fu_495_p1 = add_ln38_4_fu_489_p2;

assign zext_ln38_fu_465_p1 = tmp_279_fu_458_p3;

assign zext_ln45_1_fu_552_p1 = tmp_281_fu_544_p3;

assign zext_ln45_2_fu_562_p1 = select_ln45_fu_524_p3;

assign zext_ln45_3_fu_572_p1 = add_ln45_1_fu_566_p2;

assign zext_ln45_fu_540_p1 = select_ln45_1_fu_532_p3;

assign zext_ln50_1_fu_655_p1 = select_ln50_1_fu_647_p3;

assign zext_ln50_2_fu_671_p1 = tmp_283_fu_663_p3;

assign zext_ln50_3_fu_695_p1 = select_ln50_2_fu_687_p3;

assign zext_ln50_fu_583_p1 = ap_phi_mux_kh_0_phi_fu_307_p4;

assign zext_ln51_1_fu_765_p1 = select_ln51_1_fu_757_p3;

assign zext_ln51_fu_595_p1 = tmp_282_fu_587_p3;

assign zext_ln55_1_fu_659_p1 = kh_fu_627_p2;

assign zext_ln55_2_fu_683_p1 = tmp_284_fu_675_p3;

assign zext_ln55_3_fu_769_p1 = kw_fu_737_p2;

assign zext_ln55_4_fu_862_p1 = tmp_285_fu_854_p3;

assign zext_ln55_5_fu_874_p1 = tmp_286_fu_866_p3;

assign zext_ln55_6_fu_947_p1 = select_ln55_2_reg_1137;

assign zext_ln55_7_fu_898_p1 = add_ln55_1_fu_892_p2;

assign zext_ln55_8_fu_908_p1 = add_ln55_6_fu_902_p2;

assign zext_ln55_fu_599_p1 = ap_phi_mux_kw_0_phi_fu_329_p4;

assign zext_ln56_1_fu_967_p1 = select_ln55_reg_1132;

assign zext_ln56_2_fu_976_p1 = add_ln56_1_fu_970_p2;

assign zext_ln56_fu_957_p1 = tmp_287_fu_950_p3;

assign zext_ln67_1_fu_1033_p1 = tmp_288_fu_1025_p3;

assign zext_ln67_2_fu_1043_p1 = select_ln67_fu_1005_p3;

assign zext_ln67_3_fu_1053_p1 = add_ln67_2_fu_1047_p2;

assign zext_ln67_fu_1021_p1 = select_ln67_1_fu_1013_p3;

endmodule //dw_layer1
