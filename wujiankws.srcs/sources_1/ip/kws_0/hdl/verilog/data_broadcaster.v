// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_broadcaster (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_TDATA,
        data_in_TVALID,
        data_in_TREADY,
        data_in_TLAST,
        data2dw1_V_din,
        data2dw1_V_full_n,
        data2dw1_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] data_in_TDATA;
input   data_in_TVALID;
output   data_in_TREADY;
input   data_in_TLAST;
output  [31:0] data2dw1_V_din;
input   data2dw1_V_full_n;
output   data2dw1_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_in_TREADY;
reg data2dw1_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_in_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln21_fu_74_p2;
reg    data2dw1_V_blk_n;
wire   [8:0] i_fu_80_p2;
reg    ap_block_state2;
reg   [8:0] i_0_reg_63;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln21_fu_74_p2 == 1'd0) & (data2dw1_V_full_n == 1'b0)) | ((icmp_ln21_fu_74_p2 == 1'd0) & (data_in_TVALID == 1'b0))) & (icmp_ln21_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_63 <= i_fu_80_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_63 <= 9'd0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~(((icmp_ln21_fu_74_p2 == 1'd0) & (data2dw1_V_full_n == 1'b0)) | ((icmp_ln21_fu_74_p2 == 1'd0) & (data_in_TVALID == 1'b0))) & (icmp_ln21_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln21_fu_74_p2 == 1'd0) & (data2dw1_V_full_n == 1'b0)) | ((icmp_ln21_fu_74_p2 == 1'd0) & (data_in_TVALID == 1'b0))) & (icmp_ln21_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data2dw1_V_blk_n = data2dw1_V_full_n;
    end else begin
        data2dw1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln21_fu_74_p2 == 1'd0) & (data2dw1_V_full_n == 1'b0)) | ((icmp_ln21_fu_74_p2 == 1'd0) & (data_in_TVALID == 1'b0))) & (icmp_ln21_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data2dw1_V_write = 1'b1;
    end else begin
        data2dw1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_in_TDATA_blk_n = data_in_TVALID;
    end else begin
        data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln21_fu_74_p2 == 1'd0) & (data2dw1_V_full_n == 1'b0)) | ((icmp_ln21_fu_74_p2 == 1'd0) & (data_in_TVALID == 1'b0))) & (icmp_ln21_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_in_TREADY = 1'b1;
    end else begin
        data_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((icmp_ln21_fu_74_p2 == 1'd0) & (data2dw1_V_full_n == 1'b0)) | ((icmp_ln21_fu_74_p2 == 1'd0) & (data_in_TVALID == 1'b0))) & (icmp_ln21_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((icmp_ln21_fu_74_p2 == 1'd0) & (data2dw1_V_full_n == 1'b0)) | ((icmp_ln21_fu_74_p2 == 1'd0) & (data_in_TVALID == 1'b0))) & (icmp_ln21_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2 = (((icmp_ln21_fu_74_p2 == 1'd0) & (data2dw1_V_full_n == 1'b0)) | ((icmp_ln21_fu_74_p2 == 1'd0) & (data_in_TVALID == 1'b0)));
end

assign data2dw1_V_din = data_in_TDATA;

assign i_fu_80_p2 = (i_0_reg_63 + 9'd1);

assign icmp_ln21_fu_74_p2 = ((i_0_reg_63 == 9'd490) ? 1'b1 : 1'b0);

endmodule //data_broadcaster
