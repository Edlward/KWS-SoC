-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dw_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_V_empty_n : IN STD_LOGIC;
    in_stream_V_read : OUT STD_LOGIC;
    out_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_full_n : IN STD_LOGIC;
    out_stream_V_write : OUT STD_LOGIC;
    dw_weight1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dw_weight1_ce0 : OUT STD_LOGIC;
    dw_weight1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dw_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_1EA : STD_LOGIC_VECTOR (8 downto 0) := "111101010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_19E : STD_LOGIC_VECTOR (8 downto 0) := "110011110";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv12_CF0 : STD_LOGIC_VECTOR (11 downto 0) := "110011110000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv11_33C : STD_LOGIC_VECTOR (10 downto 0) := "01100111100";
    constant ap_const_lv10_19E : STD_LOGIC_VECTOR (9 downto 0) := "0110011110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_5_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_5_ce0 : STD_LOGIC;
    signal x_5_we0 : STD_LOGIC;
    signal x_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_5_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_5_ce0 : STD_LOGIC;
    signal y_5_we0 : STD_LOGIC;
    signal y_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_5_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_5_ce1 : STD_LOGIC;
    signal y_5_we1 : STD_LOGIC;
    signal y_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln34_reg_1064 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln63_reg_1195 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_226 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_0_reg_237 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_0_reg_248 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten71_reg_292 : STD_LOGIC_VECTOR (11 downto 0);
    signal kh_0_reg_303 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten37_reg_314 : STD_LOGIC_VECTOR (10 downto 0);
    signal kw_0_reg_325 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten18_reg_336 : STD_LOGIC_VECTOR (9 downto 0);
    signal oh1_0_reg_347 : STD_LOGIC_VECTOR (5 downto 0);
    signal ow2_0_reg_358 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten83_reg_369 : STD_LOGIC_VECTOR (8 downto 0);
    signal oh3_0_reg_380 : STD_LOGIC_VECTOR (5 downto 0);
    signal ow4_0_reg_391 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln34_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln34_fu_418_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln38_fu_436_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln38_reg_1073 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln38_4_fu_444_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln38_4_reg_1078 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_fu_452_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln42_fu_506_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln45_1_fu_532_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln42_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ow_fu_577_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln50_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_1108 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state7_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln50_reg_1108_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_1108_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_1108_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_1108_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_1108_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_1108_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_1108_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_1108_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_fu_621_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln50_1_fu_647_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln50_1_reg_1117 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln51_1_fu_757_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln51_1_reg_1122 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln55_fu_832_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln55_reg_1132 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln55_2_fu_884_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln55_2_reg_1137 : STD_LOGIC_VECTOR (5 downto 0);
    signal ow_3_fu_913_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln52_fu_925_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln51_4_fu_939_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal y_5_addr_2_reg_1174 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_5_addr_2_reg_1174_pp2_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal y_5_addr_2_reg_1174_pp2_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal y_5_addr_2_reg_1174_pp2_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal y_5_addr_2_reg_1174_pp2_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal y_5_addr_2_reg_1174_pp2_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal y_5_addr_2_reg_1174_pp2_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal y_5_addr_2_reg_1174_pp2_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_5_load_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln63_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state18_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln63_fu_987_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal select_ln67_1_fu_1013_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln67_1_reg_1204 : STD_LOGIC_VECTOR (5 downto 0);
    signal ow_4_fu_1058_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state18 : STD_LOGIC;
    signal ap_phi_mux_h_0_phi_fu_241_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten11_reg_259 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal oh_0_reg_270 : STD_LOGIC_VECTOR (5 downto 0);
    signal ow_0_reg_281 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_kh_0_phi_fu_307_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_kw_0_phi_fu_329_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_oh1_0_phi_fu_351_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_oh3_0_phi_fu_384_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln38_8_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_3_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln51_2_fu_779_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_8_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_2_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_3_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal icmp_ln35_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_424_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_279_fu_458_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_280_fu_469_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln38_6_fu_476_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_fu_465_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_fu_480_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_7_fu_486_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_4_fu_489_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln43_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal oh_fu_512_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_281_fu_544_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln45_fu_540_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln45_1_fu_552_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln45_fu_524_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln45_fu_556_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln45_2_fu_562_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln45_1_fu_566_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_282_fu_587_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln55_fu_599_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln51_fu_595_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln50_fu_583_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kh_fu_627_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_283_fu_663_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_284_fu_675_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln50_2_fu_671_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln55_2_fu_603_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln50_2_fu_687_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln55_1_fu_659_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln55_fu_609_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln53_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_639_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln50_1_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kw_fu_737_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln55_2_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_3_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln55_3_fu_773_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_3_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_fu_655_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln50_3_fu_699_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln51_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_1_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_749_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln51_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_1_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal oh_8_fu_814_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln55_4_fu_840_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln51_3_fu_788_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln55_1_fu_846_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_285_fu_854_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_286_fu_866_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln55_5_fu_874_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln55_4_fu_862_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln51_1_fu_765_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln55_1_fu_892_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln55_5_fu_878_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln55_7_fu_898_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln55_6_fu_902_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln52_1_fu_919_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln51_1_fu_933_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_287_fu_950_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln55_6_fu_947_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln56_fu_957_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln56_fu_961_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln56_1_fu_967_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln56_1_fu_970_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln64_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal oh_7_fu_993_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_288_fu_1025_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln67_fu_1021_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln67_1_fu_1033_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln67_fu_1005_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln67_fu_1037_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln67_2_fu_1043_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_2_fu_1047_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component kws_fadd_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dw_layer1_x_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dw_layer1_y_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    x_5_U : component dw_layer1_x_5
    generic map (
        DataWidth => 32,
        AddressRange => 490,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_5_address0,
        ce0 => x_5_ce0,
        we0 => x_5_we0,
        d0 => in_stream_V_dout,
        q0 => x_5_q0);

    y_5_U : component dw_layer1_y_5
    generic map (
        DataWidth => 32,
        AddressRange => 414,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_5_address0,
        ce0 => y_5_ce0,
        we0 => y_5_we0,
        d0 => ap_const_lv32_0,
        q0 => y_5_q0,
        address1 => y_5_address1,
        ce1 => y_5_ce1,
        we1 => y_5_we1,
        d1 => tmp_s_reg_1190,
        q1 => y_5_q1);

    kws_fadd_32ns_32nbkb_U4 : component kws_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_5_load_reg_1185,
        din1 => tmp_1_reg_1180,
        ce => ap_const_logic_1,
        dout => grp_fu_402_p2);

    kws_fmul_32ns_32ncud_U5 : component kws_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_5_q0,
        din1 => dw_weight1_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state18))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state18))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state18);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_0_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_1064 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                h_0_reg_237 <= select_ln38_4_reg_1078;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_0_reg_237 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten11_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten11_reg_259 <= ap_const_lv9_0;
            elsif (((icmp_ln42_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvar_flatten11_reg_259 <= add_ln42_fu_506_p2;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten18_reg_336 <= ap_const_lv10_0;
            elsif (((icmp_ln50_fu_615_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten18_reg_336 <= select_ln52_fu_925_p3;
            end if; 
        end if;
    end process;

    indvar_flatten37_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten37_reg_314 <= ap_const_lv11_0;
            elsif (((icmp_ln50_fu_615_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten37_reg_314 <= select_ln51_4_fu_939_p3;
            end if; 
        end if;
    end process;

    indvar_flatten71_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten71_reg_292 <= ap_const_lv12_0;
            elsif (((icmp_ln50_fu_615_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten71_reg_292 <= add_ln50_fu_621_p2;
            end if; 
        end if;
    end process;

    indvar_flatten83_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvar_flatten83_reg_369 <= ap_const_lv9_0;
            elsif (((icmp_ln63_fu_981_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
                indvar_flatten83_reg_369 <= add_ln63_fu_987_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_412_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_226 <= add_ln34_fu_418_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_226 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    kh_0_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                kh_0_reg_303 <= ap_const_lv3_0;
            elsif (((icmp_ln50_reg_1108 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                kh_0_reg_303 <= select_ln50_1_reg_1117;
            end if; 
        end if;
    end process;

    kw_0_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                kw_0_reg_325 <= ap_const_lv2_0;
            elsif (((icmp_ln50_reg_1108 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                kw_0_reg_325 <= select_ln51_1_reg_1122;
            end if; 
        end if;
    end process;

    oh1_0_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                oh1_0_reg_347 <= ap_const_lv6_0;
            elsif (((icmp_ln50_reg_1108 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                oh1_0_reg_347 <= select_ln55_2_reg_1137;
            end if; 
        end if;
    end process;

    oh3_0_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                oh3_0_reg_380 <= ap_const_lv6_0;
            elsif (((icmp_ln63_reg_1195 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                oh3_0_reg_380 <= select_ln67_1_reg_1204;
            end if; 
        end if;
    end process;

    oh_0_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                oh_0_reg_270 <= ap_const_lv6_0;
            elsif (((icmp_ln42_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                oh_0_reg_270 <= select_ln45_1_fu_532_p3;
            end if; 
        end if;
    end process;

    ow2_0_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ow2_0_reg_358 <= ap_const_lv4_0;
            elsif (((icmp_ln50_fu_615_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                ow2_0_reg_358 <= ow_3_fu_913_p2;
            end if; 
        end if;
    end process;

    ow4_0_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                ow4_0_reg_391 <= ap_const_lv4_0;
            elsif (((icmp_ln63_fu_981_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
                ow4_0_reg_391 <= ow_4_fu_1058_p2;
            end if; 
        end if;
    end process;

    ow_0_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ow_0_reg_281 <= ap_const_lv4_0;
            elsif (((icmp_ln42_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ow_0_reg_281 <= ow_fu_577_p2;
            end if; 
        end if;
    end process;

    w_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_412_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_0_reg_248 <= w_fu_452_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_0_reg_248 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln34_reg_1064 <= icmp_ln34_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln50_reg_1108 <= icmp_ln50_fu_615_p2;
                icmp_ln50_reg_1108_pp2_iter1_reg <= icmp_ln50_reg_1108;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln50_reg_1108_pp2_iter2_reg <= icmp_ln50_reg_1108_pp2_iter1_reg;
                icmp_ln50_reg_1108_pp2_iter3_reg <= icmp_ln50_reg_1108_pp2_iter2_reg;
                icmp_ln50_reg_1108_pp2_iter4_reg <= icmp_ln50_reg_1108_pp2_iter3_reg;
                icmp_ln50_reg_1108_pp2_iter5_reg <= icmp_ln50_reg_1108_pp2_iter4_reg;
                icmp_ln50_reg_1108_pp2_iter6_reg <= icmp_ln50_reg_1108_pp2_iter5_reg;
                icmp_ln50_reg_1108_pp2_iter7_reg <= icmp_ln50_reg_1108_pp2_iter6_reg;
                icmp_ln50_reg_1108_pp2_iter8_reg <= icmp_ln50_reg_1108_pp2_iter7_reg;
                y_5_addr_2_reg_1174_pp2_iter2_reg <= y_5_addr_2_reg_1174;
                y_5_addr_2_reg_1174_pp2_iter3_reg <= y_5_addr_2_reg_1174_pp2_iter2_reg;
                y_5_addr_2_reg_1174_pp2_iter4_reg <= y_5_addr_2_reg_1174_pp2_iter3_reg;
                y_5_addr_2_reg_1174_pp2_iter5_reg <= y_5_addr_2_reg_1174_pp2_iter4_reg;
                y_5_addr_2_reg_1174_pp2_iter6_reg <= y_5_addr_2_reg_1174_pp2_iter5_reg;
                y_5_addr_2_reg_1174_pp2_iter7_reg <= y_5_addr_2_reg_1174_pp2_iter6_reg;
                y_5_addr_2_reg_1174_pp2_iter8_reg <= y_5_addr_2_reg_1174_pp2_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln63_reg_1195 <= icmp_ln63_fu_981_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_412_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln38_4_reg_1078 <= select_ln38_4_fu_444_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_412_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln38_reg_1073 <= select_ln38_fu_436_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_615_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln50_1_reg_1117 <= select_ln50_1_fu_647_p3;
                select_ln51_1_reg_1122 <= select_ln51_1_fu_757_p3;
                select_ln55_2_reg_1137 <= select_ln55_2_fu_884_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_615_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln55_reg_1132 <= select_ln55_fu_832_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_981_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                select_ln67_1_reg_1204 <= select_ln67_1_fu_1013_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_1108_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_1_reg_1180 <= grp_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_1108_pp2_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_s_reg_1190 <= grp_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                y_5_addr_2_reg_1174 <= zext_ln56_2_fu_976_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_1108_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                y_5_load_reg_1185 <= y_5_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln34_fu_412_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, icmp_ln42_fu_500_p2, icmp_ln50_fu_615_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, icmp_ln63_fu_981_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_block_pp3_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln34_fu_412_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln34_fu_412_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln42_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln50_fu_615_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln50_fu_615_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln63_fu_981_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln63_fu_981_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln34_fu_418_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_226) + unsigned(ap_const_lv9_1));
    add_ln38_4_fu_489_p2 <= std_logic_vector(unsigned(add_ln38_fu_480_p2) + unsigned(zext_ln38_7_fu_486_p1));
    add_ln38_fu_480_p2 <= std_logic_vector(unsigned(zext_ln38_6_fu_476_p1) + unsigned(zext_ln38_fu_465_p1));
    add_ln42_fu_506_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_259) + unsigned(ap_const_lv9_1));
    add_ln45_1_fu_566_p2 <= std_logic_vector(unsigned(add_ln45_fu_556_p2) + unsigned(zext_ln45_2_fu_562_p1));
    add_ln45_fu_556_p2 <= std_logic_vector(unsigned(zext_ln45_fu_540_p1) + unsigned(zext_ln45_1_fu_552_p1));
    add_ln50_fu_621_p2 <= std_logic_vector(unsigned(indvar_flatten71_reg_292) + unsigned(ap_const_lv12_1));
    add_ln51_1_fu_933_p2 <= std_logic_vector(unsigned(indvar_flatten37_reg_314) + unsigned(ap_const_lv11_1));
    add_ln52_1_fu_919_p2 <= std_logic_vector(unsigned(indvar_flatten18_reg_336) + unsigned(ap_const_lv10_1));
    add_ln55_1_fu_892_p2 <= std_logic_vector(unsigned(select_ln55_fu_832_p3) + unsigned(zext_ln51_1_fu_765_p1));
    add_ln55_2_fu_603_p2 <= std_logic_vector(unsigned(zext_ln55_fu_599_p1) + unsigned(zext_ln51_fu_595_p1));
    add_ln55_3_fu_773_p2 <= std_logic_vector(unsigned(zext_ln55_2_fu_683_p1) + unsigned(zext_ln55_3_fu_769_p1));
    add_ln55_4_fu_840_p2 <= std_logic_vector(unsigned(oh_8_fu_814_p2) + unsigned(zext_ln50_1_fu_655_p1));
    add_ln55_5_fu_878_p2 <= std_logic_vector(unsigned(zext_ln55_5_fu_874_p1) + unsigned(zext_ln55_4_fu_862_p1));
    add_ln55_6_fu_902_p2 <= std_logic_vector(unsigned(add_ln55_5_fu_878_p2) + unsigned(zext_ln55_7_fu_898_p1));
    add_ln55_fu_609_p2 <= std_logic_vector(unsigned(zext_ln50_fu_583_p1) + unsigned(ap_phi_mux_oh1_0_phi_fu_351_p4));
    add_ln56_1_fu_970_p2 <= std_logic_vector(unsigned(add_ln56_fu_961_p2) + unsigned(zext_ln56_1_fu_967_p1));
    add_ln56_fu_961_p2 <= std_logic_vector(unsigned(zext_ln55_6_fu_947_p1) + unsigned(zext_ln56_fu_957_p1));
    add_ln63_fu_987_p2 <= std_logic_vector(unsigned(indvar_flatten83_reg_369) + unsigned(ap_const_lv9_1));
    add_ln67_2_fu_1047_p2 <= std_logic_vector(unsigned(add_ln67_fu_1037_p2) + unsigned(zext_ln67_2_fu_1043_p1));
    add_ln67_fu_1037_p2 <= std_logic_vector(unsigned(zext_ln67_fu_1021_p1) + unsigned(zext_ln67_1_fu_1033_p1));
    and_ln50_1_fu_731_p2 <= (xor_ln50_fu_707_p2 and icmp_ln52_fu_725_p2);
    and_ln50_fu_719_p2 <= (xor_ln50_fu_707_p2 and icmp_ln53_fu_713_p2);
    and_ln51_fu_808_p2 <= (or_ln51_1_fu_802_p2 and and_ln50_fu_719_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(6);
    ap_CS_fsm_state20 <= ap_CS_fsm(8);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln34_reg_1064)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln34_reg_1064 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln34_reg_1064)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln34_reg_1064 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln63_reg_1195)
    begin
                ap_block_pp3_stage0_01001 <= ((icmp_ln63_reg_1195 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln63_reg_1195)
    begin
                ap_block_pp3_stage0_11001 <= ((icmp_ln63_reg_1195 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln63_reg_1195)
    begin
                ap_block_pp3_stage0_subdone <= ((icmp_ln63_reg_1195 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_state10_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp3_stage0_iter1_assign_proc : process(out_stream_V_full_n, icmp_ln63_reg_1195)
    begin
                ap_block_state19_pp3_stage0_iter1 <= ((icmp_ln63_reg_1195 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_stream_V_empty_n, icmp_ln34_reg_1064)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln34_reg_1064 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state7_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln34_fu_412_p2)
    begin
        if ((icmp_ln34_fu_412_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state7_assign_proc : process(icmp_ln50_fu_615_p2)
    begin
        if ((icmp_ln50_fu_615_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state18_assign_proc : process(icmp_ln63_fu_981_p2)
    begin
        if ((icmp_ln63_fu_981_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9)
    begin
        if (((ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_h_0_phi_fu_241_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln34_reg_1064, h_0_reg_237, select_ln38_4_reg_1078)
    begin
        if (((icmp_ln34_reg_1064 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_h_0_phi_fu_241_p4 <= select_ln38_4_reg_1078;
        else 
            ap_phi_mux_h_0_phi_fu_241_p4 <= h_0_reg_237;
        end if; 
    end process;


    ap_phi_mux_kh_0_phi_fu_307_p4_assign_proc : process(kh_0_reg_303, icmp_ln50_reg_1108, ap_CS_fsm_pp2_stage0, select_ln50_1_reg_1117, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln50_reg_1108 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_kh_0_phi_fu_307_p4 <= select_ln50_1_reg_1117;
        else 
            ap_phi_mux_kh_0_phi_fu_307_p4 <= kh_0_reg_303;
        end if; 
    end process;


    ap_phi_mux_kw_0_phi_fu_329_p4_assign_proc : process(kw_0_reg_325, icmp_ln50_reg_1108, ap_CS_fsm_pp2_stage0, select_ln51_1_reg_1122, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln50_reg_1108 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_kw_0_phi_fu_329_p4 <= select_ln51_1_reg_1122;
        else 
            ap_phi_mux_kw_0_phi_fu_329_p4 <= kw_0_reg_325;
        end if; 
    end process;


    ap_phi_mux_oh1_0_phi_fu_351_p4_assign_proc : process(oh1_0_reg_347, icmp_ln50_reg_1108, ap_CS_fsm_pp2_stage0, select_ln55_2_reg_1137, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln50_reg_1108 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_oh1_0_phi_fu_351_p4 <= select_ln55_2_reg_1137;
        else 
            ap_phi_mux_oh1_0_phi_fu_351_p4 <= oh1_0_reg_347;
        end if; 
    end process;


    ap_phi_mux_oh3_0_phi_fu_384_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln63_reg_1195, oh3_0_reg_380, select_ln67_1_reg_1204)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln63_reg_1195 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_oh3_0_phi_fu_384_p4 <= select_ln67_1_reg_1204;
        else 
            ap_phi_mux_oh3_0_phi_fu_384_p4 <= oh3_0_reg_380;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dw_weight1_address0 <= select_ln51_2_fu_779_p3(3 - 1 downto 0);

    dw_weight1_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            dw_weight1_ce0 <= ap_const_logic_1;
        else 
            dw_weight1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    h_fu_424_p2 <= std_logic_vector(unsigned(ap_phi_mux_h_0_phi_fu_241_p4) + unsigned(ap_const_lv6_1));
    icmp_ln34_fu_412_p2 <= "1" when (indvar_flatten_reg_226 = ap_const_lv9_1EA) else "0";
    icmp_ln35_fu_430_p2 <= "1" when (w_0_reg_248 = ap_const_lv4_A) else "0";
    icmp_ln42_fu_500_p2 <= "1" when (indvar_flatten11_reg_259 = ap_const_lv9_19E) else "0";
    icmp_ln43_fu_518_p2 <= "1" when (ow_0_reg_281 = ap_const_lv4_9) else "0";
    icmp_ln50_fu_615_p2 <= "1" when (indvar_flatten71_reg_292 = ap_const_lv12_CF0) else "0";
    icmp_ln51_fu_633_p2 <= "1" when (indvar_flatten37_reg_314 = ap_const_lv11_33C) else "0";
    icmp_ln52_fu_725_p2 <= "1" when (indvar_flatten18_reg_336 = ap_const_lv10_19E) else "0";
    icmp_ln53_fu_713_p2 <= "1" when (ow2_0_reg_358 = ap_const_lv4_9) else "0";
    icmp_ln63_fu_981_p2 <= "1" when (indvar_flatten83_reg_369 = ap_const_lv9_19E) else "0";
    icmp_ln64_fu_999_p2 <= "1" when (ow4_0_reg_391 = ap_const_lv4_9) else "0";

    in_stream_V_blk_n_assign_proc : process(in_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln34_reg_1064)
    begin
        if (((icmp_ln34_reg_1064 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_V_blk_n <= in_stream_V_empty_n;
        else 
            in_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln34_reg_1064, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln34_reg_1064 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_stream_V_read <= ap_const_logic_1;
        else 
            in_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    kh_fu_627_p2 <= std_logic_vector(unsigned(ap_phi_mux_kh_0_phi_fu_307_p4) + unsigned(ap_const_lv3_1));
    kw_fu_737_p2 <= std_logic_vector(unsigned(select_ln50_fu_639_p3) + unsigned(ap_const_lv2_1));
    oh_7_fu_993_p2 <= std_logic_vector(unsigned(ap_phi_mux_oh3_0_phi_fu_384_p4) + unsigned(ap_const_lv6_1));
    oh_8_fu_814_p2 <= std_logic_vector(unsigned(select_ln51_fu_749_p3) + unsigned(ap_const_lv6_1));
    oh_fu_512_p2 <= std_logic_vector(unsigned(oh_0_reg_270) + unsigned(ap_const_lv6_1));
    or_ln51_1_fu_802_p2 <= (xor_ln51_fu_796_p2 or icmp_ln51_fu_633_p2);
    or_ln51_fu_743_p2 <= (icmp_ln51_fu_633_p2 or and_ln50_1_fu_731_p2);
    or_ln55_1_fu_826_p2 <= (or_ln55_fu_820_p2 or icmp_ln51_fu_633_p2);
    or_ln55_fu_820_p2 <= (and_ln51_fu_808_p2 or and_ln50_1_fu_731_p2);

    out_stream_V_blk_n_assign_proc : process(out_stream_V_full_n, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln63_reg_1195)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln63_reg_1195 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            out_stream_V_blk_n <= out_stream_V_full_n;
        else 
            out_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_din <= y_5_q1;

    out_stream_V_write_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln63_reg_1195, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln63_reg_1195 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            out_stream_V_write <= ap_const_logic_1;
        else 
            out_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    ow_3_fu_913_p2 <= std_logic_vector(unsigned(select_ln55_fu_832_p3) + unsigned(ap_const_lv4_1));
    ow_4_fu_1058_p2 <= std_logic_vector(unsigned(select_ln67_fu_1005_p3) + unsigned(ap_const_lv4_1));
    ow_fu_577_p2 <= std_logic_vector(unsigned(select_ln45_fu_524_p3) + unsigned(ap_const_lv4_1));
    select_ln38_4_fu_444_p3 <= 
        h_fu_424_p2 when (icmp_ln35_fu_430_p2(0) = '1') else 
        ap_phi_mux_h_0_phi_fu_241_p4;
    select_ln38_fu_436_p3 <= 
        ap_const_lv4_0 when (icmp_ln35_fu_430_p2(0) = '1') else 
        w_0_reg_248;
    select_ln45_1_fu_532_p3 <= 
        oh_fu_512_p2 when (icmp_ln43_fu_518_p2(0) = '1') else 
        oh_0_reg_270;
    select_ln45_fu_524_p3 <= 
        ap_const_lv4_0 when (icmp_ln43_fu_518_p2(0) = '1') else 
        ow_0_reg_281;
    select_ln50_1_fu_647_p3 <= 
        kh_fu_627_p2 when (icmp_ln51_fu_633_p2(0) = '1') else 
        ap_phi_mux_kh_0_phi_fu_307_p4;
    select_ln50_2_fu_687_p3 <= 
        zext_ln50_2_fu_671_p1 when (icmp_ln51_fu_633_p2(0) = '1') else 
        add_ln55_2_fu_603_p2;
    select_ln50_3_fu_699_p3 <= 
        zext_ln55_1_fu_659_p1 when (icmp_ln51_fu_633_p2(0) = '1') else 
        add_ln55_fu_609_p2;
    select_ln50_fu_639_p3 <= 
        ap_const_lv2_0 when (icmp_ln51_fu_633_p2(0) = '1') else 
        ap_phi_mux_kw_0_phi_fu_329_p4;
    select_ln51_1_fu_757_p3 <= 
        kw_fu_737_p2 when (and_ln50_1_fu_731_p2(0) = '1') else 
        select_ln50_fu_639_p3;
    select_ln51_2_fu_779_p3 <= 
        add_ln55_3_fu_773_p2 when (and_ln50_1_fu_731_p2(0) = '1') else 
        zext_ln50_3_fu_695_p1;
    select_ln51_3_fu_788_p3 <= 
        zext_ln50_1_fu_655_p1 when (and_ln50_1_fu_731_p2(0) = '1') else 
        select_ln50_3_fu_699_p3;
    select_ln51_4_fu_939_p3 <= 
        ap_const_lv11_1 when (icmp_ln51_fu_633_p2(0) = '1') else 
        add_ln51_1_fu_933_p2;
    select_ln51_fu_749_p3 <= 
        ap_const_lv6_0 when (or_ln51_fu_743_p2(0) = '1') else 
        ap_phi_mux_oh1_0_phi_fu_351_p4;
    select_ln52_fu_925_p3 <= 
        ap_const_lv10_1 when (or_ln51_fu_743_p2(0) = '1') else 
        add_ln52_1_fu_919_p2;
    select_ln55_1_fu_846_p3 <= 
        add_ln55_4_fu_840_p2 when (and_ln51_fu_808_p2(0) = '1') else 
        select_ln51_3_fu_788_p3;
    select_ln55_2_fu_884_p3 <= 
        oh_8_fu_814_p2 when (and_ln51_fu_808_p2(0) = '1') else 
        select_ln51_fu_749_p3;
    select_ln55_fu_832_p3 <= 
        ap_const_lv4_0 when (or_ln55_1_fu_826_p2(0) = '1') else 
        ow2_0_reg_358;
    select_ln67_1_fu_1013_p3 <= 
        oh_7_fu_993_p2 when (icmp_ln64_fu_999_p2(0) = '1') else 
        ap_phi_mux_oh3_0_phi_fu_384_p4;
    select_ln67_fu_1005_p3 <= 
        ap_const_lv4_0 when (icmp_ln64_fu_999_p2(0) = '1') else 
        ow4_0_reg_391;
    tmp_279_fu_458_p3 <= (select_ln38_4_reg_1078 & ap_const_lv3_0);
    tmp_280_fu_469_p3 <= (select_ln38_4_reg_1078 & ap_const_lv1_0);
    tmp_281_fu_544_p3 <= (select_ln45_1_fu_532_p3 & ap_const_lv3_0);
    tmp_282_fu_587_p3 <= (ap_phi_mux_kh_0_phi_fu_307_p4 & ap_const_lv1_0);
    tmp_283_fu_663_p3 <= (kh_fu_627_p2 & ap_const_lv1_0);
    tmp_284_fu_675_p3 <= (select_ln50_1_fu_647_p3 & ap_const_lv1_0);
    tmp_285_fu_854_p3 <= (select_ln55_1_fu_846_p3 & ap_const_lv3_0);
    tmp_286_fu_866_p3 <= (select_ln55_1_fu_846_p3 & ap_const_lv1_0);
    tmp_287_fu_950_p3 <= (select_ln55_2_reg_1137 & ap_const_lv3_0);
    tmp_288_fu_1025_p3 <= (select_ln67_1_fu_1013_p3 & ap_const_lv3_0);
    w_fu_452_p2 <= std_logic_vector(unsigned(select_ln38_fu_436_p3) + unsigned(ap_const_lv4_1));

    x_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, zext_ln38_8_fu_495_p1, zext_ln55_8_fu_908_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            x_5_address0 <= zext_ln55_8_fu_908_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_5_address0 <= zext_ln38_8_fu_495_p1(9 - 1 downto 0);
        else 
            x_5_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    x_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            x_5_ce0 <= ap_const_logic_1;
        else 
            x_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln34_reg_1064, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln34_reg_1064 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_5_we0 <= ap_const_logic_1;
        else 
            x_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln50_fu_707_p2 <= (icmp_ln51_fu_633_p2 xor ap_const_lv1_1);
    xor_ln51_fu_796_p2 <= (icmp_ln52_fu_725_p2 xor ap_const_lv1_1);

    y_5_address0_assign_proc : process(ap_CS_fsm_state5, y_5_addr_2_reg_1174_pp2_iter2_reg, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, zext_ln45_3_fu_572_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            y_5_address0 <= y_5_addr_2_reg_1174_pp2_iter2_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_5_address0 <= zext_ln45_3_fu_572_p1(9 - 1 downto 0);
        else 
            y_5_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    y_5_address1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, y_5_addr_2_reg_1174_pp2_iter8_reg, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter9, ap_block_pp2_stage0, zext_ln67_3_fu_1053_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            y_5_address1 <= zext_ln67_3_fu_1053_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1))) then 
            y_5_address1 <= y_5_addr_2_reg_1174_pp2_iter8_reg;
        else 
            y_5_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    y_5_ce0_assign_proc : process(ap_CS_fsm_state5, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            y_5_ce0 <= ap_const_logic_1;
        else 
            y_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_5_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter9)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            y_5_ce1 <= ap_const_logic_1;
        else 
            y_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_5_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln42_fu_500_p2)
    begin
        if (((icmp_ln42_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_5_we0 <= ap_const_logic_1;
        else 
            y_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_5_we1_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln50_reg_1108_pp2_iter8_reg, ap_enable_reg_pp2_iter9)
    begin
        if (((icmp_ln50_reg_1108_pp2_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            y_5_we1 <= ap_const_logic_1;
        else 
            y_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln38_6_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_280_fu_469_p3),10));
    zext_ln38_7_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_reg_1073),10));
    zext_ln38_8_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_4_fu_489_p2),64));
    zext_ln38_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_279_fu_458_p3),10));
    zext_ln45_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_281_fu_544_p3),10));
    zext_ln45_2_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_fu_524_p3),10));
    zext_ln45_3_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_fu_566_p2),64));
    zext_ln45_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_1_fu_532_p3),10));
    zext_ln50_1_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_1_fu_647_p3),6));
    zext_ln50_2_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_283_fu_663_p3),5));
    zext_ln50_3_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_2_fu_687_p3),64));
    zext_ln50_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_kh_0_phi_fu_307_p4),6));
    zext_ln51_1_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_fu_757_p3),4));
    zext_ln51_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_282_fu_587_p3),5));
    zext_ln55_1_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kh_fu_627_p2),6));
    zext_ln55_2_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_284_fu_675_p3),64));
    zext_ln55_3_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kw_fu_737_p2),64));
    zext_ln55_4_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_285_fu_854_p3),10));
    zext_ln55_5_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_286_fu_866_p3),10));
    zext_ln55_6_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln55_2_reg_1137),10));
    zext_ln55_7_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_1_fu_892_p2),10));
    zext_ln55_8_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_6_fu_902_p2),64));
    zext_ln55_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_kw_0_phi_fu_329_p4),5));
    zext_ln56_1_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln55_reg_1132),10));
    zext_ln56_2_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln56_1_fu_970_p2),64));
    zext_ln56_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_287_fu_950_p3),10));
    zext_ln67_1_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_288_fu_1025_p3),10));
    zext_ln67_2_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln67_fu_1005_p3),10));
    zext_ln67_3_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_2_fu_1047_p2),64));
    zext_ln67_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln67_1_fu_1013_p3),10));
end behav;
