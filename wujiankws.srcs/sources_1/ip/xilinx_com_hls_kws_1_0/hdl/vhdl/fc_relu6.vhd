-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_relu6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_V_empty_n : IN STD_LOGIC;
    in_stream_V_read : OUT STD_LOGIC;
    out_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_full_n : IN STD_LOGIC;
    out_stream_V_write : OUT STD_LOGIC;
    fc_bias1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fc_bias1_ce0 : OUT STD_LOGIC;
    fc_bias1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_weights1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    fc_weights1_ce0 : OUT STD_LOGIC;
    fc_weights1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fc_relu6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp2_stage4 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_40C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000110000000000000000000000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_ce0 : STD_LOGIC;
    signal x_we0 : STD_LOGIC;
    signal x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_ce0 : STD_LOGIC;
    signal y_we0 : STD_LOGIC;
    signal y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln25_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln50_reg_630 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_210 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_233 : STD_LOGIC_VECTOR (11 downto 0);
    signal om1_0_reg_244 : STD_LOGIC_VECTOR (6 downto 0);
    signal im_0_reg_255 : STD_LOGIC_VECTOR (5 downto 0);
    signal om2_0_reg_266 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln25_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_305_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_520 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal om_fu_322_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln37_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state7_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln37_reg_533_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_fu_339_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln37_reg_537 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln40_fu_357_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_reg_542 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_1_fu_365_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln40_1_reg_547 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state8_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state18_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal zext_ln40_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_reg_573 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp2_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage4 : signal is "none";
    signal ap_block_state11_pp2_stage4_iter0 : BOOLEAN;
    signal ap_block_state16_pp2_stage4_iter1 : BOOLEAN;
    signal ap_block_state21_pp2_stage4_iter2 : BOOLEAN;
    signal ap_block_pp2_stage4_11001 : BOOLEAN;
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_i_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_addr_1_reg_583 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_addr_1_reg_583_pp2_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal y_addr_1_reg_583_pp2_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal im_fu_409_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal im_reg_588 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal icmp_ln38_1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_1_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_1_reg_599_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_bias1_load_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_block_state10_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_state15_pp2_stage3_iter1 : BOOLEAN;
    signal ap_block_state20_pp2_stage3_iter2 : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_var_assign_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state9_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state14_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_state19_pp2_stage2_iter2 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_226_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal icmp_ln50_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state24_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state25_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal om_5_fu_505_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp2_stage4_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state24 : STD_LOGIC;
    signal ap_phi_mux_i_0_phi_fu_214_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal om_0_reg_222 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln31_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_237_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_om1_0_phi_fu_248_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_im_0_phi_fu_259_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_3_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_1_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage4 : BOOLEAN;
    signal zext_ln52_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal select_ln238_17_fu_491_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal grp_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln38_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal om_4_fu_345_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_264_fu_382_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln38_fu_373_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln40_2_fu_390_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln40_fu_394_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln236_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_225_fu_422_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln236_fu_432_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln236_17_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln236_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln236_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln238_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln236_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln238_17_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln238_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln238_fu_477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp2_stage3_00001 : BOOLEAN;
    signal ap_block_pp2_stage4_00001 : BOOLEAN;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component kws_fadd_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fadd_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc_relu6_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_relu6_y IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    x_U : component fc_relu6_x
    generic map (
        DataWidth => 32,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_address0,
        ce0 => x_ce0,
        we0 => x_we0,
        d0 => in_stream_V_dout,
        q0 => x_q0);

    y_U : component fc_relu6_y
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_address0,
        ce0 => y_ce0,
        we0 => y_we0,
        d0 => y_d0,
        q0 => y_q0);

    kws_fadd_32ns_32ndEe_U107 : component kws_fadd_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_q0,
        din1 => y_i_reg_578,
        ce => ap_const_logic_1,
        dout => grp_fu_277_p2);

    kws_fadd_32ns_32nbkb_U108 : component kws_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_104_reg_613,
        din1 => fc_bias1_load_reg_608,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p2);

    kws_fmul_32ns_32ncud_U109 : component kws_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_q0,
        din1 => fc_weights1_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_287_p2);

    kws_fcmp_32ns_32neOg_U110 : component kws_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_var_assign_reg_618,
        din1 => grp_fu_293_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_293_opcode,
        dout => grp_fu_293_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state24))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state24))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state24);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_516 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_210 <= i_reg_520;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_210 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    im_0_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                im_0_reg_255 <= ap_const_lv6_0;
            elsif (((icmp_ln37_reg_533 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                im_0_reg_255 <= im_reg_588;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_233 <= ap_const_lv12_0;
            elsif (((icmp_ln37_reg_533 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten_reg_233 <= add_ln37_reg_537;
            end if; 
        end if;
    end process;

    om1_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                om1_0_reg_244 <= ap_const_lv7_0;
            elsif (((icmp_ln37_reg_533 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                om1_0_reg_244 <= select_ln40_1_reg_547;
            end if; 
        end if;
    end process;

    om2_0_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                om2_0_reg_266 <= ap_const_lv7_0;
            elsif (((icmp_ln50_fu_499_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
                om2_0_reg_266 <= om_5_fu_505_p2;
            end if; 
        end if;
    end process;

    om_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                om_0_reg_222 <= ap_const_lv7_0;
            elsif (((icmp_ln31_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                om_0_reg_222 <= om_fu_322_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln37_reg_537 <= add_ln37_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_1_reg_599 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                fc_bias1_load_reg_608 <= fc_bias1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_520 <= i_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln25_reg_516 <= icmp_ln25_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln37_reg_533 <= icmp_ln37_fu_333_p2;
                icmp_ln37_reg_533_pp2_iter1_reg <= icmp_ln37_reg_533;
                icmp_ln38_1_reg_599_pp2_iter2_reg <= icmp_ln38_1_reg_599;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln38_1_reg_599 <= icmp_ln38_1_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln50_reg_630 <= icmp_ln50_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_533 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                im_reg_588 <= im_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (icmp_ln38_1_reg_599_pp2_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                in_var_assign_reg_618 <= grp_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_333_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln40_1_reg_547 <= select_ln40_1_fu_365_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln40_reg_542 <= select_ln40_fu_357_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_533_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                tmp_104_reg_613 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_1_reg_599_pp2_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                tmp_226_reg_625 <= grp_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_533 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                y_addr_1_reg_583 <= zext_ln40_fu_405_p1(6 - 1 downto 0);
                y_i_reg_578 <= grp_fu_287_p2;
                    zext_ln40_reg_573(6 downto 0) <= zext_ln40_fu_405_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                y_addr_1_reg_583_pp2_iter1_reg <= y_addr_1_reg_583;
                y_addr_1_reg_583_pp2_iter2_reg <= y_addr_1_reg_583_pp2_iter1_reg;
            end if;
        end if;
    end process;
    zext_ln40_reg_573(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln25_fu_299_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, icmp_ln37_fu_333_p2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, icmp_ln50_fu_499_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp2_stage4_subdone, ap_enable_reg_pp2_iter3, ap_block_pp3_stage0_subdone, icmp_ln31_fu_316_p2, ap_block_pp2_stage1_subdone, ap_block_pp2_stage2_subdone, ap_block_pp2_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_299_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_299_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln31_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln37_fu_333_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln37_fu_333_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_pp2_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln50_fu_499_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln50_fu_499_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln37_fu_339_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_237_p4) + unsigned(ap_const_lv12_1));
    add_ln40_fu_394_p2 <= std_logic_vector(unsigned(zext_ln38_fu_373_p1) + unsigned(zext_ln40_2_fu_390_p1));
    and_ln236_fu_454_p2 <= (tmp_226_reg_625 and or_ln236_fu_448_p2);
    and_ln238_17_fu_471_p2 <= (xor_ln236_fu_465_p2 and and_ln238_fu_459_p2);
    and_ln238_fu_459_p2 <= (or_ln236_fu_448_p2 and grp_fu_293_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage4 <= ap_CS_fsm(9);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state23 <= ap_CS_fsm(10);
    ap_CS_fsm_state26 <= ap_CS_fsm(12);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_516)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln25_reg_516 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_516)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln25_reg_516 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln50_reg_630)
    begin
                ap_block_pp3_stage0_01001 <= ((icmp_ln50_reg_630 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln50_reg_630)
    begin
                ap_block_pp3_stage0_11001 <= ((icmp_ln50_reg_630 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln50_reg_630)
    begin
                ap_block_pp3_stage0_subdone <= ((icmp_ln50_reg_630 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_state10_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_pp3_stage0_iter1_assign_proc : process(out_stream_V_full_n, icmp_ln50_reg_630)
    begin
                ap_block_state25_pp3_stage0_iter1 <= ((icmp_ln50_reg_630 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_stream_V_empty_n, icmp_ln25_reg_516)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln25_reg_516 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state7_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln25_fu_299_p2)
    begin
        if ((icmp_ln25_fu_299_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state7_assign_proc : process(icmp_ln37_fu_333_p2)
    begin
        if ((icmp_ln37_fu_333_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state24_assign_proc : process(icmp_ln50_fu_499_p2)
    begin
        if ((icmp_ln50_fu_499_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_214_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_516, i_0_reg_210, i_reg_520)
    begin
        if (((icmp_ln25_reg_516 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_214_p4 <= i_reg_520;
        else 
            ap_phi_mux_i_0_phi_fu_214_p4 <= i_0_reg_210;
        end if; 
    end process;


    ap_phi_mux_im_0_phi_fu_259_p4_assign_proc : process(im_0_reg_255, icmp_ln37_reg_533, ap_CS_fsm_pp2_stage0, im_reg_588, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln37_reg_533 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_im_0_phi_fu_259_p4 <= im_reg_588;
        else 
            ap_phi_mux_im_0_phi_fu_259_p4 <= im_0_reg_255;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_237_p4_assign_proc : process(indvar_flatten_reg_233, icmp_ln37_reg_533, ap_CS_fsm_pp2_stage0, add_ln37_reg_537, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln37_reg_533 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_237_p4 <= add_ln37_reg_537;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_237_p4 <= indvar_flatten_reg_233;
        end if; 
    end process;


    ap_phi_mux_om1_0_phi_fu_248_p4_assign_proc : process(om1_0_reg_244, icmp_ln37_reg_533, ap_CS_fsm_pp2_stage0, select_ln40_1_reg_547, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln37_reg_533 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_om1_0_phi_fu_248_p4 <= select_ln40_1_reg_547;
        else 
            ap_phi_mux_om1_0_phi_fu_248_p4 <= om1_0_reg_244;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln236_fu_419_p1 <= in_var_assign_reg_618;
    fc_bias1_address0 <= zext_ln40_reg_573(6 - 1 downto 0);

    fc_bias1_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            fc_bias1_ce0 <= ap_const_logic_1;
        else 
            fc_bias1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_weights1_address0 <= zext_ln40_3_fu_400_p1(12 - 1 downto 0);

    fc_weights1_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            fc_weights1_ce0 <= ap_const_logic_1;
        else 
            fc_weights1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_293_opcode_assign_proc : process(ap_CS_fsm_pp2_stage4, icmp_ln38_1_reg_599_pp2_iter2_reg, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter2, ap_block_pp2_stage3_00001, ap_block_pp2_stage4_00001)
    begin
        if (((icmp_ln38_1_reg_599_pp2_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4_00001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                grp_fu_293_opcode <= ap_const_lv5_2;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage3_00001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_fu_293_opcode <= ap_const_lv5_4;
            else 
                grp_fu_293_opcode <= "XXXXX";
            end if;
        else 
            grp_fu_293_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_293_p1_assign_proc : process(ap_CS_fsm_pp2_stage4, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter2, ap_block_pp2_stage4, ap_block_pp2_stage3)
    begin
        if ((ap_enable_reg_pp2_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                grp_fu_293_p1 <= ap_const_lv32_40C00000;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_fu_293_p1 <= ap_const_lv32_0;
            else 
                grp_fu_293_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_293_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_305_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_214_p4) + unsigned(ap_const_lv6_1));
    icmp_ln236_17_fu_442_p2 <= "1" when (trunc_ln236_fu_432_p1 = ap_const_lv23_0) else "0";
    icmp_ln236_fu_436_p2 <= "0" when (tmp_225_fu_422_p4 = ap_const_lv8_FF) else "1";
    icmp_ln25_fu_299_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_214_p4 = ap_const_lv6_28) else "0";
    icmp_ln31_fu_316_p2 <= "1" when (om_0_reg_222 = ap_const_lv7_40) else "0";
    icmp_ln37_fu_333_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_237_p4 = ap_const_lv12_A00) else "0";
    icmp_ln38_1_fu_414_p2 <= "1" when (im_reg_588 = ap_const_lv6_28) else "0";
    icmp_ln38_fu_351_p2 <= "1" when (ap_phi_mux_im_0_phi_fu_259_p4 = ap_const_lv6_28) else "0";
    icmp_ln50_fu_499_p2 <= "1" when (om2_0_reg_266 = ap_const_lv7_40) else "0";
    im_fu_409_p2 <= std_logic_vector(unsigned(select_ln40_reg_542) + unsigned(ap_const_lv6_1));

    in_stream_V_blk_n_assign_proc : process(in_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_516)
    begin
        if (((icmp_ln25_reg_516 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_V_blk_n <= in_stream_V_empty_n;
        else 
            in_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_516, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_516 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_stream_V_read <= ap_const_logic_1;
        else 
            in_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    om_4_fu_345_p2 <= std_logic_vector(unsigned(ap_phi_mux_om1_0_phi_fu_248_p4) + unsigned(ap_const_lv7_1));
    om_5_fu_505_p2 <= std_logic_vector(unsigned(om2_0_reg_266) + unsigned(ap_const_lv7_1));
    om_fu_322_p2 <= std_logic_vector(unsigned(om_0_reg_222) + unsigned(ap_const_lv7_1));
    or_ln236_fu_448_p2 <= (icmp_ln236_fu_436_p2 or icmp_ln236_17_fu_442_p2);
    or_ln238_fu_485_p2 <= (and_ln238_17_fu_471_p2 or and_ln236_fu_454_p2);

    out_stream_V_blk_n_assign_proc : process(out_stream_V_full_n, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln50_reg_630)
    begin
        if (((icmp_ln50_reg_630 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            out_stream_V_blk_n <= out_stream_V_full_n;
        else 
            out_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_din <= y_q0;

    out_stream_V_write_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln50_reg_630, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln50_reg_630 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            out_stream_V_write <= ap_const_logic_1;
        else 
            out_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln238_17_fu_491_p3 <= 
        select_ln238_fu_477_p3 when (or_ln238_fu_485_p2(0) = '1') else 
        in_var_assign_reg_618;
    select_ln238_fu_477_p3 <= 
        ap_const_lv32_40C00000 when (and_ln238_17_fu_471_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln40_1_fu_365_p3 <= 
        om_4_fu_345_p2 when (icmp_ln38_fu_351_p2(0) = '1') else 
        ap_phi_mux_om1_0_phi_fu_248_p4;
    select_ln40_fu_357_p3 <= 
        ap_const_lv6_0 when (icmp_ln38_fu_351_p2(0) = '1') else 
        ap_phi_mux_im_0_phi_fu_259_p4;
    tmp_225_fu_422_p4 <= bitcast_ln236_fu_419_p1(30 downto 23);
    tmp_264_fu_382_p3 <= (select_ln40_fu_357_p3 & ap_const_lv6_0);
    trunc_ln236_fu_432_p1 <= bitcast_ln236_fu_419_p1(23 - 1 downto 0);

    x_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, zext_ln28_fu_311_p1, zext_ln40_1_fu_377_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            x_address0 <= zext_ln40_1_fu_377_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_address0 <= zext_ln28_fu_311_p1(6 - 1 downto 0);
        else 
            x_address0 <= "XXXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_516, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_516 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_we0 <= ap_const_logic_1;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln236_fu_465_p2 <= (ap_const_lv1_1 xor and_ln236_fu_454_p2);

    y_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, ap_CS_fsm_state5, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln40_fu_405_p1, ap_CS_fsm_pp2_stage4, y_addr_1_reg_583, y_addr_1_reg_583_pp2_iter2_reg, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, zext_ln33_fu_328_p1, ap_block_pp2_stage4, zext_ln52_fu_511_p1, ap_block_pp2_stage3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            y_address0 <= zext_ln52_fu_511_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            y_address0 <= y_addr_1_reg_583_pp2_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            y_address0 <= y_addr_1_reg_583;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            y_address0 <= zext_ln40_fu_405_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_address0 <= zext_ln33_fu_328_p1(6 - 1 downto 0);
        else 
            y_address0 <= "XXXXXX";
        end if; 
    end process;


    y_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_state5, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, grp_fu_277_p2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, ap_block_pp2_stage3, select_ln238_17_fu_491_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            y_d0 <= select_ln238_17_fu_491_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            y_d0 <= grp_fu_277_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_d0 <= ap_const_lv32_0;
        else 
            y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln37_reg_533_pp2_iter1_reg, ap_enable_reg_pp2_iter1, icmp_ln38_1_reg_599_pp2_iter2_reg, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter3, icmp_ln31_fu_316_p2)
    begin
        if ((((icmp_ln37_reg_533_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((icmp_ln38_1_reg_599_pp2_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln31_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln28_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_210),64));
    zext_ln33_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(om_0_reg_222),64));
    zext_ln38_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_1_fu_365_p3),13));
    zext_ln40_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_fu_357_p3),64));
    zext_ln40_2_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_264_fu_382_p3),13));
    zext_ln40_3_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_394_p2),64));
    zext_ln40_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_1_reg_547),64));
    zext_ln52_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(om2_0_reg_266),64));
end behav;
