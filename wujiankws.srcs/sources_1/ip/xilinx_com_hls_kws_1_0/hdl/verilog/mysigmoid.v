// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mysigmoid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_var,
        ap_return
);

parameter    ap_ST_fsm_state1 = 146'd1;
parameter    ap_ST_fsm_state2 = 146'd2;
parameter    ap_ST_fsm_state3 = 146'd4;
parameter    ap_ST_fsm_state4 = 146'd8;
parameter    ap_ST_fsm_state5 = 146'd16;
parameter    ap_ST_fsm_state6 = 146'd32;
parameter    ap_ST_fsm_state7 = 146'd64;
parameter    ap_ST_fsm_state8 = 146'd128;
parameter    ap_ST_fsm_state9 = 146'd256;
parameter    ap_ST_fsm_state10 = 146'd512;
parameter    ap_ST_fsm_state11 = 146'd1024;
parameter    ap_ST_fsm_state12 = 146'd2048;
parameter    ap_ST_fsm_state13 = 146'd4096;
parameter    ap_ST_fsm_state14 = 146'd8192;
parameter    ap_ST_fsm_state15 = 146'd16384;
parameter    ap_ST_fsm_state16 = 146'd32768;
parameter    ap_ST_fsm_state17 = 146'd65536;
parameter    ap_ST_fsm_state18 = 146'd131072;
parameter    ap_ST_fsm_state19 = 146'd262144;
parameter    ap_ST_fsm_state20 = 146'd524288;
parameter    ap_ST_fsm_state21 = 146'd1048576;
parameter    ap_ST_fsm_state22 = 146'd2097152;
parameter    ap_ST_fsm_state23 = 146'd4194304;
parameter    ap_ST_fsm_state24 = 146'd8388608;
parameter    ap_ST_fsm_state25 = 146'd16777216;
parameter    ap_ST_fsm_state26 = 146'd33554432;
parameter    ap_ST_fsm_state27 = 146'd67108864;
parameter    ap_ST_fsm_state28 = 146'd134217728;
parameter    ap_ST_fsm_state29 = 146'd268435456;
parameter    ap_ST_fsm_state30 = 146'd536870912;
parameter    ap_ST_fsm_state31 = 146'd1073741824;
parameter    ap_ST_fsm_state32 = 146'd2147483648;
parameter    ap_ST_fsm_state33 = 146'd4294967296;
parameter    ap_ST_fsm_state34 = 146'd8589934592;
parameter    ap_ST_fsm_state35 = 146'd17179869184;
parameter    ap_ST_fsm_state36 = 146'd34359738368;
parameter    ap_ST_fsm_state37 = 146'd68719476736;
parameter    ap_ST_fsm_state38 = 146'd137438953472;
parameter    ap_ST_fsm_state39 = 146'd274877906944;
parameter    ap_ST_fsm_state40 = 146'd549755813888;
parameter    ap_ST_fsm_state41 = 146'd1099511627776;
parameter    ap_ST_fsm_state42 = 146'd2199023255552;
parameter    ap_ST_fsm_state43 = 146'd4398046511104;
parameter    ap_ST_fsm_state44 = 146'd8796093022208;
parameter    ap_ST_fsm_state45 = 146'd17592186044416;
parameter    ap_ST_fsm_state46 = 146'd35184372088832;
parameter    ap_ST_fsm_state47 = 146'd70368744177664;
parameter    ap_ST_fsm_state48 = 146'd140737488355328;
parameter    ap_ST_fsm_state49 = 146'd281474976710656;
parameter    ap_ST_fsm_state50 = 146'd562949953421312;
parameter    ap_ST_fsm_state51 = 146'd1125899906842624;
parameter    ap_ST_fsm_state52 = 146'd2251799813685248;
parameter    ap_ST_fsm_state53 = 146'd4503599627370496;
parameter    ap_ST_fsm_state54 = 146'd9007199254740992;
parameter    ap_ST_fsm_state55 = 146'd18014398509481984;
parameter    ap_ST_fsm_state56 = 146'd36028797018963968;
parameter    ap_ST_fsm_state57 = 146'd72057594037927936;
parameter    ap_ST_fsm_state58 = 146'd144115188075855872;
parameter    ap_ST_fsm_state59 = 146'd288230376151711744;
parameter    ap_ST_fsm_state60 = 146'd576460752303423488;
parameter    ap_ST_fsm_state61 = 146'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 146'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 146'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 146'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 146'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 146'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 146'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 146'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 146'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 146'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 146'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 146'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 146'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 146'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 146'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 146'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 146'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 146'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 146'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 146'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 146'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 146'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 146'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 146'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 146'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 146'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 146'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 146'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 146'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 146'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 146'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 146'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 146'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 146'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 146'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 146'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 146'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 146'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 146'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 146'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 146'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 146'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 146'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 146'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 146'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 146'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 146'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 146'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 146'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 146'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 146'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 146'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 146'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 146'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 146'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 146'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 146'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 146'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 146'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 146'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 146'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 146'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 146'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 146'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 146'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 146'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 146'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 146'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 146'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 146'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 146'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 146'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 146'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 146'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 146'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 146'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 146'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 146'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 146'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 146'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 146'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 146'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 146'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 146'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 146'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 146'd44601490397061246283071436545296723011960832;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_var;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [145:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_169_p2;
reg   [31:0] reg_223;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state133;
wire    ap_CS_fsm_state141;
wire   [0:0] or_ln95_fu_257_p2;
reg   [0:0] or_ln95_reg_453;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln95_fu_263_p2;
reg   [0:0] and_ln95_reg_473;
wire   [0:0] and_ln97_1_fu_274_p2;
reg   [0:0] and_ln97_1_reg_477;
wire    ap_CS_fsm_state3;
wire   [0:0] and_ln99_1_fu_285_p2;
reg   [0:0] and_ln99_1_reg_481;
wire    ap_CS_fsm_state4;
wire   [0:0] and_ln101_1_fu_296_p2;
reg   [0:0] and_ln101_1_reg_485;
wire    ap_CS_fsm_state5;
wire   [0:0] and_ln103_1_fu_307_p2;
reg   [0:0] and_ln103_1_reg_489;
wire    ap_CS_fsm_state6;
wire   [0:0] and_ln105_1_fu_318_p2;
reg   [0:0] and_ln105_1_reg_493;
wire    ap_CS_fsm_state7;
wire   [0:0] and_ln107_1_fu_329_p2;
reg   [0:0] and_ln107_1_reg_497;
wire    ap_CS_fsm_state8;
wire   [0:0] and_ln109_1_fu_340_p2;
reg   [0:0] and_ln109_1_reg_501;
wire    ap_CS_fsm_state9;
wire   [0:0] and_ln111_1_fu_351_p2;
reg   [0:0] and_ln111_1_reg_505;
wire    ap_CS_fsm_state10;
wire   [0:0] and_ln113_1_fu_362_p2;
reg   [0:0] and_ln113_1_reg_509;
wire    ap_CS_fsm_state11;
wire   [0:0] and_ln115_1_fu_373_p2;
reg   [0:0] and_ln115_1_reg_513;
wire    ap_CS_fsm_state12;
wire   [0:0] and_ln117_1_fu_384_p2;
reg   [0:0] and_ln117_1_reg_517;
wire    ap_CS_fsm_state13;
wire   [0:0] and_ln119_1_fu_395_p2;
reg   [0:0] and_ln119_1_reg_521;
wire    ap_CS_fsm_state14;
wire   [0:0] and_ln121_1_fu_406_p2;
reg   [0:0] and_ln121_1_reg_525;
wire    ap_CS_fsm_state15;
wire   [0:0] and_ln123_1_fu_417_p2;
reg   [0:0] and_ln123_1_reg_529;
wire    ap_CS_fsm_state16;
wire   [0:0] and_ln125_1_fu_428_p2;
reg   [0:0] and_ln125_1_reg_533;
wire    ap_CS_fsm_state17;
wire   [0:0] and_ln127_1_fu_439_p2;
reg   [0:0] and_ln127_1_reg_537;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_149_p2;
reg   [31:0] tmp_76_reg_541;
wire    ap_CS_fsm_state25;
reg   [31:0] tmp_74_reg_546;
wire    ap_CS_fsm_state33;
reg   [31:0] tmp_72_reg_551;
wire    ap_CS_fsm_state41;
reg   [31:0] tmp_70_reg_556;
wire    ap_CS_fsm_state49;
reg   [31:0] tmp_68_reg_561;
wire    ap_CS_fsm_state57;
reg   [31:0] tmp_66_reg_566;
wire    ap_CS_fsm_state65;
reg   [31:0] tmp_64_reg_571;
wire    ap_CS_fsm_state73;
reg   [31:0] tmp_62_reg_576;
wire    ap_CS_fsm_state81;
reg   [31:0] tmp_60_reg_581;
wire    ap_CS_fsm_state89;
reg   [31:0] tmp_58_reg_586;
wire    ap_CS_fsm_state97;
reg   [31:0] tmp_56_reg_591;
wire    ap_CS_fsm_state105;
reg   [31:0] tmp_54_reg_596;
wire    ap_CS_fsm_state113;
reg   [31:0] tmp_52_reg_601;
wire    ap_CS_fsm_state121;
reg   [31:0] tmp_50_reg_606;
wire    ap_CS_fsm_state129;
reg   [31:0] tmp_48_reg_611;
wire    ap_CS_fsm_state137;
reg   [31:0] tmp_46_reg_616;
wire    ap_CS_fsm_state145;
reg   [31:0] ap_phi_mux_p_0_phi_fu_109_p36;
reg   [31:0] p_0_reg_104;
wire    ap_CS_fsm_state146;
wire    ap_CS_fsm_state138;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state26;
reg   [31:0] grp_fu_149_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state142;
reg   [31:0] grp_fu_169_p1;
reg   [31:0] grp_fu_182_p1;
reg   [31:0] grp_fu_188_p1;
wire   [31:0] bitcast_ln95_fu_228_p1;
wire   [7:0] tmp_fu_231_p4;
wire   [22:0] trunc_ln95_fu_241_p1;
wire   [0:0] icmp_ln95_1_fu_251_p2;
wire   [0:0] icmp_ln95_fu_245_p2;
wire   [0:0] grp_fu_182_p2;
wire   [0:0] and_ln97_fu_269_p2;
wire   [0:0] grp_fu_188_p2;
wire   [0:0] and_ln99_fu_280_p2;
wire   [0:0] and_ln101_fu_291_p2;
wire   [0:0] and_ln103_fu_302_p2;
wire   [0:0] and_ln105_fu_313_p2;
wire   [0:0] and_ln107_fu_324_p2;
wire   [0:0] and_ln109_fu_335_p2;
wire   [0:0] and_ln111_fu_346_p2;
wire   [0:0] and_ln113_fu_357_p2;
wire   [0:0] and_ln115_fu_368_p2;
wire   [0:0] and_ln117_fu_379_p2;
wire   [0:0] and_ln119_fu_390_p2;
wire   [0:0] and_ln121_fu_401_p2;
wire   [0:0] and_ln123_fu_412_p2;
wire   [0:0] and_ln125_fu_423_p2;
wire   [0:0] and_ln127_fu_434_p2;
reg   [4:0] grp_fu_182_opcode;
reg   [31:0] ap_return_preg;
reg   [145:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 146'd1;
#0 ap_return_preg = 32'd0;
end

kws_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fadd_32ns_32nbkb_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_223),
    .din1(grp_fu_149_p1),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

kws_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fmul_32ns_32ncud_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_var),
    .din1(grp_fu_169_p1),
    .ce(1'b1),
    .dout(grp_fu_169_p2)
);

kws_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kws_fcmp_32ns_32neOg_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_var),
    .din1(grp_fu_182_p1),
    .ce(1'b1),
    .opcode(grp_fu_182_opcode),
    .dout(grp_fu_182_p2)
);

kws_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kws_fcmp_32ns_32neOg_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_var),
    .din1(grp_fu_188_p1),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_188_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_return_preg <= ap_phi_mux_p_0_phi_fu_109_p36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln127_1_fu_439_p2) & (1'b1 == ap_CS_fsm_state18))) begin
        p_0_reg_104 <= 32'd1065353216;
    end else if (((1'd1 == and_ln95_fu_263_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_reg_104 <= 32'd0;
    end else if (((1'd1 == and_ln127_1_reg_537) & (1'd0 == and_ln125_1_reg_533) & (1'd0 == and_ln123_1_reg_529) & (1'd0 == and_ln121_1_reg_525) & (1'd0 == and_ln119_1_reg_521) & (1'd0 == and_ln117_1_reg_517) & (1'd0 == and_ln115_1_reg_513) & (1'd0 == and_ln113_1_reg_509) & (1'd0 == and_ln111_1_reg_505) & (1'd0 == and_ln109_1_reg_501) & (1'd0 == and_ln107_1_reg_497) & (1'd0 == and_ln105_1_reg_493) & (1'd0 == and_ln103_1_reg_489) & (1'd0 == and_ln101_1_reg_485) & (1'd0 == and_ln99_1_reg_481) & (1'd0 == and_ln97_1_reg_477) & (1'd0 == and_ln95_reg_473) & (1'b1 == ap_CS_fsm_state26))) begin
        p_0_reg_104 <= tmp_76_reg_541;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        p_0_reg_104 <= tmp_74_reg_546;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        p_0_reg_104 <= tmp_72_reg_551;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        p_0_reg_104 <= tmp_70_reg_556;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        p_0_reg_104 <= tmp_68_reg_561;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        p_0_reg_104 <= tmp_66_reg_566;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        p_0_reg_104 <= tmp_64_reg_571;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        p_0_reg_104 <= tmp_62_reg_576;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        p_0_reg_104 <= tmp_60_reg_581;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        p_0_reg_104 <= tmp_58_reg_586;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        p_0_reg_104 <= tmp_56_reg_591;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        p_0_reg_104 <= tmp_54_reg_596;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        p_0_reg_104 <= tmp_52_reg_601;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        p_0_reg_104 <= tmp_50_reg_606;
    end else if ((1'b1 == ap_CS_fsm_state138)) begin
        p_0_reg_104 <= tmp_48_reg_611;
    end else if ((1'b1 == ap_CS_fsm_state146)) begin
        p_0_reg_104 <= tmp_46_reg_616;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        and_ln101_1_reg_485 <= and_ln101_1_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        and_ln103_1_reg_489 <= and_ln103_1_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        and_ln105_1_reg_493 <= and_ln105_1_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        and_ln107_1_reg_497 <= and_ln107_1_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        and_ln109_1_reg_501 <= and_ln109_1_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        and_ln111_1_reg_505 <= and_ln111_1_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        and_ln113_1_reg_509 <= and_ln113_1_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        and_ln115_1_reg_513 <= and_ln115_1_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        and_ln117_1_reg_517 <= and_ln117_1_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        and_ln119_1_reg_521 <= and_ln119_1_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        and_ln121_1_reg_525 <= and_ln121_1_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        and_ln123_1_reg_529 <= and_ln123_1_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        and_ln125_1_reg_533 <= and_ln125_1_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        and_ln127_1_reg_537 <= and_ln127_1_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln95_reg_473 <= and_ln95_fu_263_p2;
        or_ln95_reg_453 <= or_ln95_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        and_ln97_1_reg_477 <= and_ln97_1_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        and_ln99_1_reg_481 <= and_ln99_1_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_223 <= grp_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state145)) begin
        tmp_46_reg_616 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        tmp_48_reg_611 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        tmp_50_reg_606 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        tmp_52_reg_601 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        tmp_54_reg_596 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        tmp_56_reg_591 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        tmp_58_reg_586 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        tmp_60_reg_581 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        tmp_62_reg_576 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        tmp_64_reg_571 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        tmp_66_reg_566 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        tmp_68_reg_561 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_70_reg_556 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_72_reg_551 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_74_reg_546 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_76_reg_541 <= grp_fu_149_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln127_1_reg_537) & (1'd0 == and_ln125_1_reg_533) & (1'd0 == and_ln123_1_reg_529) & (1'd0 == and_ln121_1_reg_525) & (1'd0 == and_ln119_1_reg_521) & (1'd0 == and_ln117_1_reg_517) & (1'd0 == and_ln115_1_reg_513) & (1'd0 == and_ln113_1_reg_509) & (1'd0 == and_ln111_1_reg_505) & (1'd0 == and_ln109_1_reg_501) & (1'd0 == and_ln107_1_reg_497) & (1'd0 == and_ln105_1_reg_493) & (1'd0 == and_ln103_1_reg_489) & (1'd0 == and_ln101_1_reg_485) & (1'd0 == and_ln99_1_reg_481) & (1'd0 == and_ln97_1_reg_477) & (1'd0 == and_ln95_reg_473) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_phi_mux_p_0_phi_fu_109_p36 = tmp_76_reg_541;
    end else begin
        ap_phi_mux_p_0_phi_fu_109_p36 = p_0_reg_104;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_return = ap_phi_mux_p_0_phi_fu_109_p36;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        grp_fu_149_p1 = 32'd1000163666;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        grp_fu_149_p1 = 32'd1010699757;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        grp_fu_149_p1 = 32'd1021182162;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        grp_fu_149_p1 = 32'd1031530349;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        grp_fu_149_p1 = 32'd1040670576;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        grp_fu_149_p1 = 32'd1048784037;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        grp_fu_149_p1 = 32'd1053968197;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_fu_149_p1 = 32'd1056837101;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_149_p1 = 32'd1057028361;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_149_p1 = 32'd1058462813;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_149_p1 = 32'd1061054893;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_149_p1 = 32'd1063135268;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_149_p1 = 32'd1064321417;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_149_p1 = 32'd1064898553;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_149_p1 = 32'd1065158600;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_149_p1 = 32'd1065272685;
    end else begin
        grp_fu_149_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_169_p1 = 32'd974997842;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_169_p1 = 32'd1047408306;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_169_p1 = 32'd1041831559;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_169_p1 = 32'd1032953056;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_169_p1 = 32'd1022255904;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_169_p1 = 32'd1010162886;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_169_p1 = 32'd998875175;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_169_p1 = 32'd985963430;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_169_p1 = 32'd1002740646;
    end else begin
        grp_fu_169_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln125_1_fu_428_p2) & (1'b1 == ap_CS_fsm_state17)) | ((1'd0 == and_ln123_1_fu_417_p2) & (1'b1 == ap_CS_fsm_state16)) | ((1'd0 == and_ln121_1_fu_406_p2) & (1'b1 == ap_CS_fsm_state15)) | ((1'd0 == and_ln119_1_fu_395_p2) & (1'b1 == ap_CS_fsm_state14)) | ((1'd0 == and_ln117_1_fu_384_p2) & (1'b1 == ap_CS_fsm_state13)) | ((1'd0 == and_ln115_1_fu_373_p2) & (1'b1 == ap_CS_fsm_state12)) | ((1'd0 == and_ln113_1_fu_362_p2) & (1'b1 == ap_CS_fsm_state11)) | ((1'd0 == and_ln111_1_fu_351_p2) & (1'b1 == ap_CS_fsm_state10)) | ((1'd0 == and_ln109_1_fu_340_p2) & (1'b1 == ap_CS_fsm_state9)) | ((1'd0 == and_ln107_1_fu_329_p2) & (1'b1 == ap_CS_fsm_state8)) | ((1'd0 == and_ln105_1_fu_318_p2) & (1'b1 == ap_CS_fsm_state7)) | ((1'd0 == and_ln103_1_fu_307_p2) & (1'b1 == ap_CS_fsm_state6)) | ((1'd0 == and_ln101_1_fu_296_p2) & (1'b1 == ap_CS_fsm_state5)) | ((1'd0 == and_ln99_1_fu_285_p2) & (1'b1 == ap_CS_fsm_state4)) | ((1'd0 == and_ln97_1_fu_274_p2) & (1'b1 == ap_CS_fsm_state3)) | ((1'd0 == and_ln95_fu_263_p2) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_182_opcode = 5'd2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_fu_182_opcode = 5'd5;
    end else begin
        grp_fu_182_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_182_p1 = 32'd1088421888;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_182_p1 = 32'd1086324736;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_182_p1 = 32'd1084227584;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_182_p1 = 32'd1082130432;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_182_p1 = 32'd1077936128;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_182_p1 = 32'd1073741824;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_182_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_182_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_182_p1 = 32'd3212836864;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_182_p1 = 32'd3221225472;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_182_p1 = 32'd3225419776;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_182_p1 = 32'd3229614080;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_182_p1 = 32'd3231711232;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_182_p1 = 32'd3233808384;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_182_p1 = 32'd3235905536;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_182_p1 = 32'd3238002688;
    end else begin
        grp_fu_182_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_188_p1 = 32'd1090519040;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_188_p1 = 32'd1088421888;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_188_p1 = 32'd1086324736;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_188_p1 = 32'd1084227584;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_188_p1 = 32'd1082130432;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_188_p1 = 32'd1077936128;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_188_p1 = 32'd1073741824;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_188_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_188_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_188_p1 = 32'd3212836864;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_188_p1 = 32'd3221225472;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_188_p1 = 32'd3225419776;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_188_p1 = 32'd3229614080;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_188_p1 = 32'd3231711232;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_188_p1 = 32'd3233808384;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_188_p1 = 32'd3235905536;
    end else begin
        grp_fu_188_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'd1 == and_ln95_fu_263_p2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'd1 == and_ln97_1_fu_274_p2) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state139;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'd1 == and_ln99_1_fu_285_p2) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'd1 == and_ln101_1_fu_296_p2) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'd1 == and_ln103_1_fu_307_p2) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'd1 == and_ln105_1_fu_318_p2) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'd1 == and_ln107_1_fu_329_p2) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'd1 == and_ln109_1_fu_340_p2) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'd1 == and_ln111_1_fu_351_p2) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'd1 == and_ln113_1_fu_362_p2) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'd1 == and_ln115_1_fu_373_p2) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'd1 == and_ln117_1_fu_384_p2) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'd1 == and_ln119_1_fu_395_p2) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'd1 == and_ln121_1_fu_406_p2) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'd1 == and_ln123_1_fu_417_p2) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'd1 == and_ln125_1_fu_428_p2) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'd0 == and_ln127_1_fu_439_p2) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln101_1_fu_296_p2 = (grp_fu_188_p2 & and_ln101_fu_291_p2);

assign and_ln101_fu_291_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln103_1_fu_307_p2 = (grp_fu_188_p2 & and_ln103_fu_302_p2);

assign and_ln103_fu_302_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln105_1_fu_318_p2 = (grp_fu_188_p2 & and_ln105_fu_313_p2);

assign and_ln105_fu_313_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln107_1_fu_329_p2 = (grp_fu_188_p2 & and_ln107_fu_324_p2);

assign and_ln107_fu_324_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln109_1_fu_340_p2 = (grp_fu_188_p2 & and_ln109_fu_335_p2);

assign and_ln109_fu_335_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln111_1_fu_351_p2 = (grp_fu_188_p2 & and_ln111_fu_346_p2);

assign and_ln111_fu_346_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln113_1_fu_362_p2 = (grp_fu_188_p2 & and_ln113_fu_357_p2);

assign and_ln113_fu_357_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln115_1_fu_373_p2 = (grp_fu_188_p2 & and_ln115_fu_368_p2);

assign and_ln115_fu_368_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln117_1_fu_384_p2 = (grp_fu_188_p2 & and_ln117_fu_379_p2);

assign and_ln117_fu_379_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln119_1_fu_395_p2 = (grp_fu_188_p2 & and_ln119_fu_390_p2);

assign and_ln119_fu_390_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln121_1_fu_406_p2 = (grp_fu_188_p2 & and_ln121_fu_401_p2);

assign and_ln121_fu_401_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln123_1_fu_417_p2 = (grp_fu_188_p2 & and_ln123_fu_412_p2);

assign and_ln123_fu_412_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln125_1_fu_428_p2 = (grp_fu_188_p2 & and_ln125_fu_423_p2);

assign and_ln125_fu_423_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln127_1_fu_439_p2 = (grp_fu_188_p2 & and_ln127_fu_434_p2);

assign and_ln127_fu_434_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln95_fu_263_p2 = (or_ln95_fu_257_p2 & grp_fu_182_p2);

assign and_ln97_1_fu_274_p2 = (grp_fu_188_p2 & and_ln97_fu_269_p2);

assign and_ln97_fu_269_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign and_ln99_1_fu_285_p2 = (grp_fu_188_p2 & and_ln99_fu_280_p2);

assign and_ln99_fu_280_p2 = (or_ln95_reg_453 & grp_fu_182_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign bitcast_ln95_fu_228_p1 = in_var;

assign icmp_ln95_1_fu_251_p2 = ((trunc_ln95_fu_241_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_245_p2 = ((tmp_fu_231_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln95_fu_257_p2 = (icmp_ln95_fu_245_p2 | icmp_ln95_1_fu_251_p2);

assign tmp_fu_231_p4 = {{bitcast_ln95_fu_228_p1[30:23]}};

assign trunc_ln95_fu_241_p1 = bitcast_ln95_fu_228_p1[22:0];

endmodule //mysigmoid
