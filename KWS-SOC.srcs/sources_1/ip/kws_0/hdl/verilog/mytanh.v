// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mytanh (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_var,
        ap_return
);

parameter    ap_ST_fsm_state1 = 123'd1;
parameter    ap_ST_fsm_state2 = 123'd2;
parameter    ap_ST_fsm_state3 = 123'd4;
parameter    ap_ST_fsm_state4 = 123'd8;
parameter    ap_ST_fsm_state5 = 123'd16;
parameter    ap_ST_fsm_state6 = 123'd32;
parameter    ap_ST_fsm_state7 = 123'd64;
parameter    ap_ST_fsm_state8 = 123'd128;
parameter    ap_ST_fsm_state9 = 123'd256;
parameter    ap_ST_fsm_state10 = 123'd512;
parameter    ap_ST_fsm_state11 = 123'd1024;
parameter    ap_ST_fsm_state12 = 123'd2048;
parameter    ap_ST_fsm_state13 = 123'd4096;
parameter    ap_ST_fsm_state14 = 123'd8192;
parameter    ap_ST_fsm_state15 = 123'd16384;
parameter    ap_ST_fsm_state16 = 123'd32768;
parameter    ap_ST_fsm_state17 = 123'd65536;
parameter    ap_ST_fsm_state18 = 123'd131072;
parameter    ap_ST_fsm_state19 = 123'd262144;
parameter    ap_ST_fsm_state20 = 123'd524288;
parameter    ap_ST_fsm_state21 = 123'd1048576;
parameter    ap_ST_fsm_state22 = 123'd2097152;
parameter    ap_ST_fsm_state23 = 123'd4194304;
parameter    ap_ST_fsm_state24 = 123'd8388608;
parameter    ap_ST_fsm_state25 = 123'd16777216;
parameter    ap_ST_fsm_state26 = 123'd33554432;
parameter    ap_ST_fsm_state27 = 123'd67108864;
parameter    ap_ST_fsm_state28 = 123'd134217728;
parameter    ap_ST_fsm_state29 = 123'd268435456;
parameter    ap_ST_fsm_state30 = 123'd536870912;
parameter    ap_ST_fsm_state31 = 123'd1073741824;
parameter    ap_ST_fsm_state32 = 123'd2147483648;
parameter    ap_ST_fsm_state33 = 123'd4294967296;
parameter    ap_ST_fsm_state34 = 123'd8589934592;
parameter    ap_ST_fsm_state35 = 123'd17179869184;
parameter    ap_ST_fsm_state36 = 123'd34359738368;
parameter    ap_ST_fsm_state37 = 123'd68719476736;
parameter    ap_ST_fsm_state38 = 123'd137438953472;
parameter    ap_ST_fsm_state39 = 123'd274877906944;
parameter    ap_ST_fsm_state40 = 123'd549755813888;
parameter    ap_ST_fsm_state41 = 123'd1099511627776;
parameter    ap_ST_fsm_state42 = 123'd2199023255552;
parameter    ap_ST_fsm_state43 = 123'd4398046511104;
parameter    ap_ST_fsm_state44 = 123'd8796093022208;
parameter    ap_ST_fsm_state45 = 123'd17592186044416;
parameter    ap_ST_fsm_state46 = 123'd35184372088832;
parameter    ap_ST_fsm_state47 = 123'd70368744177664;
parameter    ap_ST_fsm_state48 = 123'd140737488355328;
parameter    ap_ST_fsm_state49 = 123'd281474976710656;
parameter    ap_ST_fsm_state50 = 123'd562949953421312;
parameter    ap_ST_fsm_state51 = 123'd1125899906842624;
parameter    ap_ST_fsm_state52 = 123'd2251799813685248;
parameter    ap_ST_fsm_state53 = 123'd4503599627370496;
parameter    ap_ST_fsm_state54 = 123'd9007199254740992;
parameter    ap_ST_fsm_state55 = 123'd18014398509481984;
parameter    ap_ST_fsm_state56 = 123'd36028797018963968;
parameter    ap_ST_fsm_state57 = 123'd72057594037927936;
parameter    ap_ST_fsm_state58 = 123'd144115188075855872;
parameter    ap_ST_fsm_state59 = 123'd288230376151711744;
parameter    ap_ST_fsm_state60 = 123'd576460752303423488;
parameter    ap_ST_fsm_state61 = 123'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 123'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 123'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 123'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 123'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 123'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 123'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 123'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 123'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 123'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 123'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 123'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 123'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 123'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 123'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 123'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 123'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 123'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 123'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 123'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 123'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 123'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 123'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 123'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 123'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 123'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 123'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 123'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 123'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 123'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 123'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 123'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 123'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 123'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 123'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 123'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 123'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 123'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 123'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 123'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 123'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 123'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 123'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 123'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 123'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 123'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 123'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 123'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 123'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 123'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 123'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 123'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 123'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 123'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 123'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 123'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 123'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 123'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 123'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 123'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 123'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 123'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 123'd5316911983139663491615228241121378304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_var;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return;

(* fsm_encoding = "none" *) reg   [122:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] grp_fu_127_p2;
reg   [15:0] reg_170;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state116;
wire   [15:0] grp_fu_111_p2;
reg   [15:0] tmp_22_reg_404;
wire    ap_CS_fsm_state11;
reg   [15:0] tmp_26_reg_412;
wire    ap_CS_fsm_state21;
reg   [15:0] tmp_30_reg_420;
wire    ap_CS_fsm_state31;
reg   [15:0] tmp_34_reg_428;
wire    ap_CS_fsm_state41;
reg   [15:0] tmp_36_reg_436;
wire    ap_CS_fsm_state51;
reg   [15:0] tmp_38_reg_444;
wire    ap_CS_fsm_state61;
reg   [15:0] tmp_40_reg_452;
wire    ap_CS_fsm_state71;
reg   [15:0] tmp_42_reg_460;
wire    ap_CS_fsm_state81;
reg   [15:0] tmp_44_reg_468;
wire    ap_CS_fsm_state91;
reg   [15:0] tmp_46_reg_476;
wire    ap_CS_fsm_state101;
reg   [15:0] tmp_48_reg_484;
wire    ap_CS_fsm_state111;
reg   [15:0] tmp_50_reg_492;
wire    ap_CS_fsm_state121;
reg   [15:0] p_0_reg_74;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state2;
wire   [0:0] grp_fu_137_p2;
wire    ap_CS_fsm_state113;
wire   [0:0] or_ln209_fu_385_p2;
reg   [15:0] grp_fu_111_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state117;
reg   [15:0] grp_fu_127_p1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state103;
reg   [15:0] grp_fu_137_p1;
reg   [15:0] grp_fu_143_p1;
wire   [0:0] grp_fu_143_p2;
wire   [0:0] xor_ln187_fu_175_p2;
wire   [0:0] xor_ln187_1_fu_181_p2;
wire   [0:0] xor_ln189_fu_193_p2;
wire   [0:0] xor_ln189_1_fu_199_p2;
wire   [0:0] xor_ln191_fu_211_p2;
wire   [0:0] xor_ln191_1_fu_217_p2;
wire   [0:0] xor_ln193_fu_229_p2;
wire   [0:0] xor_ln193_1_fu_235_p2;
wire   [0:0] xor_ln195_fu_247_p2;
wire   [0:0] xor_ln195_1_fu_253_p2;
wire   [0:0] xor_ln197_fu_265_p2;
wire   [0:0] xor_ln197_1_fu_271_p2;
wire   [0:0] xor_ln199_fu_283_p2;
wire   [0:0] xor_ln199_1_fu_289_p2;
wire   [0:0] xor_ln201_fu_301_p2;
wire   [0:0] xor_ln201_1_fu_307_p2;
wire   [0:0] xor_ln203_fu_319_p2;
wire   [0:0] xor_ln203_1_fu_325_p2;
wire   [0:0] xor_ln205_fu_337_p2;
wire   [0:0] xor_ln205_1_fu_343_p2;
wire   [0:0] xor_ln207_fu_355_p2;
wire   [0:0] xor_ln207_1_fu_361_p2;
wire   [0:0] xor_ln209_fu_373_p2;
wire   [0:0] xor_ln209_1_fu_379_p2;
reg   [4:0] grp_fu_137_opcode;
wire   [0:0] or_ln187_fu_187_p2;
wire   [0:0] or_ln189_fu_205_p2;
wire   [0:0] or_ln191_fu_223_p2;
wire   [0:0] or_ln193_fu_241_p2;
wire   [0:0] or_ln195_fu_259_p2;
wire   [0:0] or_ln197_fu_277_p2;
wire   [0:0] or_ln199_fu_295_p2;
wire   [0:0] or_ln201_fu_313_p2;
wire   [0:0] or_ln203_fu_331_p2;
wire   [0:0] or_ln205_fu_349_p2;
wire   [0:0] or_ln207_fu_367_p2;
reg   [15:0] ap_return_preg;
wire    ap_CS_fsm_state123;
reg   [122:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 123'd1;
#0 ap_return_preg = 16'd0;
end

kws_hadd_16ns_16ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
kws_hadd_16ns_16ncud_U98(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_170),
    .din1(grp_fu_111_p1),
    .ce(1'b1),
    .dout(grp_fu_111_p2)
);

kws_hmul_16ns_16ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
kws_hmul_16ns_16ndEe_U99(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_var),
    .din1(grp_fu_127_p1),
    .ce(1'b1),
    .dout(grp_fu_127_p2)
);

kws_hcmp_16ns_16neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 1 ))
kws_hcmp_16ns_16neOg_U100(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_var),
    .din1(grp_fu_137_p1),
    .ce(1'b1),
    .opcode(grp_fu_137_opcode),
    .dout(grp_fu_137_p2)
);

kws_hcmp_16ns_16neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 1 ))
kws_hcmp_16ns_16neOg_U101(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_var),
    .din1(grp_fu_143_p1),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_143_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state123)) begin
            ap_return_preg <= p_0_reg_74;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln209_fu_385_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state113))) begin
        p_0_reg_74 <= 16'd15360;
    end else if (((grp_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_reg_74 <= 16'd48128;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        p_0_reg_74 <= tmp_50_reg_492;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        p_0_reg_74 <= tmp_48_reg_484;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        p_0_reg_74 <= tmp_46_reg_476;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        p_0_reg_74 <= tmp_44_reg_468;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        p_0_reg_74 <= tmp_42_reg_460;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        p_0_reg_74 <= tmp_40_reg_452;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        p_0_reg_74 <= tmp_38_reg_444;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        p_0_reg_74 <= tmp_36_reg_436;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        p_0_reg_74 <= tmp_34_reg_428;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        p_0_reg_74 <= tmp_30_reg_420;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        p_0_reg_74 <= tmp_26_reg_412;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_0_reg_74 <= tmp_22_reg_404;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_170 <= grp_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_22_reg_404 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_26_reg_412 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_30_reg_420 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_34_reg_428 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tmp_36_reg_436 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        tmp_38_reg_444 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        tmp_40_reg_452 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        tmp_42_reg_460 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_44_reg_468 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_46_reg_476 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        tmp_48_reg_484 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        tmp_50_reg_492 <= grp_fu_111_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state123) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        ap_return = p_0_reg_74;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        grp_fu_111_p1 = 16'd15359;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        grp_fu_111_p1 = 16'd15354;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_111_p1 = 16'd15327;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        grp_fu_111_p1 = 16'd15178;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        grp_fu_111_p1 = 16'd14541;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_111_p1 = 16'd10772;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_111_p1 = 16'd43540;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_111_p1 = 16'd47309;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_111_p1 = 16'd47946;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_111_p1 = 16'd48095;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_111_p1 = 16'd48122;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_111_p1 = 16'd48127;
    end else begin
        grp_fu_111_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state53))) begin
        grp_fu_127_p1 = 16'd14892;
    end else if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state43))) begin
        grp_fu_127_p1 = 16'd12853;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_127_p1 = 16'd10112;
    end else if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_127_p1 = 16'd7193;
    end else if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_127_p1 = 16'd4121;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state113))) begin
        grp_fu_127_p1 = 16'd1678;
    end else begin
        grp_fu_127_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((or_ln207_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state103)) | ((or_ln205_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state93)) | ((or_ln203_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83)) | ((or_ln201_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73)) | ((or_ln199_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63)) | ((or_ln197_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53)) | ((or_ln195_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43)) | ((or_ln193_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33)) | ((or_ln191_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)) | ((or_ln189_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13)) | ((or_ln187_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((grp_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_137_opcode = 5'd2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_fu_137_opcode = 5'd5;
    end else begin
        grp_fu_137_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        grp_fu_137_p1 = 16'd17664;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_fu_137_p1 = 16'd17408;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_137_p1 = 16'd16896;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_137_p1 = 16'd16384;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_137_p1 = 16'd15360;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        grp_fu_137_p1 = 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_137_p1 = 16'd48128;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_137_p1 = 16'd49152;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_137_p1 = 16'd49664;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_137_p1 = 16'd50176;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_137_p1 = 16'd50432;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_137_p1 = 16'd50688;
    end else begin
        grp_fu_137_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        grp_fu_143_p1 = 16'd17920;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_fu_143_p1 = 16'd17664;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_143_p1 = 16'd17408;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_143_p1 = 16'd16896;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_143_p1 = 16'd16384;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        grp_fu_143_p1 = 16'd15360;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_143_p1 = 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_143_p1 = 16'd48128;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_143_p1 = 16'd49152;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_143_p1 = 16'd49664;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_143_p1 = 16'd50176;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_143_p1 = 16'd50432;
    end else begin
        grp_fu_143_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((or_ln187_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state13 : begin
            if (((or_ln189_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state23 : begin
            if (((or_ln191_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state33 : begin
            if (((or_ln193_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state43 : begin
            if (((or_ln195_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state53 : begin
            if (((or_ln197_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state63 : begin
            if (((or_ln199_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state73 : begin
            if (((or_ln201_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state83 : begin
            if (((or_ln203_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state93 : begin
            if (((or_ln205_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state103 : begin
            if (((or_ln207_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state103))) begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state113 : begin
            if (((or_ln209_fu_385_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state113))) begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign or_ln187_fu_187_p2 = (xor_ln187_fu_175_p2 | xor_ln187_1_fu_181_p2);

assign or_ln189_fu_205_p2 = (xor_ln189_fu_193_p2 | xor_ln189_1_fu_199_p2);

assign or_ln191_fu_223_p2 = (xor_ln191_fu_211_p2 | xor_ln191_1_fu_217_p2);

assign or_ln193_fu_241_p2 = (xor_ln193_fu_229_p2 | xor_ln193_1_fu_235_p2);

assign or_ln195_fu_259_p2 = (xor_ln195_fu_247_p2 | xor_ln195_1_fu_253_p2);

assign or_ln197_fu_277_p2 = (xor_ln197_fu_265_p2 | xor_ln197_1_fu_271_p2);

assign or_ln199_fu_295_p2 = (xor_ln199_fu_283_p2 | xor_ln199_1_fu_289_p2);

assign or_ln201_fu_313_p2 = (xor_ln201_fu_301_p2 | xor_ln201_1_fu_307_p2);

assign or_ln203_fu_331_p2 = (xor_ln203_fu_319_p2 | xor_ln203_1_fu_325_p2);

assign or_ln205_fu_349_p2 = (xor_ln205_fu_337_p2 | xor_ln205_1_fu_343_p2);

assign or_ln207_fu_367_p2 = (xor_ln207_fu_355_p2 | xor_ln207_1_fu_361_p2);

assign or_ln209_fu_385_p2 = (xor_ln209_fu_373_p2 | xor_ln209_1_fu_379_p2);

assign xor_ln187_1_fu_181_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln187_fu_175_p2 = (grp_fu_137_p2 ^ 1'd1);

assign xor_ln189_1_fu_199_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln189_fu_193_p2 = (grp_fu_137_p2 ^ 1'd1);

assign xor_ln191_1_fu_217_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln191_fu_211_p2 = (grp_fu_137_p2 ^ 1'd1);

assign xor_ln193_1_fu_235_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln193_fu_229_p2 = (grp_fu_137_p2 ^ 1'd1);

assign xor_ln195_1_fu_253_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln195_fu_247_p2 = (grp_fu_137_p2 ^ 1'd1);

assign xor_ln197_1_fu_271_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln197_fu_265_p2 = (grp_fu_137_p2 ^ 1'd1);

assign xor_ln199_1_fu_289_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln199_fu_283_p2 = (grp_fu_137_p2 ^ 1'd1);

assign xor_ln201_1_fu_307_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln201_fu_301_p2 = (grp_fu_137_p2 ^ 1'd1);

assign xor_ln203_1_fu_325_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln203_fu_319_p2 = (grp_fu_137_p2 ^ 1'd1);

assign xor_ln205_1_fu_343_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln205_fu_337_p2 = (grp_fu_137_p2 ^ 1'd1);

assign xor_ln207_1_fu_361_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln207_fu_355_p2 = (grp_fu_137_p2 ^ 1'd1);

assign xor_ln209_1_fu_379_p2 = (grp_fu_143_p2 ^ 1'd1);

assign xor_ln209_fu_373_p2 = (grp_fu_137_p2 ^ 1'd1);

endmodule //mytanh
