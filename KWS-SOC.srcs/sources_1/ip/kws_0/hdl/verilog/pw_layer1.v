// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pw_layer1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_V_dout,
        in_stream_V_empty_n,
        in_stream_V_read,
        out_stream_V_din,
        out_stream_V_full_n,
        out_stream_V_write,
        pw_weight1_address0,
        pw_weight1_ce0,
        pw_weight1_q0,
        bn_bias1_address0,
        bn_bias1_ce0,
        bn_bias1_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_pp0_stage0 = 9'd2;
parameter    ap_ST_fsm_state4 = 9'd4;
parameter    ap_ST_fsm_pp1_stage0 = 9'd8;
parameter    ap_ST_fsm_state7 = 9'd16;
parameter    ap_ST_fsm_pp2_stage0 = 9'd32;
parameter    ap_ST_fsm_state25 = 9'd64;
parameter    ap_ST_fsm_pp3_stage0 = 9'd128;
parameter    ap_ST_fsm_state31 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_stream_V_dout;
input   in_stream_V_empty_n;
output   in_stream_V_read;
output  [15:0] out_stream_V_din;
input   out_stream_V_full_n;
output   out_stream_V_write;
output  [3:0] pw_weight1_address0;
output   pw_weight1_ce0;
input  [15:0] pw_weight1_q0;
output  [3:0] bn_bias1_address0;
output   bn_bias1_ce0;
input  [15:0] bn_bias1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_read;
reg out_stream_V_write;
reg pw_weight1_ce0;
reg bn_bias1_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] x_address0;
reg    x_ce0;
reg    x_we0;
wire   [15:0] x_q0;
reg   [6:0] y_address0;
reg    y_ce0;
reg    y_we0;
wire   [15:0] y_q0;
reg   [6:0] y_address1;
reg    y_ce1;
reg    y_we1;
wire   [15:0] y_q1;
reg    in_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln25_reg_660;
reg    out_stream_V_blk_n;
reg    ap_enable_reg_pp3_iter4;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln48_reg_777;
reg   [0:0] icmp_ln48_reg_777_pp3_iter3_reg;
reg   [3:0] w_0_reg_204;
reg   [6:0] indvar_flatten_reg_216;
reg   [3:0] iw_0_reg_227;
reg   [3:0] om_0_reg_238;
reg   [6:0] indvar_flatten12_reg_249;
reg   [3:0] iw1_0_reg_260;
reg   [3:0] om2_0_reg_271;
reg   [6:0] indvar_flatten24_reg_282;
reg   [3:0] iw3_0_reg_293;
reg   [3:0] om4_0_reg_304;
reg   [15:0] reg_339;
reg    ap_enable_reg_pp2_iter5;
wire    ap_block_state8_pp2_stage0_iter0;
wire    ap_block_state9_pp2_stage0_iter1;
wire    ap_block_state10_pp2_stage0_iter2;
wire    ap_block_state11_pp2_stage0_iter3;
wire    ap_block_state12_pp2_stage0_iter4;
wire    ap_block_state13_pp2_stage0_iter5;
wire    ap_block_state14_pp2_stage0_iter6;
wire    ap_block_state15_pp2_stage0_iter7;
wire    ap_block_state16_pp2_stage0_iter8;
wire    ap_block_state17_pp2_stage0_iter9;
wire    ap_block_state18_pp2_stage0_iter10;
wire    ap_block_state19_pp2_stage0_iter11;
wire    ap_block_state20_pp2_stage0_iter12;
wire    ap_block_state21_pp2_stage0_iter13;
wire    ap_block_state22_pp2_stage0_iter14;
wire    ap_block_state23_pp2_stage0_iter15;
wire    ap_block_state24_pp2_stage0_iter16;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln41_reg_695;
reg   [0:0] icmp_ln41_reg_695_pp2_iter4_reg;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_state26_pp3_stage0_iter0;
wire    ap_block_state27_pp3_stage0_iter1;
wire    ap_block_state28_pp3_stage0_iter2;
wire    ap_block_state29_pp3_stage0_iter3;
reg    ap_block_state30_pp3_stage0_iter4;
reg    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln48_reg_777_pp3_iter1_reg;
wire   [0:0] icmp_ln25_fu_347_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] w_fu_353_p2;
reg   [3:0] w_reg_664;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln32_fu_364_p2;
reg   [0:0] icmp_ln32_reg_669;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [6:0] add_ln32_fu_370_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [3:0] select_ln36_fu_388_p3;
reg   [3:0] select_ln36_reg_678;
wire   [3:0] select_ln36_1_fu_396_p3;
reg   [3:0] select_ln36_1_reg_683;
wire   [3:0] om_fu_404_p2;
wire   [0:0] icmp_ln41_fu_448_p2;
wire    ap_CS_fsm_pp2_stage0;
reg   [0:0] icmp_ln41_reg_695_pp2_iter1_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter2_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter3_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter5_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter6_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter7_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter8_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter9_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter10_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter11_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter12_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter13_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter14_reg;
reg   [0:0] icmp_ln41_reg_695_pp2_iter15_reg;
wire   [6:0] add_ln41_fu_454_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [3:0] select_ln44_fu_472_p3;
reg   [3:0] select_ln44_reg_704;
wire   [3:0] select_ln44_2_fu_480_p3;
reg   [3:0] select_ln44_2_reg_709;
wire   [63:0] zext_ln44_1_fu_493_p1;
reg   [63:0] zext_ln44_1_reg_721;
reg   [63:0] zext_ln44_1_reg_721_pp2_iter1_reg;
reg   [63:0] zext_ln44_1_reg_721_pp2_iter2_reg;
reg   [63:0] zext_ln44_1_reg_721_pp2_iter3_reg;
reg   [63:0] zext_ln44_1_reg_721_pp2_iter4_reg;
reg   [63:0] zext_ln44_1_reg_721_pp2_iter5_reg;
reg   [63:0] zext_ln44_1_reg_721_pp2_iter6_reg;
reg   [63:0] zext_ln44_1_reg_721_pp2_iter7_reg;
reg   [63:0] zext_ln44_1_reg_721_pp2_iter8_reg;
wire   [3:0] om_1_fu_498_p2;
reg   [15:0] x_load_reg_736;
reg    ap_enable_reg_pp2_iter1;
reg   [6:0] y_addr_1_reg_741;
reg   [6:0] y_addr_1_reg_741_pp2_iter2_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter3_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter4_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter5_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter6_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter7_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter8_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter9_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter10_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter11_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter12_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter13_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter14_reg;
reg   [6:0] y_addr_1_reg_741_pp2_iter15_reg;
reg   [15:0] pw_weight1_load_reg_747;
wire   [15:0] grp_fu_323_p2;
reg   [15:0] tmp_s_reg_752;
wire   [15:0] grp_fu_315_p2;
reg   [15:0] tmp_16_reg_762;
reg   [15:0] bn_bias1_load_reg_767;
wire   [15:0] grp_fu_319_p2;
reg   [15:0] tmp_17_reg_772;
wire   [0:0] icmp_ln48_fu_542_p2;
wire    ap_CS_fsm_pp3_stage0;
reg   [0:0] icmp_ln48_reg_777_pp3_iter2_reg;
wire   [6:0] add_ln48_fu_548_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [3:0] select_ln51_fu_566_p3;
reg   [3:0] select_ln51_reg_786;
wire   [3:0] select_ln51_1_fu_574_p3;
reg   [3:0] select_ln51_1_reg_791;
wire   [3:0] om_2_fu_582_p2;
wire   [15:0] outprepare_fu_652_p3;
reg   [15:0] outprepare_reg_808;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state7;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state8;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter16;
wire    ap_CS_fsm_state25;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state26;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter3;
reg   [3:0] ap_phi_mux_w_0_phi_fu_208_p4;
reg   [3:0] ap_phi_mux_iw_0_phi_fu_231_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_iw1_0_phi_fu_264_p4;
wire    ap_block_pp2_stage0;
reg   [3:0] ap_phi_mux_iw3_0_phi_fu_297_p4;
wire   [63:0] zext_ln29_fu_359_p1;
wire  signed [63:0] sext_ln36_fu_443_p1;
wire   [63:0] zext_ln44_fu_488_p1;
wire   [63:0] zext_ln44_4_fu_537_p1;
wire  signed [63:0] sext_ln51_fu_621_p1;
reg    ap_block_pp3_stage0_01001;
wire   [0:0] icmp_ln33_fu_382_p2;
wire   [3:0] iw_fu_376_p2;
wire   [5:0] tmp_40_fu_417_p3;
wire   [7:0] tmp_39_fu_410_p3;
wire   [7:0] zext_ln36_fu_424_p1;
wire   [7:0] sub_ln36_fu_428_p2;
wire   [7:0] zext_ln36_1_fu_434_p1;
wire   [7:0] add_ln36_fu_437_p2;
wire   [0:0] icmp_ln42_fu_466_p2;
wire   [3:0] iw_1_fu_460_p2;
wire   [5:0] tmp_1_fu_511_p3;
wire   [7:0] p_shl_cast_fu_504_p3;
wire   [7:0] zext_ln44_2_fu_518_p1;
wire   [7:0] zext_ln44_3_fu_528_p1;
wire   [7:0] sub_ln44_fu_522_p2;
wire   [7:0] add_ln44_fu_531_p2;
wire   [0:0] icmp_ln49_fu_560_p2;
wire   [3:0] iw_2_fu_554_p2;
wire   [5:0] tmp_42_fu_595_p3;
wire   [7:0] tmp_41_fu_588_p3;
wire   [7:0] zext_ln51_fu_602_p1;
wire   [7:0] sub_ln51_fu_606_p2;
wire   [7:0] zext_ln51_1_fu_612_p1;
wire   [7:0] add_ln51_fu_615_p2;
wire   [0:0] grp_fu_327_p2;
wire   [0:0] grp_fu_333_p2;
wire   [0:0] xor_ln225_fu_626_p2;
wire   [0:0] and_ln227_fu_632_p2;
wire   [0:0] or_ln227_fu_646_p2;
wire   [15:0] select_ln227_fu_638_p3;
reg    grp_fu_327_ce;
reg    ap_block_pp3_stage0_00001;
reg    grp_fu_333_ce;
wire    ap_CS_fsm_state31;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
end

pw_layer1_x #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_address0),
    .ce0(x_ce0),
    .we0(x_we0),
    .d0(in_stream_V_dout),
    .q0(x_q0)
);

pw_layer1_y #(
    .DataWidth( 16 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
y_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_address0),
    .ce0(y_ce0),
    .we0(y_we0),
    .d0(16'd0),
    .q0(y_q0),
    .address1(y_address1),
    .ce1(y_ce1),
    .we1(y_we1),
    .d1(tmp_17_reg_772),
    .q1(y_q1)
);

kws_hadd_16ns_16ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
kws_hadd_16ns_16ncud_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_339),
    .din1(tmp_s_reg_752),
    .ce(1'b1),
    .dout(grp_fu_315_p2)
);

kws_hadd_16ns_16ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
kws_hadd_16ns_16ncud_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_16_reg_762),
    .din1(bn_bias1_load_reg_767),
    .ce(1'b1),
    .dout(grp_fu_319_p2)
);

kws_hmul_16ns_16ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
kws_hmul_16ns_16ndEe_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_load_reg_736),
    .din1(pw_weight1_load_reg_747),
    .ce(1'b1),
    .dout(grp_fu_323_p2)
);

kws_hcmp_16ns_16neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 1 ))
kws_hcmp_16ns_16neOg_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_q1),
    .din1(16'd0),
    .ce(grp_fu_327_ce),
    .opcode(5'd4),
    .dout(grp_fu_327_p2)
);

kws_hcmp_16ns_16neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 1 ))
kws_hcmp_16ns_16neOg_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_q1),
    .din1(16'd17920),
    .ce(grp_fu_333_ce),
    .opcode(5'd2),
    .dout(grp_fu_333_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state8)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter16 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state26)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp3_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten12_reg_249 <= 7'd0;
    end else if (((icmp_ln41_fu_448_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten12_reg_249 <= add_ln41_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        indvar_flatten24_reg_282 <= 7'd0;
    end else if (((icmp_ln48_fu_542_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        indvar_flatten24_reg_282 <= add_ln48_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_216 <= 7'd0;
    end else if (((icmp_ln32_fu_364_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten_reg_216 <= add_ln32_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        iw1_0_reg_260 <= 4'd0;
    end else if (((icmp_ln41_reg_695 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        iw1_0_reg_260 <= select_ln44_2_reg_709;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        iw3_0_reg_293 <= 4'd0;
    end else if (((icmp_ln48_reg_777 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        iw3_0_reg_293 <= select_ln51_1_reg_791;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        iw_0_reg_227 <= 4'd0;
    end else if (((icmp_ln32_reg_669 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        iw_0_reg_227 <= select_ln36_1_reg_683;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        om2_0_reg_271 <= 4'd0;
    end else if (((icmp_ln41_fu_448_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        om2_0_reg_271 <= om_1_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        om4_0_reg_304 <= 4'd0;
    end else if (((icmp_ln48_fu_542_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        om4_0_reg_304 <= om_2_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        om_0_reg_238 <= 4'd0;
    end else if (((icmp_ln32_fu_364_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        om_0_reg_238 <= om_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_reg_777_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        reg_339 <= y_q1;
    end else if (((icmp_ln41_reg_695_pp2_iter4_reg == 1'd0) & (ap_enable_reg_pp2_iter5 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        reg_339 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_660 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_0_reg_204 <= w_reg_664;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_0_reg_204 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_695_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        bn_bias1_load_reg_767 <= bn_bias1_q0;
        tmp_16_reg_762 <= grp_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln25_reg_660 <= icmp_ln25_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln32_reg_669 <= icmp_ln32_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln41_reg_695 <= icmp_ln41_fu_448_p2;
        icmp_ln41_reg_695_pp2_iter1_reg <= icmp_ln41_reg_695;
        zext_ln44_1_reg_721_pp2_iter1_reg[3 : 0] <= zext_ln44_1_reg_721[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln41_reg_695_pp2_iter10_reg <= icmp_ln41_reg_695_pp2_iter9_reg;
        icmp_ln41_reg_695_pp2_iter11_reg <= icmp_ln41_reg_695_pp2_iter10_reg;
        icmp_ln41_reg_695_pp2_iter12_reg <= icmp_ln41_reg_695_pp2_iter11_reg;
        icmp_ln41_reg_695_pp2_iter13_reg <= icmp_ln41_reg_695_pp2_iter12_reg;
        icmp_ln41_reg_695_pp2_iter14_reg <= icmp_ln41_reg_695_pp2_iter13_reg;
        icmp_ln41_reg_695_pp2_iter15_reg <= icmp_ln41_reg_695_pp2_iter14_reg;
        icmp_ln41_reg_695_pp2_iter2_reg <= icmp_ln41_reg_695_pp2_iter1_reg;
        icmp_ln41_reg_695_pp2_iter3_reg <= icmp_ln41_reg_695_pp2_iter2_reg;
        icmp_ln41_reg_695_pp2_iter4_reg <= icmp_ln41_reg_695_pp2_iter3_reg;
        icmp_ln41_reg_695_pp2_iter5_reg <= icmp_ln41_reg_695_pp2_iter4_reg;
        icmp_ln41_reg_695_pp2_iter6_reg <= icmp_ln41_reg_695_pp2_iter5_reg;
        icmp_ln41_reg_695_pp2_iter7_reg <= icmp_ln41_reg_695_pp2_iter6_reg;
        icmp_ln41_reg_695_pp2_iter8_reg <= icmp_ln41_reg_695_pp2_iter7_reg;
        icmp_ln41_reg_695_pp2_iter9_reg <= icmp_ln41_reg_695_pp2_iter8_reg;
        y_addr_1_reg_741_pp2_iter10_reg <= y_addr_1_reg_741_pp2_iter9_reg;
        y_addr_1_reg_741_pp2_iter11_reg <= y_addr_1_reg_741_pp2_iter10_reg;
        y_addr_1_reg_741_pp2_iter12_reg <= y_addr_1_reg_741_pp2_iter11_reg;
        y_addr_1_reg_741_pp2_iter13_reg <= y_addr_1_reg_741_pp2_iter12_reg;
        y_addr_1_reg_741_pp2_iter14_reg <= y_addr_1_reg_741_pp2_iter13_reg;
        y_addr_1_reg_741_pp2_iter15_reg <= y_addr_1_reg_741_pp2_iter14_reg;
        y_addr_1_reg_741_pp2_iter2_reg <= y_addr_1_reg_741;
        y_addr_1_reg_741_pp2_iter3_reg <= y_addr_1_reg_741_pp2_iter2_reg;
        y_addr_1_reg_741_pp2_iter4_reg <= y_addr_1_reg_741_pp2_iter3_reg;
        y_addr_1_reg_741_pp2_iter5_reg <= y_addr_1_reg_741_pp2_iter4_reg;
        y_addr_1_reg_741_pp2_iter6_reg <= y_addr_1_reg_741_pp2_iter5_reg;
        y_addr_1_reg_741_pp2_iter7_reg <= y_addr_1_reg_741_pp2_iter6_reg;
        y_addr_1_reg_741_pp2_iter8_reg <= y_addr_1_reg_741_pp2_iter7_reg;
        y_addr_1_reg_741_pp2_iter9_reg <= y_addr_1_reg_741_pp2_iter8_reg;
        zext_ln44_1_reg_721_pp2_iter2_reg[3 : 0] <= zext_ln44_1_reg_721_pp2_iter1_reg[3 : 0];
        zext_ln44_1_reg_721_pp2_iter3_reg[3 : 0] <= zext_ln44_1_reg_721_pp2_iter2_reg[3 : 0];
        zext_ln44_1_reg_721_pp2_iter4_reg[3 : 0] <= zext_ln44_1_reg_721_pp2_iter3_reg[3 : 0];
        zext_ln44_1_reg_721_pp2_iter5_reg[3 : 0] <= zext_ln44_1_reg_721_pp2_iter4_reg[3 : 0];
        zext_ln44_1_reg_721_pp2_iter6_reg[3 : 0] <= zext_ln44_1_reg_721_pp2_iter5_reg[3 : 0];
        zext_ln44_1_reg_721_pp2_iter7_reg[3 : 0] <= zext_ln44_1_reg_721_pp2_iter6_reg[3 : 0];
        zext_ln44_1_reg_721_pp2_iter8_reg[3 : 0] <= zext_ln44_1_reg_721_pp2_iter7_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln48_reg_777 <= icmp_ln48_fu_542_p2;
        icmp_ln48_reg_777_pp3_iter1_reg <= icmp_ln48_reg_777;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln48_reg_777_pp3_iter2_reg <= icmp_ln48_reg_777_pp3_iter1_reg;
        icmp_ln48_reg_777_pp3_iter3_reg <= icmp_ln48_reg_777_pp3_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_reg_777_pp3_iter2_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        outprepare_reg_808 <= outprepare_fu_652_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        pw_weight1_load_reg_747 <= pw_weight1_q0;
        y_addr_1_reg_741 <= zext_ln44_4_fu_537_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_364_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln36_1_reg_683 <= select_ln36_1_fu_396_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln36_reg_678 <= select_ln36_fu_388_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_448_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln44_2_reg_709 <= select_ln44_2_fu_480_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln44_reg_704 <= select_ln44_fu_472_p3;
        zext_ln44_1_reg_721[3 : 0] <= zext_ln44_1_fu_493_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_542_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        select_ln51_1_reg_791 <= select_ln51_1_fu_574_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_542_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        select_ln51_reg_786 <= select_ln51_fu_566_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_695_pp2_iter14_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_17_reg_772 <= grp_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_695_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_s_reg_752 <= grp_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_reg_664 <= w_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_695 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        x_load_reg_736 <= x_q0;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_347_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln32_fu_364_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_448_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln48_fu_542_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter16 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_695 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_iw1_0_phi_fu_264_p4 = select_ln44_2_reg_709;
    end else begin
        ap_phi_mux_iw1_0_phi_fu_264_p4 = iw1_0_reg_260;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (icmp_ln48_reg_777 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_iw3_0_phi_fu_297_p4 = select_ln51_1_reg_791;
    end else begin
        ap_phi_mux_iw3_0_phi_fu_297_p4 = iw3_0_reg_293;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_669 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_iw_0_phi_fu_231_p4 = select_ln36_1_reg_683;
    end else begin
        ap_phi_mux_iw_0_phi_fu_231_p4 = iw_0_reg_227;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_660 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_w_0_phi_fu_208_p4 = w_reg_664;
    end else begin
        ap_phi_mux_w_0_phi_fu_208_p4 = w_0_reg_204;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter9 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        bn_bias1_ce0 = 1'b1;
    end else begin
        bn_bias1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        grp_fu_327_ce = 1'b1;
    end else begin
        grp_fu_327_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        grp_fu_333_ce = 1'b1;
    end else begin
        grp_fu_333_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_660 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_V_blk_n = in_stream_V_empty_n;
    end else begin
        in_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_660 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_stream_V_read = 1'b1;
    end else begin
        in_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (icmp_ln48_reg_777_pp3_iter3_reg == 1'd0) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        out_stream_V_blk_n = out_stream_V_full_n;
    end else begin
        out_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_777_pp3_iter3_reg == 1'd0) & (ap_enable_reg_pp3_iter4 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        out_stream_V_write = 1'b1;
    end else begin
        out_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        pw_weight1_ce0 = 1'b1;
    end else begin
        pw_weight1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_address0 = zext_ln44_fu_488_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_address0 = zext_ln29_fu_359_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_660 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        y_address0 = y_addr_1_reg_741_pp2_iter3_reg;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        y_address0 = sext_ln36_fu_443_p1;
    end else begin
        y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        y_address1 = sext_ln51_fu_621_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter16 == 1'b1))) begin
        y_address1 = y_addr_1_reg_741_pp2_iter15_reg;
    end else begin
        y_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter16 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        y_ce1 = 1'b1;
    end else begin
        y_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_669 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        y_we0 = 1'b1;
    end else begin
        y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_695_pp2_iter15_reg == 1'd0) & (ap_enable_reg_pp2_iter16 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        y_we1 = 1'b1;
    end else begin
        y_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln25_fu_347_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln25_fu_347_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln32_fu_364_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln32_fu_364_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln41_fu_448_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter15 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter16 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter15 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter16 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln41_fu_448_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln48_fu_542_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((ap_enable_reg_pp3_iter3 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter3 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter4 == 1'b1)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln48_fu_542_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_370_p2 = (indvar_flatten_reg_216 + 7'd1);

assign add_ln36_fu_437_p2 = (sub_ln36_fu_428_p2 + zext_ln36_1_fu_434_p1);

assign add_ln41_fu_454_p2 = (indvar_flatten12_reg_249 + 7'd1);

assign add_ln44_fu_531_p2 = (zext_ln44_3_fu_528_p1 + sub_ln44_fu_522_p2);

assign add_ln48_fu_548_p2 = (indvar_flatten24_reg_282 + 7'd1);

assign add_ln51_fu_615_p2 = (sub_ln51_fu_606_p2 + zext_ln51_1_fu_612_p1);

assign and_ln227_fu_632_p2 = (xor_ln225_fu_626_p2 & grp_fu_333_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln25_reg_660 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln25_reg_660 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_00001 = ((icmp_ln48_reg_777_pp3_iter3_reg == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((icmp_ln48_reg_777_pp3_iter3_reg == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((icmp_ln48_reg_777_pp3_iter3_reg == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((icmp_ln48_reg_777_pp3_iter3_reg == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b1));
end

assign ap_block_state10_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_pp3_stage0_iter4 = ((icmp_ln48_reg_777_pp3_iter3_reg == 1'd0) & (out_stream_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln25_reg_660 == 1'd0) & (in_stream_V_empty_n == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign bn_bias1_address0 = zext_ln44_1_reg_721_pp2_iter8_reg;

assign icmp_ln25_fu_347_p2 = ((ap_phi_mux_w_0_phi_fu_208_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_364_p2 = ((indvar_flatten_reg_216 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_382_p2 = ((om_0_reg_238 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_448_p2 = ((indvar_flatten12_reg_249 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_466_p2 = ((om2_0_reg_271 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_542_p2 = ((indvar_flatten24_reg_282 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_560_p2 = ((om4_0_reg_304 == 4'd12) ? 1'b1 : 1'b0);

assign iw_1_fu_460_p2 = (ap_phi_mux_iw1_0_phi_fu_264_p4 + 4'd1);

assign iw_2_fu_554_p2 = (ap_phi_mux_iw3_0_phi_fu_297_p4 + 4'd1);

assign iw_fu_376_p2 = (ap_phi_mux_iw_0_phi_fu_231_p4 + 4'd1);

assign om_1_fu_498_p2 = (select_ln44_fu_472_p3 + 4'd1);

assign om_2_fu_582_p2 = (select_ln51_fu_566_p3 + 4'd1);

assign om_fu_404_p2 = (select_ln36_fu_388_p3 + 4'd1);

assign or_ln227_fu_646_p2 = (grp_fu_327_p2 | and_ln227_fu_632_p2);

assign out_stream_V_din = outprepare_reg_808;

assign outprepare_fu_652_p3 = ((or_ln227_fu_646_p2[0:0] === 1'b1) ? select_ln227_fu_638_p3 : reg_339);

assign p_shl_cast_fu_504_p3 = {{select_ln44_2_reg_709}, {4'd0}};

assign pw_weight1_address0 = zext_ln44_1_fu_493_p1;

assign select_ln227_fu_638_p3 = ((and_ln227_fu_632_p2[0:0] === 1'b1) ? 16'd17920 : 16'd0);

assign select_ln36_1_fu_396_p3 = ((icmp_ln33_fu_382_p2[0:0] === 1'b1) ? iw_fu_376_p2 : ap_phi_mux_iw_0_phi_fu_231_p4);

assign select_ln36_fu_388_p3 = ((icmp_ln33_fu_382_p2[0:0] === 1'b1) ? 4'd0 : om_0_reg_238);

assign select_ln44_2_fu_480_p3 = ((icmp_ln42_fu_466_p2[0:0] === 1'b1) ? iw_1_fu_460_p2 : ap_phi_mux_iw1_0_phi_fu_264_p4);

assign select_ln44_fu_472_p3 = ((icmp_ln42_fu_466_p2[0:0] === 1'b1) ? 4'd0 : om2_0_reg_271);

assign select_ln51_1_fu_574_p3 = ((icmp_ln49_fu_560_p2[0:0] === 1'b1) ? iw_2_fu_554_p2 : ap_phi_mux_iw3_0_phi_fu_297_p4);

assign select_ln51_fu_566_p3 = ((icmp_ln49_fu_560_p2[0:0] === 1'b1) ? 4'd0 : om4_0_reg_304);

assign sext_ln36_fu_443_p1 = $signed(add_ln36_fu_437_p2);

assign sext_ln51_fu_621_p1 = $signed(add_ln51_fu_615_p2);

assign sub_ln36_fu_428_p2 = (tmp_39_fu_410_p3 - zext_ln36_fu_424_p1);

assign sub_ln44_fu_522_p2 = (p_shl_cast_fu_504_p3 - zext_ln44_2_fu_518_p1);

assign sub_ln51_fu_606_p2 = (tmp_41_fu_588_p3 - zext_ln51_fu_602_p1);

assign tmp_1_fu_511_p3 = {{select_ln44_2_reg_709}, {2'd0}};

assign tmp_39_fu_410_p3 = {{select_ln36_1_reg_683}, {4'd0}};

assign tmp_40_fu_417_p3 = {{select_ln36_1_reg_683}, {2'd0}};

assign tmp_41_fu_588_p3 = {{select_ln51_1_reg_791}, {4'd0}};

assign tmp_42_fu_595_p3 = {{select_ln51_1_reg_791}, {2'd0}};

assign w_fu_353_p2 = (ap_phi_mux_w_0_phi_fu_208_p4 + 4'd1);

assign xor_ln225_fu_626_p2 = (grp_fu_327_p2 ^ 1'd1);

assign zext_ln29_fu_359_p1 = w_0_reg_204;

assign zext_ln36_1_fu_434_p1 = select_ln36_reg_678;

assign zext_ln36_fu_424_p1 = tmp_40_fu_417_p3;

assign zext_ln44_1_fu_493_p1 = select_ln44_fu_472_p3;

assign zext_ln44_2_fu_518_p1 = tmp_1_fu_511_p3;

assign zext_ln44_3_fu_528_p1 = select_ln44_reg_704;

assign zext_ln44_4_fu_537_p1 = add_ln44_fu_531_p2;

assign zext_ln44_fu_488_p1 = select_ln44_2_fu_480_p3;

assign zext_ln51_1_fu_612_p1 = select_ln51_reg_786;

assign zext_ln51_fu_602_p1 = tmp_42_fu_595_p3;

always @ (posedge ap_clk) begin
    zext_ln44_1_reg_721[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_1_reg_721_pp2_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_1_reg_721_pp2_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_1_reg_721_pp2_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_1_reg_721_pp2_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_1_reg_721_pp2_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_1_reg_721_pp2_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_1_reg_721_pp2_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_1_reg_721_pp2_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //pw_layer1
