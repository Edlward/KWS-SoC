// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fbank (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_0_address0,
        output_0_ce0,
        output_0_q0,
        output_0_address1,
        output_0_ce1,
        output_0_we1,
        output_0_d1,
        output_1_address0,
        output_1_ce0,
        output_1_q0,
        output_1_address1,
        output_1_ce1,
        output_1_we1,
        output_1_d1,
        output_2_address0,
        output_2_ce0,
        output_2_q0,
        output_2_address1,
        output_2_ce1,
        output_2_we1,
        output_2_d1,
        output_3_address0,
        output_3_ce0,
        output_3_q0,
        output_3_address1,
        output_3_ce1,
        output_3_we1,
        output_3_d1,
        spectrogram_3_address0,
        spectrogram_3_ce0,
        spectrogram_3_q0,
        spectrogram_0_address0,
        spectrogram_0_ce0,
        spectrogram_0_q0,
        spectrogram_1_address0,
        spectrogram_1_ce0,
        spectrogram_1_q0,
        spectrogram_2_address0,
        spectrogram_2_ce0,
        spectrogram_2_q0
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_pp1_stage0 = 43'd32;
parameter    ap_ST_fsm_state8 = 43'd64;
parameter    ap_ST_fsm_state9 = 43'd128;
parameter    ap_ST_fsm_state10 = 43'd256;
parameter    ap_ST_fsm_state11 = 43'd512;
parameter    ap_ST_fsm_state12 = 43'd1024;
parameter    ap_ST_fsm_state13 = 43'd2048;
parameter    ap_ST_fsm_state14 = 43'd4096;
parameter    ap_ST_fsm_state15 = 43'd8192;
parameter    ap_ST_fsm_state16 = 43'd16384;
parameter    ap_ST_fsm_state17 = 43'd32768;
parameter    ap_ST_fsm_state18 = 43'd65536;
parameter    ap_ST_fsm_state19 = 43'd131072;
parameter    ap_ST_fsm_state20 = 43'd262144;
parameter    ap_ST_fsm_state21 = 43'd524288;
parameter    ap_ST_fsm_state22 = 43'd1048576;
parameter    ap_ST_fsm_state23 = 43'd2097152;
parameter    ap_ST_fsm_state24 = 43'd4194304;
parameter    ap_ST_fsm_state25 = 43'd8388608;
parameter    ap_ST_fsm_state26 = 43'd16777216;
parameter    ap_ST_fsm_state27 = 43'd33554432;
parameter    ap_ST_fsm_state28 = 43'd67108864;
parameter    ap_ST_fsm_state29 = 43'd134217728;
parameter    ap_ST_fsm_state30 = 43'd268435456;
parameter    ap_ST_fsm_state31 = 43'd536870912;
parameter    ap_ST_fsm_state32 = 43'd1073741824;
parameter    ap_ST_fsm_state33 = 43'd2147483648;
parameter    ap_ST_fsm_state34 = 43'd4294967296;
parameter    ap_ST_fsm_state35 = 43'd8589934592;
parameter    ap_ST_fsm_state36 = 43'd17179869184;
parameter    ap_ST_fsm_state37 = 43'd34359738368;
parameter    ap_ST_fsm_state38 = 43'd68719476736;
parameter    ap_ST_fsm_state39 = 43'd137438953472;
parameter    ap_ST_fsm_state40 = 43'd274877906944;
parameter    ap_ST_fsm_state41 = 43'd549755813888;
parameter    ap_ST_fsm_state42 = 43'd1099511627776;
parameter    ap_ST_fsm_state43 = 43'd2199023255552;
parameter    ap_ST_fsm_state44 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] output_0_address0;
output   output_0_ce0;
input  [31:0] output_0_q0;
output  [8:0] output_0_address1;
output   output_0_ce1;
output   output_0_we1;
output  [31:0] output_0_d1;
output  [8:0] output_1_address0;
output   output_1_ce0;
input  [31:0] output_1_q0;
output  [8:0] output_1_address1;
output   output_1_ce1;
output   output_1_we1;
output  [31:0] output_1_d1;
output  [8:0] output_2_address0;
output   output_2_ce0;
input  [31:0] output_2_q0;
output  [8:0] output_2_address1;
output   output_2_ce1;
output   output_2_we1;
output  [31:0] output_2_d1;
output  [8:0] output_3_address0;
output   output_3_ce0;
input  [31:0] output_3_q0;
output  [8:0] output_3_address1;
output   output_3_ce1;
output   output_3_we1;
output  [31:0] output_3_d1;
output  [12:0] spectrogram_3_address0;
output   spectrogram_3_ce0;
input  [31:0] spectrogram_3_q0;
output  [12:0] spectrogram_0_address0;
output   spectrogram_0_ce0;
input  [31:0] spectrogram_0_q0;
output  [12:0] spectrogram_1_address0;
output   spectrogram_1_ce0;
input  [31:0] spectrogram_1_q0;
output  [12:0] spectrogram_2_address0;
output   spectrogram_2_ce0;
input  [31:0] spectrogram_2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] output_0_address0;
reg output_0_ce0;
reg[8:0] output_0_address1;
reg output_0_ce1;
reg output_0_we1;
reg[31:0] output_0_d1;
reg[8:0] output_1_address0;
reg output_1_ce0;
reg[8:0] output_1_address1;
reg output_1_ce1;
reg output_1_we1;
reg[31:0] output_1_d1;
reg[8:0] output_2_address0;
reg output_2_ce0;
reg[8:0] output_2_address1;
reg output_2_ce1;
reg output_2_we1;
reg[31:0] output_2_d1;
reg[8:0] output_3_address0;
reg output_3_ce0;
reg[8:0] output_3_address1;
reg output_3_ce1;
reg output_3_we1;
reg[31:0] output_3_d1;
reg spectrogram_3_ce0;
reg spectrogram_0_ce0;
reg spectrogram_1_ce0;
reg spectrogram_2_ce0;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] weights_address0;
reg    weights_ce0;
wire   [31:0] weights_q0;
wire   [9:0] band_mapper_address0;
reg    band_mapper_ce0;
wire   [6:0] band_mapper_q0;
reg   [10:0] indvar_flatten_reg_391;
reg   [5:0] i_3_reg_402;
reg   [5:0] j_0_reg_413;
wire   [31:0] grp_fu_448_p2;
reg   [31:0] reg_461;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state43;
wire   [5:0] i_fu_476_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_5_fu_488_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln67_fu_494_p2;
wire    ap_CS_fsm_state5;
wire   [9:0] i_7_fu_500_p2;
wire   [0:0] icmp_ln93_fu_506_p2;
reg   [0:0] icmp_ln93_reg_919;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [10:0] add_ln93_fu_512_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [5:0] select_ln97_1_fu_538_p3;
reg   [5:0] select_ln97_1_reg_928;
wire   [1:0] trunc_ln97_fu_546_p1;
reg   [1:0] trunc_ln97_reg_935;
reg   [3:0] tmp_reg_939;
wire   [5:0] j_fu_560_p2;
wire   [5:0] i_10_fu_617_p2;
reg   [5:0] i_10_reg_952;
wire    ap_CS_fsm_state9;
wire   [13:0] add_ln104_fu_639_p2;
reg   [13:0] add_ln104_reg_957;
wire   [0:0] icmp_ln100_fu_611_p2;
wire   [9:0] add_ln108_fu_669_p2;
reg   [9:0] add_ln108_reg_962;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln102_fu_675_p2;
wire   [31:0] select_ln104_2_fu_758_p3;
reg   [31:0] select_ln104_2_reg_991;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_456_p2;
reg   [31:0] spec_val_reg_1006;
wire    ap_CS_fsm_state23;
reg   [31:0] weights_load_reg_1012;
reg   [6:0] channel_reg_1017;
wire   [31:0] grp_fu_452_p2;
reg   [31:0] weighted_reg_1025;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln107_fu_778_p2;
reg   [0:0] icmp_ln107_reg_1030;
reg   [8:0] output_0_addr_1_reg_1034;
reg   [8:0] output_1_addr_1_reg_1040;
reg   [8:0] output_2_addr_1_reg_1046;
reg   [8:0] output_3_addr_1_reg_1052;
wire   [1:0] trunc_ln108_fu_810_p1;
reg   [1:0] trunc_ln108_reg_1058;
wire    ap_CS_fsm_state28;
wire   [31:0] tmp_36_fu_817_p6;
reg   [31:0] tmp_36_reg_1062;
reg   [31:0] tmp_32_reg_1067;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln110_fu_836_p2;
reg   [0:0] icmp_ln110_reg_1075;
wire    ap_CS_fsm_state34;
wire   [1:0] trunc_ln111_fu_842_p1;
reg   [1:0] trunc_ln111_reg_1079;
wire   [9:0] add_ln111_fu_859_p2;
reg   [9:0] add_ln111_reg_1084;
reg   [8:0] output_0_addr_2_reg_1089;
wire    ap_CS_fsm_state37;
reg   [8:0] output_1_addr_2_reg_1095;
reg   [8:0] output_2_addr_2_reg_1101;
reg   [8:0] output_3_addr_2_reg_1107;
wire   [31:0] tmp_37_fu_874_p6;
reg   [31:0] tmp_37_reg_1113;
wire   [8:0] j_3_fu_888_p2;
wire    ap_CS_fsm_state44;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
reg   [5:0] i_0_reg_358;
wire   [0:0] icmp_ln28_fu_470_p2;
reg   [9:0] i_1_reg_369;
wire   [0:0] icmp_ln48_fu_482_p2;
wire    ap_CS_fsm_state3;
reg   [9:0] i_2_reg_380;
reg   [5:0] ap_phi_mux_i_3_phi_fu_406_p4;
wire    ap_block_pp1_stage0;
reg   [5:0] i_4_reg_424;
wire    ap_CS_fsm_state8;
reg   [8:0] j_1_reg_436;
wire   [63:0] zext_ln97_3_fu_603_p1;
wire   [63:0] zext_ln104_3_fu_700_p1;
wire   [63:0] zext_ln104_4_fu_713_p1;
wire   [63:0] zext_ln107_fu_766_p1;
wire   [63:0] zext_ln108_3_fu_802_p1;
wire   [63:0] zext_ln111_1_fu_864_p1;
reg   [31:0] grp_fu_448_p0;
reg   [31:0] grp_fu_448_p1;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln95_fu_524_p2;
wire   [5:0] i_9_fu_518_p2;
wire   [5:0] select_ln97_fu_530_p3;
wire   [8:0] tmp_46_fu_566_p3;
wire   [6:0] tmp_49_fu_577_p3;
wire   [9:0] zext_ln97_fu_573_p1;
wire   [9:0] zext_ln97_1_fu_584_p1;
wire   [9:0] zext_ln97_2_fu_594_p1;
wire   [9:0] add_ln97_fu_588_p2;
wire   [9:0] add_ln97_1_fu_597_p2;
wire   [12:0] tmp_50_fu_627_p3;
wire   [13:0] zext_ln104_fu_623_p1;
wire   [13:0] zext_ln104_1_fu_635_p1;
wire   [8:0] tmp_51_fu_645_p3;
wire   [6:0] tmp_52_fu_657_p3;
wire   [9:0] zext_ln108_2_fu_665_p1;
wire   [9:0] zext_ln108_1_fu_653_p1;
wire   [6:0] lshr_ln7_fu_681_p4;
wire   [13:0] zext_ln104_2_fu_691_p1;
wire   [13:0] add_ln104_1_fu_695_p2;
wire   [12:0] tmp_53_fu_705_p3;
wire   [1:0] trunc_ln104_fu_720_p1;
wire   [0:0] icmp_ln104_fu_724_p2;
wire   [0:0] icmp_ln104_1_fu_738_p2;
wire   [31:0] select_ln104_fu_730_p3;
wire   [0:0] icmp_ln104_2_fu_752_p2;
wire   [31:0] select_ln104_1_fu_744_p3;
wire   [8:0] add_ln107_fu_772_p2;
wire   [4:0] tmp_87_fu_784_p4;
wire  signed [9:0] sext_ln108_fu_793_p1;
wire   [9:0] add_ln108_1_fu_797_p2;
wire   [15:0] tmp_36_fu_817_p5;
wire   [6:0] channel_1_fu_831_p2;
wire   [4:0] tmp_88_fu_845_p4;
wire  signed [9:0] sext_ln111_fu_855_p1;
wire   [15:0] tmp_37_fu_874_p5;
reg   [1:0] grp_fu_448_opcode;
reg   [42:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

fbank_weights #(
    .DataWidth( 32 ),
    .AddressRange( 513 ),
    .AddressWidth( 10 ))
weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_address0),
    .ce0(weights_ce0),
    .q0(weights_q0)
);

fbank_band_mapper #(
    .DataWidth( 7 ),
    .AddressRange( 513 ),
    .AddressWidth( 10 ))
band_mapper_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(band_mapper_address0),
    .ce0(band_mapper_ce0),
    .q0(band_mapper_q0)
);

preprocess_faddfscud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
preprocess_faddfscud_U93(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_448_p0),
    .din1(grp_fu_448_p1),
    .opcode(grp_fu_448_opcode),
    .ce(1'b1),
    .dout(grp_fu_448_p2)
);

preprocess_fmul_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
preprocess_fmul_3eOg_U94(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(spec_val_reg_1006),
    .din1(weights_load_reg_1012),
    .ce(1'b1),
    .dout(grp_fu_452_p2)
);

preprocess_fsqrt_Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
preprocess_fsqrt_Ee0_U95(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(select_ln104_2_reg_991),
    .ce(1'b1),
    .dout(grp_fu_456_p2)
);

preprocess_mux_41g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
preprocess_mux_41g8j_U96(
    .din0(output_0_q0),
    .din1(output_1_q0),
    .din2(output_2_q0),
    .din3(output_3_q0),
    .din4(tmp_36_fu_817_p5),
    .dout(tmp_36_fu_817_p6)
);

preprocess_mux_41g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
preprocess_mux_41g8j_U97(
    .din0(output_1_q0),
    .din1(output_2_q0),
    .din2(output_3_q0),
    .din3(output_0_q0),
    .din4(tmp_37_fu_874_p5),
    .dout(tmp_37_fu_874_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln67_fu_494_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln67_fu_494_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_470_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_358 <= i_fu_476_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_358 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_369 <= 10'd0;
    end else if (((icmp_ln48_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_369 <= i_5_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_2_reg_380 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln67_fu_494_p2 == 1'd0))) begin
        i_2_reg_380 <= i_7_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln67_fu_494_p2 == 1'd1))) begin
        i_3_reg_402 <= 6'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_reg_919 == 1'd0))) begin
        i_3_reg_402 <= select_ln97_1_reg_928;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_4_reg_424 <= 6'd0;
    end else if (((icmp_ln102_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_4_reg_424 <= i_10_reg_952;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln67_fu_494_p2 == 1'd1))) begin
        indvar_flatten_reg_391 <= 11'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_fu_506_p2 == 1'd0))) begin
        indvar_flatten_reg_391 <= add_ln93_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln67_fu_494_p2 == 1'd1))) begin
        j_0_reg_413 <= 6'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_fu_506_p2 == 1'd0))) begin
        j_0_reg_413 <= j_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j_1_reg_436 <= j_3_fu_888_p2;
    end else if (((icmp_ln100_fu_611_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        j_1_reg_436 <= 9'd2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_611_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln104_reg_957 <= add_ln104_fu_639_p2;
        add_ln108_reg_962[9 : 1] <= add_ln108_fu_669_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        add_ln111_reg_1084 <= add_ln111_fu_859_p2;
        trunc_ln111_reg_1079 <= trunc_ln111_fu_842_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        channel_reg_1017 <= band_mapper_q0;
        spec_val_reg_1006 <= grp_fu_456_p2;
        weights_load_reg_1012 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_10_reg_952 <= i_10_fu_617_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        icmp_ln107_reg_1030 <= icmp_ln107_fu_778_p2;
        weighted_reg_1025 <= grp_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        icmp_ln110_reg_1075 <= icmp_ln110_fu_836_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln93_reg_919 <= icmp_ln93_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_778_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        output_0_addr_1_reg_1034 <= zext_ln108_3_fu_802_p1;
        output_1_addr_1_reg_1040 <= zext_ln108_3_fu_802_p1;
        output_2_addr_1_reg_1046 <= zext_ln108_3_fu_802_p1;
        output_3_addr_1_reg_1052 <= zext_ln108_3_fu_802_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        output_0_addr_2_reg_1089 <= zext_ln111_1_fu_864_p1;
        output_1_addr_2_reg_1095 <= zext_ln111_1_fu_864_p1;
        output_2_addr_2_reg_1101 <= zext_ln111_1_fu_864_p1;
        output_3_addr_2_reg_1107 <= zext_ln111_1_fu_864_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state38))) begin
        reg_461 <= grp_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        select_ln104_2_reg_991 <= select_ln104_2_fu_758_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_fu_506_p2 == 1'd0))) begin
        select_ln97_1_reg_928 <= select_ln97_1_fu_538_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_32_reg_1067 <= grp_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_36_reg_1062 <= tmp_36_fu_817_p6;
        trunc_ln108_reg_1058 <= trunc_ln108_fu_810_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_37_reg_1113 <= tmp_37_fu_874_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_fu_506_p2 == 1'd0))) begin
        tmp_reg_939 <= {{select_ln97_fu_530_p3[5:2]}};
        trunc_ln97_reg_935 <= trunc_ln97_fu_546_p1;
    end
end

always @ (*) begin
    if ((icmp_ln93_fu_506_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln100_fu_611_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln93_reg_919 == 1'd0))) begin
        ap_phi_mux_i_3_phi_fu_406_p4 = select_ln97_1_reg_928;
    end else begin
        ap_phi_mux_i_3_phi_fu_406_p4 = i_3_reg_402;
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_611_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        band_mapper_ce0 = 1'b1;
    end else begin
        band_mapper_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln110_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        grp_fu_448_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_448_opcode = 2'd0;
    end else begin
        grp_fu_448_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_448_p0 = tmp_37_reg_1113;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_448_p0 = spec_val_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_448_p0 = tmp_36_reg_1062;
    end else begin
        grp_fu_448_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_448_p1 = reg_461;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_fu_448_p1 = weighted_reg_1025;
    end else begin
        grp_fu_448_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        output_0_address0 = zext_ln111_1_fu_864_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        output_0_address0 = zext_ln108_3_fu_802_p1;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        output_0_address1 = output_0_addr_2_reg_1089;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        output_0_address1 = output_0_addr_1_reg_1034;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_0_address1 = zext_ln97_3_fu_603_p1;
    end else begin
        output_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state27))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state34) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_0_ce1 = 1'b1;
    end else begin
        output_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        output_0_d1 = reg_461;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        output_0_d1 = tmp_32_reg_1067;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_0_d1 = 32'd0;
    end else begin
        output_0_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln111_reg_1079 == 2'd3) & (icmp_ln110_reg_1075 == 1'd1) & (1'b1 == ap_CS_fsm_state44)) | ((trunc_ln108_reg_1058 == 2'd0) & (icmp_ln107_reg_1030 == 1'd1) & (1'b1 == ap_CS_fsm_state34)) | ((trunc_ln97_reg_935 == 2'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_0_we1 = 1'b1;
    end else begin
        output_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        output_1_address0 = zext_ln111_1_fu_864_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        output_1_address0 = zext_ln108_3_fu_802_p1;
    end else begin
        output_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        output_1_address1 = output_1_addr_2_reg_1095;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        output_1_address1 = output_1_addr_1_reg_1040;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_1_address1 = zext_ln97_3_fu_603_p1;
    end else begin
        output_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state27))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state34) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_1_ce1 = 1'b1;
    end else begin
        output_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        output_1_d1 = reg_461;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        output_1_d1 = tmp_32_reg_1067;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_1_d1 = 32'd0;
    end else begin
        output_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln111_reg_1079 == 2'd0) & (icmp_ln110_reg_1075 == 1'd1) & (1'b1 == ap_CS_fsm_state44)) | ((trunc_ln108_reg_1058 == 2'd1) & (icmp_ln107_reg_1030 == 1'd1) & (1'b1 == ap_CS_fsm_state34)) | ((trunc_ln97_reg_935 == 2'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_1_we1 = 1'b1;
    end else begin
        output_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        output_2_address0 = zext_ln111_1_fu_864_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        output_2_address0 = zext_ln108_3_fu_802_p1;
    end else begin
        output_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        output_2_address1 = output_2_addr_2_reg_1101;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        output_2_address1 = output_2_addr_1_reg_1046;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_2_address1 = zext_ln97_3_fu_603_p1;
    end else begin
        output_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state27))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state34) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_2_ce1 = 1'b1;
    end else begin
        output_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        output_2_d1 = reg_461;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        output_2_d1 = tmp_32_reg_1067;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_2_d1 = 32'd0;
    end else begin
        output_2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln111_reg_1079 == 2'd1) & (icmp_ln110_reg_1075 == 1'd1) & (1'b1 == ap_CS_fsm_state44)) | ((trunc_ln108_reg_1058 == 2'd2) & (icmp_ln107_reg_1030 == 1'd1) & (1'b1 == ap_CS_fsm_state34)) | ((trunc_ln97_reg_935 == 2'd2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_2_we1 = 1'b1;
    end else begin
        output_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        output_3_address0 = zext_ln111_1_fu_864_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        output_3_address0 = zext_ln108_3_fu_802_p1;
    end else begin
        output_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        output_3_address1 = output_3_addr_2_reg_1107;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        output_3_address1 = output_3_addr_1_reg_1052;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_3_address1 = zext_ln97_3_fu_603_p1;
    end else begin
        output_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state27))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state34) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_3_ce1 = 1'b1;
    end else begin
        output_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        output_3_d1 = reg_461;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        output_3_d1 = tmp_32_reg_1067;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_3_d1 = 32'd0;
    end else begin
        output_3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((trunc_ln111_reg_1079 == 2'd2) & (icmp_ln110_reg_1075 == 1'd1) & (1'b1 == ap_CS_fsm_state44)) | ((trunc_ln108_reg_1058 == 2'd3) & (icmp_ln107_reg_1030 == 1'd1) & (1'b1 == ap_CS_fsm_state34)) | ((trunc_ln97_reg_935 == 2'd3) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_3_we1 = 1'b1;
    end else begin
        output_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        spectrogram_0_ce0 = 1'b1;
    end else begin
        spectrogram_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        spectrogram_1_ce0 = 1'b1;
    end else begin
        spectrogram_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        spectrogram_2_ce0 = 1'b1;
    end else begin
        spectrogram_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        spectrogram_3_ce0 = 1'b1;
    end else begin
        spectrogram_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln28_fu_470_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln48_fu_482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln67_fu_494_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln93_fu_506_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln93_fu_506_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln100_fu_611_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln102_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln107_fu_778_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((icmp_ln110_fu_836_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln104_1_fu_695_p2 = (add_ln104_reg_957 + zext_ln104_2_fu_691_p1);

assign add_ln104_fu_639_p2 = (zext_ln104_fu_623_p1 + zext_ln104_1_fu_635_p1);

assign add_ln107_fu_772_p2 = ($signed(9'd508) + $signed(j_1_reg_436));

assign add_ln108_1_fu_797_p2 = ($signed(sext_ln108_fu_793_p1) + $signed(add_ln108_reg_962));

assign add_ln108_fu_669_p2 = (zext_ln108_2_fu_665_p1 + zext_ln108_1_fu_653_p1);

assign add_ln111_fu_859_p2 = ($signed(sext_ln111_fu_855_p1) + $signed(add_ln108_reg_962));

assign add_ln93_fu_512_p2 = (indvar_flatten_reg_391 + 11'd1);

assign add_ln97_1_fu_597_p2 = (zext_ln97_2_fu_594_p1 + add_ln97_fu_588_p2);

assign add_ln97_fu_588_p2 = (zext_ln97_fu_573_p1 + zext_ln97_1_fu_584_p1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign band_mapper_address0 = zext_ln107_fu_766_p1;

assign channel_1_fu_831_p2 = (channel_reg_1017 + 7'd1);

assign i_10_fu_617_p2 = (i_4_reg_424 + 6'd1);

assign i_5_fu_488_p2 = (i_1_reg_369 + 10'd1);

assign i_7_fu_500_p2 = (i_2_reg_380 + 10'd1);

assign i_9_fu_518_p2 = (6'd1 + ap_phi_mux_i_3_phi_fu_406_p4);

assign i_fu_476_p2 = (i_0_reg_358 + 6'd1);

assign icmp_ln100_fu_611_p2 = ((i_4_reg_424 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_675_p2 = ((j_1_reg_436 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln104_1_fu_738_p2 = ((trunc_ln104_fu_720_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln104_2_fu_752_p2 = ((trunc_ln104_fu_720_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_724_p2 = ((trunc_ln104_fu_720_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_778_p2 = ((add_ln107_fu_772_p2 < 9'd253) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_836_p2 = (($signed(channel_1_fu_831_p2) < $signed(7'd40)) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_470_p2 = ((i_0_reg_358 == 6'd41) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_482_p2 = ((i_1_reg_369 == 10'd513) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_494_p2 = ((i_2_reg_380 == 10'd513) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_506_p2 = ((indvar_flatten_reg_391 == 11'd1960) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_524_p2 = ((j_0_reg_413 == 6'd40) ? 1'b1 : 1'b0);

assign j_3_fu_888_p2 = (j_1_reg_436 + 9'd1);

assign j_fu_560_p2 = (select_ln97_fu_530_p3 + 6'd1);

assign lshr_ln7_fu_681_p4 = {{j_1_reg_436[8:2]}};

assign select_ln104_1_fu_744_p3 = ((icmp_ln104_1_fu_738_p2[0:0] === 1'b1) ? spectrogram_1_q0 : select_ln104_fu_730_p3);

assign select_ln104_2_fu_758_p3 = ((icmp_ln104_2_fu_752_p2[0:0] === 1'b1) ? spectrogram_2_q0 : select_ln104_1_fu_744_p3);

assign select_ln104_fu_730_p3 = ((icmp_ln104_fu_724_p2[0:0] === 1'b1) ? spectrogram_0_q0 : spectrogram_3_q0);

assign select_ln97_1_fu_538_p3 = ((icmp_ln95_fu_524_p2[0:0] === 1'b1) ? i_9_fu_518_p2 : ap_phi_mux_i_3_phi_fu_406_p4);

assign select_ln97_fu_530_p3 = ((icmp_ln95_fu_524_p2[0:0] === 1'b1) ? 6'd0 : j_0_reg_413);

assign sext_ln108_fu_793_p1 = $signed(tmp_87_fu_784_p4);

assign sext_ln111_fu_855_p1 = $signed(tmp_88_fu_845_p4);

assign spectrogram_0_address0 = zext_ln104_3_fu_700_p1;

assign spectrogram_1_address0 = zext_ln104_4_fu_713_p1;

assign spectrogram_2_address0 = zext_ln104_4_fu_713_p1;

assign spectrogram_3_address0 = zext_ln104_4_fu_713_p1;

assign tmp_36_fu_817_p5 = trunc_ln108_fu_810_p1;

assign tmp_37_fu_874_p5 = trunc_ln111_reg_1079;

assign tmp_46_fu_566_p3 = {{select_ln97_1_reg_928}, {3'd0}};

assign tmp_49_fu_577_p3 = {{select_ln97_1_reg_928}, {1'd0}};

assign tmp_50_fu_627_p3 = {{i_4_reg_424}, {7'd0}};

assign tmp_51_fu_645_p3 = {{i_4_reg_424}, {3'd0}};

assign tmp_52_fu_657_p3 = {{i_4_reg_424}, {1'd0}};

assign tmp_53_fu_705_p3 = {{i_4_reg_424}, {lshr_ln7_fu_681_p4}};

assign tmp_87_fu_784_p4 = {{channel_reg_1017[6:2]}};

assign tmp_88_fu_845_p4 = {{channel_1_fu_831_p2[6:2]}};

assign trunc_ln104_fu_720_p1 = j_1_reg_436[1:0];

assign trunc_ln108_fu_810_p1 = channel_reg_1017[1:0];

assign trunc_ln111_fu_842_p1 = channel_reg_1017[1:0];

assign trunc_ln97_fu_546_p1 = select_ln97_fu_530_p3[1:0];

assign weights_address0 = zext_ln107_fu_766_p1;

assign zext_ln104_1_fu_635_p1 = tmp_50_fu_627_p3;

assign zext_ln104_2_fu_691_p1 = lshr_ln7_fu_681_p4;

assign zext_ln104_3_fu_700_p1 = add_ln104_1_fu_695_p2;

assign zext_ln104_4_fu_713_p1 = tmp_53_fu_705_p3;

assign zext_ln104_fu_623_p1 = i_4_reg_424;

assign zext_ln107_fu_766_p1 = j_1_reg_436;

assign zext_ln108_1_fu_653_p1 = tmp_51_fu_645_p3;

assign zext_ln108_2_fu_665_p1 = tmp_52_fu_657_p3;

assign zext_ln108_3_fu_802_p1 = add_ln108_1_fu_797_p2;

assign zext_ln111_1_fu_864_p1 = add_ln111_reg_1084;

assign zext_ln97_1_fu_584_p1 = tmp_49_fu_577_p3;

assign zext_ln97_2_fu_594_p1 = tmp_reg_939;

assign zext_ln97_3_fu_603_p1 = add_ln97_1_fu_597_p2;

assign zext_ln97_fu_573_p1 = tmp_46_fu_566_p3;

always @ (posedge ap_clk) begin
    add_ln108_reg_962[0] <= 1'b0;
end

endmodule //fbank
