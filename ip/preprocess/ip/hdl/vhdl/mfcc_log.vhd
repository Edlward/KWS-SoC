-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mfcc_log is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fbank_out_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fbank_out_0_ce0 : OUT STD_LOGIC;
    fbank_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fbank_out_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fbank_out_0_ce1 : OUT STD_LOGIC;
    fbank_out_0_we1 : OUT STD_LOGIC;
    fbank_out_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fbank_out_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fbank_out_1_ce0 : OUT STD_LOGIC;
    fbank_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fbank_out_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fbank_out_1_ce1 : OUT STD_LOGIC;
    fbank_out_1_we1 : OUT STD_LOGIC;
    fbank_out_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fbank_out_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fbank_out_2_ce0 : OUT STD_LOGIC;
    fbank_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fbank_out_2_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fbank_out_2_ce1 : OUT STD_LOGIC;
    fbank_out_2_we1 : OUT STD_LOGIC;
    fbank_out_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fbank_out_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fbank_out_3_ce0 : OUT STD_LOGIC;
    fbank_out_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fbank_out_3_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fbank_out_3_ce1 : OUT STD_LOGIC;
    fbank_out_3_we1 : OUT STD_LOGIC;
    fbank_out_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mfcc_log is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv64_3D719799812DEA11 : STD_LOGIC_VECTOR (63 downto 0) := "0011110101110001100101111001100110000001001011011110101000010001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3D71979980000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011110101110001100101111001100110000000000000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_196_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_344 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln131_fu_226_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln131_reg_349 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln127_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_238_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_357 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln131_fu_244_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln131_reg_362 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln129_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fbank_out_0_addr_reg_367 : STD_LOGIC_VECTOR (8 downto 0);
    signal fbank_out_1_addr_reg_373 : STD_LOGIC_VECTOR (8 downto 0);
    signal fbank_out_2_addr_reg_379 : STD_LOGIC_VECTOR (8 downto 0);
    signal fbank_out_3_addr_reg_385 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_fu_278_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_396 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln134_fu_334_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln134_reg_403 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_408 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal i_0_reg_148 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_159 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal zext_ln131_4_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_2_fu_202_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_214_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln131_2_fu_222_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln131_fu_210_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_248_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln131_3_fu_258_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln131_1_fu_262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal val_fu_278_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln132_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_296_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln132_fu_306_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln132_1_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln132_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln132_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component preprocess_fptrunFfa IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component preprocess_fpext_Gfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component preprocess_dcmp_6Hfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component preprocess_dlog_6IfE IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component preprocess_mux_41g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    preprocess_fptrunFfa_U109 : component preprocess_fptrunFfa
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_reg_408,
        ce => ap_const_logic_1,
        dout => grp_fu_170_p1);

    preprocess_fpext_Gfk_U110 : component preprocess_fpext_Gfk
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => val_fu_278_p6,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p1);

    preprocess_dcmp_6Hfu_U111 : component preprocess_dcmp_6Hfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_396,
        din1 => ap_const_lv64_3D719799812DEA11,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_180_p2);

    preprocess_dlog_6IfE_U112 : component preprocess_dlog_6IfE
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => select_ln134_reg_403,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p2);

    preprocess_mux_41g8j_U113 : component preprocess_mux_41g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => fbank_out_0_q0,
        din1 => fbank_out_1_q0,
        din2 => fbank_out_2_q0,
        din3 => fbank_out_3_q0,
        din4 => val_fu_278_p5,
        dout => val_fu_278_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln129_fu_232_p2 = ap_const_lv1_1))) then 
                i_0_reg_148 <= i_reg_344;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_148 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                j_0_reg_159 <= j_reg_357;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln127_fu_190_p2 = ap_const_lv1_0))) then 
                j_0_reg_159 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln127_fu_190_p2 = ap_const_lv1_0))) then
                    add_ln131_reg_349(9 downto 1) <= add_ln131_fu_226_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln129_fu_232_p2 = ap_const_lv1_0))) then
                fbank_out_0_addr_reg_367 <= zext_ln131_4_fu_267_p1(9 - 1 downto 0);
                fbank_out_1_addr_reg_373 <= zext_ln131_4_fu_267_p1(9 - 1 downto 0);
                fbank_out_2_addr_reg_379 <= zext_ln131_4_fu_267_p1(9 - 1 downto 0);
                fbank_out_3_addr_reg_385 <= zext_ln131_4_fu_267_p1(9 - 1 downto 0);
                trunc_ln131_reg_362 <= trunc_ln131_fu_244_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_344 <= i_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_357 <= j_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                select_ln134_reg_403 <= select_ln134_fu_334_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_5_reg_408 <= grp_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_reg_396 <= grp_fu_177_p1;
            end if;
        end if;
    end process;
    add_ln131_reg_349(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln127_fu_190_p2, ap_CS_fsm_state3, icmp_ln129_fu_232_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln127_fu_190_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln129_fu_232_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln131_1_fu_262_p2 <= std_logic_vector(unsigned(add_ln131_reg_349) + unsigned(zext_ln131_3_fu_258_p1));
    add_ln131_fu_226_p2 <= std_logic_vector(unsigned(zext_ln131_2_fu_222_p1) + unsigned(zext_ln131_fu_210_p1));
    and_ln132_fu_328_p2 <= (or_ln132_fu_322_p2 and grp_fu_180_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln127_fu_190_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln127_fu_190_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln127_fu_190_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln127_fu_190_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln132_fu_293_p1 <= tmp_reg_396;
    fbank_out_0_address0 <= zext_ln131_4_fu_267_p1(9 - 1 downto 0);
    fbank_out_0_address1 <= fbank_out_0_addr_reg_367;

    fbank_out_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fbank_out_0_ce0 <= ap_const_logic_1;
        else 
            fbank_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fbank_out_0_ce1_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            fbank_out_0_ce1 <= ap_const_logic_1;
        else 
            fbank_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fbank_out_0_d1 <= grp_fu_170_p1;

    fbank_out_0_we1_assign_proc : process(trunc_ln131_reg_362, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (trunc_ln131_reg_362 = ap_const_lv2_0))) then 
            fbank_out_0_we1 <= ap_const_logic_1;
        else 
            fbank_out_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    fbank_out_1_address0 <= zext_ln131_4_fu_267_p1(9 - 1 downto 0);
    fbank_out_1_address1 <= fbank_out_1_addr_reg_373;

    fbank_out_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fbank_out_1_ce0 <= ap_const_logic_1;
        else 
            fbank_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fbank_out_1_ce1_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            fbank_out_1_ce1 <= ap_const_logic_1;
        else 
            fbank_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fbank_out_1_d1 <= grp_fu_170_p1;

    fbank_out_1_we1_assign_proc : process(trunc_ln131_reg_362, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (trunc_ln131_reg_362 = ap_const_lv2_1))) then 
            fbank_out_1_we1 <= ap_const_logic_1;
        else 
            fbank_out_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    fbank_out_2_address0 <= zext_ln131_4_fu_267_p1(9 - 1 downto 0);
    fbank_out_2_address1 <= fbank_out_2_addr_reg_379;

    fbank_out_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fbank_out_2_ce0 <= ap_const_logic_1;
        else 
            fbank_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fbank_out_2_ce1_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            fbank_out_2_ce1 <= ap_const_logic_1;
        else 
            fbank_out_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fbank_out_2_d1 <= grp_fu_170_p1;

    fbank_out_2_we1_assign_proc : process(trunc_ln131_reg_362, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (trunc_ln131_reg_362 = ap_const_lv2_2))) then 
            fbank_out_2_we1 <= ap_const_logic_1;
        else 
            fbank_out_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    fbank_out_3_address0 <= zext_ln131_4_fu_267_p1(9 - 1 downto 0);
    fbank_out_3_address1 <= fbank_out_3_addr_reg_385;

    fbank_out_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fbank_out_3_ce0 <= ap_const_logic_1;
        else 
            fbank_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fbank_out_3_ce1_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            fbank_out_3_ce1 <= ap_const_logic_1;
        else 
            fbank_out_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fbank_out_3_d1 <= grp_fu_170_p1;

    fbank_out_3_we1_assign_proc : process(trunc_ln131_reg_362, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (trunc_ln131_reg_362 = ap_const_lv2_3))) then 
            fbank_out_3_we1 <= ap_const_logic_1;
        else 
            fbank_out_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_196_p2 <= std_logic_vector(unsigned(i_0_reg_148) + unsigned(ap_const_lv6_1));
    icmp_ln127_fu_190_p2 <= "1" when (i_0_reg_148 = ap_const_lv6_31) else "0";
    icmp_ln129_fu_232_p2 <= "1" when (j_0_reg_159 = ap_const_lv6_28) else "0";
    icmp_ln132_1_fu_316_p2 <= "1" when (trunc_ln132_fu_306_p1 = ap_const_lv52_0) else "0";
    icmp_ln132_fu_310_p2 <= "0" when (tmp_3_fu_296_p4 = ap_const_lv11_7FF) else "1";
    j_fu_238_p2 <= std_logic_vector(unsigned(j_0_reg_159) + unsigned(ap_const_lv6_1));
    or_ln132_fu_322_p2 <= (icmp_ln132_fu_310_p2 or icmp_ln132_1_fu_316_p2);
    select_ln134_fu_334_p3 <= 
        ap_const_lv64_3D71979980000000 when (and_ln132_fu_328_p2(0) = '1') else 
        tmp_reg_396;
    tmp_2_fu_202_p3 <= (i_0_reg_148 & ap_const_lv3_0);
    tmp_3_fu_296_p4 <= bitcast_ln132_fu_293_p1(62 downto 52);
    tmp_7_fu_214_p3 <= (i_0_reg_148 & ap_const_lv1_0);
    tmp_8_fu_248_p4 <= j_0_reg_159(5 downto 2);
    trunc_ln131_fu_244_p1 <= j_0_reg_159(2 - 1 downto 0);
    trunc_ln132_fu_306_p1 <= bitcast_ln132_fu_293_p1(52 - 1 downto 0);
    val_fu_278_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln131_reg_362),16));
    zext_ln131_2_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_214_p3),10));
    zext_ln131_3_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_248_p4),10));
    zext_ln131_4_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln131_1_fu_262_p2),64));
    zext_ln131_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_202_p3),10));
end behav;
