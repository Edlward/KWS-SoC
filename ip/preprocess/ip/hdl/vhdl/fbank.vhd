-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fbank is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_0_ce1 : OUT STD_LOGIC;
    output_0_we1 : OUT STD_LOGIC;
    output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_1_ce1 : OUT STD_LOGIC;
    output_1_we1 : OUT STD_LOGIC;
    output_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_2_ce1 : OUT STD_LOGIC;
    output_2_we1 : OUT STD_LOGIC;
    output_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_3_ce0 : OUT STD_LOGIC;
    output_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_3_ce1 : OUT STD_LOGIC;
    output_3_we1 : OUT STD_LOGIC;
    output_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    spectrogram_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    spectrogram_3_ce0 : OUT STD_LOGIC;
    spectrogram_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    spectrogram_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    spectrogram_0_ce0 : OUT STD_LOGIC;
    spectrogram_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    spectrogram_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    spectrogram_1_ce0 : OUT STD_LOGIC;
    spectrogram_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    spectrogram_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    spectrogram_2_ce0 : OUT STD_LOGIC;
    spectrogram_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fbank is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_201 : STD_LOGIC_VECTOR (9 downto 0) := "1000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_7A8 : STD_LOGIC_VECTOR (10 downto 0) := "11110101000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1FC : STD_LOGIC_VECTOR (8 downto 0) := "111111100";
    constant ap_const_lv9_FD : STD_LOGIC_VECTOR (8 downto 0) := "011111101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_28 : STD_LOGIC_VECTOR (6 downto 0) := "0101000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_ce0 : STD_LOGIC;
    signal weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal band_mapper_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal band_mapper_ce0 : STD_LOGIC;
    signal band_mapper_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_reg_391 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_3_reg_402 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_413 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal i_fu_476_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_5_fu_488_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln67_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_7_fu_500_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln93_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln93_fu_512_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln97_1_fu_538_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_928 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln97_fu_546_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln97_reg_935 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_939 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_560_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_10_fu_617_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_10_reg_952 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln104_fu_639_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln104_reg_957 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln100_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln108_fu_669_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln108_reg_962 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln102_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_2_fu_758_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln104_2_reg_991 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal spec_val_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal weights_load_reg_1012 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_reg_1017 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal weighted_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln107_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_1030 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_0_addr_1_reg_1034 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_1_addr_1_reg_1040 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_2_addr_1_reg_1046 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_3_addr_1_reg_1052 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln108_fu_810_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln108_reg_1058 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_36_fu_817_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_1062 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_1067 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln110_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln110_reg_1075 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal trunc_ln111_fu_842_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln111_reg_1079 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln111_fu_859_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln111_reg_1084 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_2_reg_1089 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal output_1_addr_2_reg_1095 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_2_addr_2_reg_1101 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_3_addr_2_reg_1107 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_37_fu_874_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_reg_1113 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_fu_888_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal i_0_reg_358 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln28_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_369 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln48_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_2_reg_380 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i_3_phi_fu_406_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal i_4_reg_424 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_1_reg_436 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln97_3_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_3_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_4_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln108_3_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_1_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_448_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln95_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_518_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_fu_530_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_fu_566_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_49_fu_577_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln97_fu_573_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln97_1_fu_584_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln97_2_fu_594_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln97_fu_588_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln97_1_fu_597_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_fu_627_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln104_fu_623_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln104_1_fu_635_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_51_fu_645_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_657_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln108_2_fu_665_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln108_1_fu_653_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln7_fu_681_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln104_2_fu_691_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln104_1_fu_695_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_53_fu_705_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln104_fu_720_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln104_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_1_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_fu_730_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln104_2_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_1_fu_744_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln107_fu_772_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_87_fu_784_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln108_fu_793_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln108_1_fu_797_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_36_fu_817_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal channel_1_fu_831_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_88_fu_845_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln111_fu_855_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_fu_874_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_448_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component preprocess_faddfscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component preprocess_fmul_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component preprocess_fsqrt_Ee0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component preprocess_mux_41g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fbank_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fbank_band_mapper IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    weights_U : component fbank_weights
    generic map (
        DataWidth => 32,
        AddressRange => 513,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_address0,
        ce0 => weights_ce0,
        q0 => weights_q0);

    band_mapper_U : component fbank_band_mapper
    generic map (
        DataWidth => 7,
        AddressRange => 513,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => band_mapper_address0,
        ce0 => band_mapper_ce0,
        q0 => band_mapper_q0);

    preprocess_faddfscud_U93 : component preprocess_faddfscud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_448_p0,
        din1 => grp_fu_448_p1,
        opcode => grp_fu_448_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_448_p2);

    preprocess_fmul_3eOg_U94 : component preprocess_fmul_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => spec_val_reg_1006,
        din1 => weights_load_reg_1012,
        ce => ap_const_logic_1,
        dout => grp_fu_452_p2);

    preprocess_fsqrt_Ee0_U95 : component preprocess_fsqrt_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => select_ln104_2_reg_991,
        ce => ap_const_logic_1,
        dout => grp_fu_456_p2);

    preprocess_mux_41g8j_U96 : component preprocess_mux_41g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_q0,
        din1 => output_1_q0,
        din2 => output_2_q0,
        din3 => output_3_q0,
        din4 => tmp_36_fu_817_p5,
        dout => tmp_36_fu_817_p6);

    preprocess_mux_41g8j_U97 : component preprocess_mux_41g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => output_1_q0,
        din1 => output_2_q0,
        din2 => output_3_q0,
        din3 => output_0_q0,
        din4 => tmp_37_fu_874_p5,
        dout => tmp_37_fu_874_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_494_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_494_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_470_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_358 <= i_fu_476_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_358 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_1_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_369 <= ap_const_lv10_0;
            elsif (((icmp_ln48_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_369 <= i_5_fu_488_p2;
            end if; 
        end if;
    end process;

    i_2_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_2_reg_380 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_494_p2 = ap_const_lv1_0))) then 
                i_2_reg_380 <= i_7_fu_500_p2;
            end if; 
        end if;
    end process;

    i_3_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_494_p2 = ap_const_lv1_1))) then 
                i_3_reg_402 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln93_reg_919 = ap_const_lv1_0))) then 
                i_3_reg_402 <= select_ln97_1_reg_928;
            end if; 
        end if;
    end process;

    i_4_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_4_reg_424 <= ap_const_lv6_0;
            elsif (((icmp_ln102_fu_675_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_4_reg_424 <= i_10_reg_952;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_494_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_391 <= ap_const_lv11_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln93_fu_506_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_391 <= add_ln93_fu_512_p2;
            end if; 
        end if;
    end process;

    j_0_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_494_p2 = ap_const_lv1_1))) then 
                j_0_reg_413 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln93_fu_506_p2 = ap_const_lv1_0))) then 
                j_0_reg_413 <= j_fu_560_p2;
            end if; 
        end if;
    end process;

    j_1_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                j_1_reg_436 <= j_3_fu_888_p2;
            elsif (((icmp_ln100_fu_611_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_1_reg_436 <= ap_const_lv9_2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_611_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                add_ln104_reg_957 <= add_ln104_fu_639_p2;
                    add_ln108_reg_962(9 downto 1) <= add_ln108_fu_669_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                add_ln111_reg_1084 <= add_ln111_fu_859_p2;
                trunc_ln111_reg_1079 <= trunc_ln111_fu_842_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                channel_reg_1017 <= band_mapper_q0;
                spec_val_reg_1006 <= grp_fu_456_p2;
                weights_load_reg_1012 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_10_reg_952 <= i_10_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                icmp_ln107_reg_1030 <= icmp_ln107_fu_778_p2;
                weighted_reg_1025 <= grp_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                icmp_ln110_reg_1075 <= icmp_ln110_fu_836_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln93_reg_919 <= icmp_ln93_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_778_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                output_0_addr_1_reg_1034 <= zext_ln108_3_fu_802_p1(9 - 1 downto 0);
                output_1_addr_1_reg_1040 <= zext_ln108_3_fu_802_p1(9 - 1 downto 0);
                output_2_addr_1_reg_1046 <= zext_ln108_3_fu_802_p1(9 - 1 downto 0);
                output_3_addr_1_reg_1052 <= zext_ln108_3_fu_802_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                output_0_addr_2_reg_1089 <= zext_ln111_1_fu_864_p1(9 - 1 downto 0);
                output_1_addr_2_reg_1095 <= zext_ln111_1_fu_864_p1(9 - 1 downto 0);
                output_2_addr_2_reg_1101 <= zext_ln111_1_fu_864_p1(9 - 1 downto 0);
                output_3_addr_2_reg_1107 <= zext_ln111_1_fu_864_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_461 <= grp_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                select_ln104_2_reg_991 <= select_ln104_2_fu_758_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln93_fu_506_p2 = ap_const_lv1_0))) then
                select_ln97_1_reg_928 <= select_ln97_1_fu_538_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_32_reg_1067 <= grp_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_36_reg_1062 <= tmp_36_fu_817_p6;
                trunc_ln108_reg_1058 <= trunc_ln108_fu_810_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_37_reg_1113 <= tmp_37_fu_874_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln93_fu_506_p2 = ap_const_lv1_0))) then
                tmp_reg_939 <= select_ln97_fu_530_p3(5 downto 2);
                trunc_ln97_reg_935 <= trunc_ln97_fu_546_p1;
            end if;
        end if;
    end process;
    add_ln108_reg_962(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln67_fu_494_p2, ap_CS_fsm_state5, icmp_ln93_fu_506_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state9, icmp_ln100_fu_611_p2, ap_CS_fsm_state10, icmp_ln102_fu_675_p2, ap_CS_fsm_state27, icmp_ln107_fu_778_p2, icmp_ln110_fu_836_p2, ap_CS_fsm_state34, ap_block_pp1_stage0_subdone, icmp_ln28_fu_470_p2, icmp_ln48_fu_482_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln28_fu_470_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln48_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_494_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln93_fu_506_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln93_fu_506_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln100_fu_611_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln102_fu_675_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln107_fu_778_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln110_fu_836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln104_1_fu_695_p2 <= std_logic_vector(unsigned(add_ln104_reg_957) + unsigned(zext_ln104_2_fu_691_p1));
    add_ln104_fu_639_p2 <= std_logic_vector(unsigned(zext_ln104_fu_623_p1) + unsigned(zext_ln104_1_fu_635_p1));
    add_ln107_fu_772_p2 <= std_logic_vector(signed(ap_const_lv9_1FC) + signed(j_1_reg_436));
    add_ln108_1_fu_797_p2 <= std_logic_vector(signed(sext_ln108_fu_793_p1) + signed(add_ln108_reg_962));
    add_ln108_fu_669_p2 <= std_logic_vector(unsigned(zext_ln108_2_fu_665_p1) + unsigned(zext_ln108_1_fu_653_p1));
    add_ln111_fu_859_p2 <= std_logic_vector(signed(sext_ln111_fu_855_p1) + signed(add_ln108_reg_962));
    add_ln93_fu_512_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_391) + unsigned(ap_const_lv11_1));
    add_ln97_1_fu_597_p2 <= std_logic_vector(unsigned(zext_ln97_2_fu_594_p1) + unsigned(add_ln97_fu_588_p2));
    add_ln97_fu_588_p2 <= std_logic_vector(unsigned(zext_ln97_fu_573_p1) + unsigned(zext_ln97_1_fu_584_p1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(35);
    ap_CS_fsm_state38 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(41);
    ap_CS_fsm_state44 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln93_fu_506_p2)
    begin
        if ((icmp_ln93_fu_506_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, icmp_ln100_fu_611_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln100_fu_611_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_3_phi_fu_406_p4_assign_proc : process(i_3_reg_402, icmp_ln93_reg_919, ap_CS_fsm_pp1_stage0, select_ln97_1_reg_928, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln93_reg_919 = ap_const_lv1_0))) then 
            ap_phi_mux_i_3_phi_fu_406_p4 <= select_ln97_1_reg_928;
        else 
            ap_phi_mux_i_3_phi_fu_406_p4 <= i_3_reg_402;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln100_fu_611_p2)
    begin
        if (((icmp_ln100_fu_611_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    band_mapper_address0 <= zext_ln107_fu_766_p1(10 - 1 downto 0);

    band_mapper_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            band_mapper_ce0 <= ap_const_logic_1;
        else 
            band_mapper_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_1_fu_831_p2 <= std_logic_vector(unsigned(channel_reg_1017) + unsigned(ap_const_lv7_1));

    grp_fu_448_opcode_assign_proc : process(icmp_ln110_fu_836_p2, ap_CS_fsm_state34, ap_CS_fsm_state29, ap_CS_fsm_state39)
    begin
        if (((icmp_ln110_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_448_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_448_opcode <= ap_const_lv2_0;
        else 
            grp_fu_448_opcode <= "XX";
        end if; 
    end process;


    grp_fu_448_p0_assign_proc : process(spec_val_reg_1006, tmp_36_reg_1062, ap_CS_fsm_state34, tmp_37_reg_1113, ap_CS_fsm_state29, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_448_p0 <= tmp_37_reg_1113;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_448_p0 <= spec_val_reg_1006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_448_p0 <= tmp_36_reg_1062;
        else 
            grp_fu_448_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_448_p1_assign_proc : process(reg_461, weighted_reg_1025, ap_CS_fsm_state34, ap_CS_fsm_state29, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_448_p1 <= reg_461;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_448_p1 <= weighted_reg_1025;
        else 
            grp_fu_448_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_10_fu_617_p2 <= std_logic_vector(unsigned(i_4_reg_424) + unsigned(ap_const_lv6_1));
    i_5_fu_488_p2 <= std_logic_vector(unsigned(i_1_reg_369) + unsigned(ap_const_lv10_1));
    i_7_fu_500_p2 <= std_logic_vector(unsigned(i_2_reg_380) + unsigned(ap_const_lv10_1));
    i_9_fu_518_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_i_3_phi_fu_406_p4));
    i_fu_476_p2 <= std_logic_vector(unsigned(i_0_reg_358) + unsigned(ap_const_lv6_1));
    icmp_ln100_fu_611_p2 <= "1" when (i_4_reg_424 = ap_const_lv6_31) else "0";
    icmp_ln102_fu_675_p2 <= "1" when (j_1_reg_436 = ap_const_lv9_100) else "0";
    icmp_ln104_1_fu_738_p2 <= "1" when (trunc_ln104_fu_720_p1 = ap_const_lv2_1) else "0";
    icmp_ln104_2_fu_752_p2 <= "1" when (trunc_ln104_fu_720_p1 = ap_const_lv2_2) else "0";
    icmp_ln104_fu_724_p2 <= "1" when (trunc_ln104_fu_720_p1 = ap_const_lv2_0) else "0";
    icmp_ln107_fu_778_p2 <= "1" when (unsigned(add_ln107_fu_772_p2) < unsigned(ap_const_lv9_FD)) else "0";
    icmp_ln110_fu_836_p2 <= "1" when (signed(channel_1_fu_831_p2) < signed(ap_const_lv7_28)) else "0";
    icmp_ln28_fu_470_p2 <= "1" when (i_0_reg_358 = ap_const_lv6_29) else "0";
    icmp_ln48_fu_482_p2 <= "1" when (i_1_reg_369 = ap_const_lv10_201) else "0";
    icmp_ln67_fu_494_p2 <= "1" when (i_2_reg_380 = ap_const_lv10_201) else "0";
    icmp_ln93_fu_506_p2 <= "1" when (indvar_flatten_reg_391 = ap_const_lv11_7A8) else "0";
    icmp_ln95_fu_524_p2 <= "1" when (j_0_reg_413 = ap_const_lv6_28) else "0";
    j_3_fu_888_p2 <= std_logic_vector(unsigned(j_1_reg_436) + unsigned(ap_const_lv9_1));
    j_fu_560_p2 <= std_logic_vector(unsigned(select_ln97_fu_530_p3) + unsigned(ap_const_lv6_1));
    lshr_ln7_fu_681_p4 <= j_1_reg_436(8 downto 2);

    output_0_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37, zext_ln108_3_fu_802_p1, zext_ln111_1_fu_864_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            output_0_address0 <= zext_ln111_1_fu_864_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_0_address0 <= zext_ln108_3_fu_802_p1(9 - 1 downto 0);
        else 
            output_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_0_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, output_0_addr_1_reg_1034, ap_CS_fsm_state34, output_0_addr_2_reg_1089, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln97_3_fu_603_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_0_address1 <= output_0_addr_2_reg_1089;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_0_address1 <= output_0_addr_1_reg_1034;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_0_address1 <= zext_ln97_3_fu_603_p1(9 - 1 downto 0);
        else 
            output_0_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_0_ce1 <= ap_const_logic_1;
        else 
            output_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_d1_assign_proc : process(reg_461, ap_CS_fsm_pp1_stage0, tmp_32_reg_1067, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_0_d1 <= reg_461;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_0_d1 <= tmp_32_reg_1067;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_0_d1 <= ap_const_lv32_0;
        else 
            output_0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, trunc_ln97_reg_935, icmp_ln107_reg_1030, trunc_ln108_reg_1058, icmp_ln110_reg_1075, ap_CS_fsm_state34, trunc_ln111_reg_1079, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if ((((trunc_ln111_reg_1079 = ap_const_lv2_3) and (icmp_ln110_reg_1075 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((trunc_ln108_reg_1058 = ap_const_lv2_0) and (icmp_ln107_reg_1030 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((trunc_ln97_reg_935 = ap_const_lv2_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_0_we1 <= ap_const_logic_1;
        else 
            output_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37, zext_ln108_3_fu_802_p1, zext_ln111_1_fu_864_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            output_1_address0 <= zext_ln111_1_fu_864_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_1_address0 <= zext_ln108_3_fu_802_p1(9 - 1 downto 0);
        else 
            output_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_1_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, output_1_addr_1_reg_1040, ap_CS_fsm_state34, output_1_addr_2_reg_1095, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln97_3_fu_603_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_1_address1 <= output_1_addr_2_reg_1095;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_1_address1 <= output_1_addr_1_reg_1040;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_1_address1 <= zext_ln97_3_fu_603_p1(9 - 1 downto 0);
        else 
            output_1_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    output_1_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_1_ce1 <= ap_const_logic_1;
        else 
            output_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_d1_assign_proc : process(reg_461, ap_CS_fsm_pp1_stage0, tmp_32_reg_1067, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_1_d1 <= reg_461;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_1_d1 <= tmp_32_reg_1067;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_1_d1 <= ap_const_lv32_0;
        else 
            output_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_1_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, trunc_ln97_reg_935, icmp_ln107_reg_1030, trunc_ln108_reg_1058, icmp_ln110_reg_1075, ap_CS_fsm_state34, trunc_ln111_reg_1079, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if ((((trunc_ln111_reg_1079 = ap_const_lv2_0) and (icmp_ln110_reg_1075 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((trunc_ln108_reg_1058 = ap_const_lv2_1) and (icmp_ln107_reg_1030 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((trunc_ln97_reg_935 = ap_const_lv2_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_1_we1 <= ap_const_logic_1;
        else 
            output_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37, zext_ln108_3_fu_802_p1, zext_ln111_1_fu_864_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            output_2_address0 <= zext_ln111_1_fu_864_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_2_address0 <= zext_ln108_3_fu_802_p1(9 - 1 downto 0);
        else 
            output_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_2_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, output_2_addr_1_reg_1046, ap_CS_fsm_state34, output_2_addr_2_reg_1101, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln97_3_fu_603_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_2_address1 <= output_2_addr_2_reg_1101;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_2_address1 <= output_2_addr_1_reg_1046;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_2_address1 <= zext_ln97_3_fu_603_p1(9 - 1 downto 0);
        else 
            output_2_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    output_2_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_2_ce1 <= ap_const_logic_1;
        else 
            output_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_d1_assign_proc : process(reg_461, ap_CS_fsm_pp1_stage0, tmp_32_reg_1067, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_2_d1 <= reg_461;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_2_d1 <= tmp_32_reg_1067;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_2_d1 <= ap_const_lv32_0;
        else 
            output_2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_2_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, trunc_ln97_reg_935, icmp_ln107_reg_1030, trunc_ln108_reg_1058, icmp_ln110_reg_1075, ap_CS_fsm_state34, trunc_ln111_reg_1079, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if ((((trunc_ln111_reg_1079 = ap_const_lv2_1) and (icmp_ln110_reg_1075 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((trunc_ln108_reg_1058 = ap_const_lv2_2) and (icmp_ln107_reg_1030 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((trunc_ln97_reg_935 = ap_const_lv2_2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_2_we1 <= ap_const_logic_1;
        else 
            output_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37, zext_ln108_3_fu_802_p1, zext_ln111_1_fu_864_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            output_3_address0 <= zext_ln111_1_fu_864_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_3_address0 <= zext_ln108_3_fu_802_p1(9 - 1 downto 0);
        else 
            output_3_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_3_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, output_3_addr_1_reg_1052, ap_CS_fsm_state34, output_3_addr_2_reg_1107, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln97_3_fu_603_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_3_address1 <= output_3_addr_2_reg_1107;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_3_address1 <= output_3_addr_1_reg_1052;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_3_address1 <= zext_ln97_3_fu_603_p1(9 - 1 downto 0);
        else 
            output_3_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    output_3_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_3_ce0 <= ap_const_logic_1;
        else 
            output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_3_ce1 <= ap_const_logic_1;
        else 
            output_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_d1_assign_proc : process(reg_461, ap_CS_fsm_pp1_stage0, tmp_32_reg_1067, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_3_d1 <= reg_461;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_3_d1 <= tmp_32_reg_1067;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_3_d1 <= ap_const_lv32_0;
        else 
            output_3_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_3_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, trunc_ln97_reg_935, icmp_ln107_reg_1030, trunc_ln108_reg_1058, icmp_ln110_reg_1075, ap_CS_fsm_state34, trunc_ln111_reg_1079, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if ((((trunc_ln111_reg_1079 = ap_const_lv2_2) and (icmp_ln110_reg_1075 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((trunc_ln108_reg_1058 = ap_const_lv2_3) and (icmp_ln107_reg_1030 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((trunc_ln97_reg_935 = ap_const_lv2_3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_3_we1 <= ap_const_logic_1;
        else 
            output_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln104_1_fu_744_p3 <= 
        spectrogram_1_q0 when (icmp_ln104_1_fu_738_p2(0) = '1') else 
        select_ln104_fu_730_p3;
    select_ln104_2_fu_758_p3 <= 
        spectrogram_2_q0 when (icmp_ln104_2_fu_752_p2(0) = '1') else 
        select_ln104_1_fu_744_p3;
    select_ln104_fu_730_p3 <= 
        spectrogram_0_q0 when (icmp_ln104_fu_724_p2(0) = '1') else 
        spectrogram_3_q0;
    select_ln97_1_fu_538_p3 <= 
        i_9_fu_518_p2 when (icmp_ln95_fu_524_p2(0) = '1') else 
        ap_phi_mux_i_3_phi_fu_406_p4;
    select_ln97_fu_530_p3 <= 
        ap_const_lv6_0 when (icmp_ln95_fu_524_p2(0) = '1') else 
        j_0_reg_413;
        sext_ln108_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_87_fu_784_p4),10));

        sext_ln111_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_fu_845_p4),10));

    spectrogram_0_address0 <= zext_ln104_3_fu_700_p1(13 - 1 downto 0);

    spectrogram_0_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            spectrogram_0_ce0 <= ap_const_logic_1;
        else 
            spectrogram_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    spectrogram_1_address0 <= zext_ln104_4_fu_713_p1(13 - 1 downto 0);

    spectrogram_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            spectrogram_1_ce0 <= ap_const_logic_1;
        else 
            spectrogram_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    spectrogram_2_address0 <= zext_ln104_4_fu_713_p1(13 - 1 downto 0);

    spectrogram_2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            spectrogram_2_ce0 <= ap_const_logic_1;
        else 
            spectrogram_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    spectrogram_3_address0 <= zext_ln104_4_fu_713_p1(13 - 1 downto 0);

    spectrogram_3_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            spectrogram_3_ce0 <= ap_const_logic_1;
        else 
            spectrogram_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_36_fu_817_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln108_fu_810_p1),16));
    tmp_37_fu_874_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln111_reg_1079),16));
    tmp_46_fu_566_p3 <= (select_ln97_1_reg_928 & ap_const_lv3_0);
    tmp_49_fu_577_p3 <= (select_ln97_1_reg_928 & ap_const_lv1_0);
    tmp_50_fu_627_p3 <= (i_4_reg_424 & ap_const_lv7_0);
    tmp_51_fu_645_p3 <= (i_4_reg_424 & ap_const_lv3_0);
    tmp_52_fu_657_p3 <= (i_4_reg_424 & ap_const_lv1_0);
    tmp_53_fu_705_p3 <= (i_4_reg_424 & lshr_ln7_fu_681_p4);
    tmp_87_fu_784_p4 <= channel_reg_1017(6 downto 2);
    tmp_88_fu_845_p4 <= channel_1_fu_831_p2(6 downto 2);
    trunc_ln104_fu_720_p1 <= j_1_reg_436(2 - 1 downto 0);
    trunc_ln108_fu_810_p1 <= channel_reg_1017(2 - 1 downto 0);
    trunc_ln111_fu_842_p1 <= channel_reg_1017(2 - 1 downto 0);
    trunc_ln97_fu_546_p1 <= select_ln97_fu_530_p3(2 - 1 downto 0);
    weights_address0 <= zext_ln107_fu_766_p1(10 - 1 downto 0);

    weights_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln104_1_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_627_p3),14));
    zext_ln104_2_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln7_fu_681_p4),14));
    zext_ln104_3_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_1_fu_695_p2),64));
    zext_ln104_4_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_705_p3),64));
    zext_ln104_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_424),14));
    zext_ln107_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_436),64));
    zext_ln108_1_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_645_p3),10));
    zext_ln108_2_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_657_p3),10));
    zext_ln108_3_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln108_1_fu_797_p2),64));
    zext_ln111_1_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln111_reg_1084),64));
    zext_ln97_1_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_577_p3),10));
    zext_ln97_2_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_939),10));
    zext_ln97_3_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln97_1_fu_597_p2),64));
    zext_ln97_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_566_p3),10));
end behav;
