-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity data_broadcaster is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_TVALID : IN STD_LOGIC;
    data_in_TREADY : OUT STD_LOGIC;
    data_in_TLAST : IN STD_LOGIC;
    keep_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    keep_in_TVALID : IN STD_LOGIC;
    keep_in_TREADY : OUT STD_LOGIC;
    keep_in_TLAST : IN STD_LOGIC;
    data2dw1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    data2dw1_V_full_n : IN STD_LOGIC;
    data2dw1_V_write : OUT STD_LOGIC;
    keepout_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    keepout_V_full_n : IN STD_LOGIC;
    keepout_V_write : OUT STD_LOGIC );
end;


architecture behav of data_broadcaster is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln22_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal keep_in_TDATA_blk_n : STD_LOGIC;
    signal data2dw1_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal keepout_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_107_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_110 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_122_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_141 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal i_0_reg_96 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_107_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_107_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component kws_sptohp_32ns_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    kws_sptohp_32ns_1bkb_U1 : component kws_sptohp_32ns_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_107_p0,
        ce => grp_fu_107_ce,
        dout => grp_fu_107_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data2dw1_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_96 <= i_reg_141;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_96 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln22_fu_116_p2 = ap_const_lv1_1) and (keep_in_TVALID = ap_const_logic_0)) or ((icmp_ln22_fu_116_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_141 <= i_fu_122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_110 <= grp_fu_107_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data_in_TVALID, keep_in_TVALID, data2dw1_V_full_n, keepout_V_full_n, ap_CS_fsm_state2, icmp_ln22_fu_116_p2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((icmp_ln22_fu_116_p2 = ap_const_lv1_1) and (keep_in_TVALID = ap_const_logic_0)) or ((icmp_ln22_fu_116_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0)))) and (icmp_ln22_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not((((icmp_ln22_fu_116_p2 = ap_const_lv1_1) and (keep_in_TVALID = ap_const_logic_0)) or ((icmp_ln22_fu_116_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0)))) and (icmp_ln22_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((data2dw1_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((keepout_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state2_assign_proc : process(data_in_TVALID, keep_in_TVALID, icmp_ln22_fu_116_p2)
    begin
                ap_block_state2 <= (((icmp_ln22_fu_116_p2 = ap_const_lv1_1) and (keep_in_TVALID = ap_const_logic_0)) or ((icmp_ln22_fu_116_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, keepout_V_full_n, ap_CS_fsm_state6)
    begin
        if ((((keepout_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(keepout_V_full_n, ap_CS_fsm_state6)
    begin
        if (((keepout_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data2dw1_V_blk_n_assign_proc : process(data2dw1_V_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data2dw1_V_blk_n <= data2dw1_V_full_n;
        else 
            data2dw1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data2dw1_V_din <= reg_110;

    data2dw1_V_write_assign_proc : process(data2dw1_V_full_n, ap_CS_fsm_state4)
    begin
        if (((data2dw1_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data2dw1_V_write <= ap_const_logic_1;
        else 
            data2dw1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    data_in_TDATA_blk_n_assign_proc : process(data_in_TVALID, ap_CS_fsm_state2, icmp_ln22_fu_116_p2)
    begin
        if (((icmp_ln22_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_TDATA_blk_n <= data_in_TVALID;
        else 
            data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_TREADY_assign_proc : process(data_in_TVALID, keep_in_TVALID, ap_CS_fsm_state2, icmp_ln22_fu_116_p2)
    begin
        if ((not((((icmp_ln22_fu_116_p2 = ap_const_lv1_1) and (keep_in_TVALID = ap_const_logic_0)) or ((icmp_ln22_fu_116_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0)))) and (icmp_ln22_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_TREADY <= ap_const_logic_1;
        else 
            data_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_107_ce_assign_proc : process(data_in_TVALID, keep_in_TVALID, ap_CS_fsm_state2, icmp_ln22_fu_116_p2, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not((((icmp_ln22_fu_116_p2 = ap_const_lv1_1) and (keep_in_TVALID = ap_const_logic_0)) or ((icmp_ln22_fu_116_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_107_ce <= ap_const_logic_1;
        else 
            grp_fu_107_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_107_p0_assign_proc : process(data_in_TDATA, keep_in_TDATA, ap_CS_fsm_state2, icmp_ln22_fu_116_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((icmp_ln22_fu_116_p2 = ap_const_lv1_1)) then 
                grp_fu_107_p0 <= keep_in_TDATA;
            elsif ((icmp_ln22_fu_116_p2 = ap_const_lv1_0)) then 
                grp_fu_107_p0 <= data_in_TDATA;
            else 
                grp_fu_107_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_107_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_122_p2 <= std_logic_vector(unsigned(i_0_reg_96) + unsigned(ap_const_lv4_1));
    icmp_ln22_fu_116_p2 <= "1" when (i_0_reg_96 = ap_const_lv4_A) else "0";

    keep_in_TDATA_blk_n_assign_proc : process(keep_in_TVALID, ap_CS_fsm_state2, icmp_ln22_fu_116_p2)
    begin
        if (((icmp_ln22_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            keep_in_TDATA_blk_n <= keep_in_TVALID;
        else 
            keep_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    keep_in_TREADY_assign_proc : process(data_in_TVALID, keep_in_TVALID, ap_CS_fsm_state2, icmp_ln22_fu_116_p2)
    begin
        if ((not((((icmp_ln22_fu_116_p2 = ap_const_lv1_1) and (keep_in_TVALID = ap_const_logic_0)) or ((icmp_ln22_fu_116_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0)))) and (icmp_ln22_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            keep_in_TREADY <= ap_const_logic_1;
        else 
            keep_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    keepout_V_blk_n_assign_proc : process(keepout_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            keepout_V_blk_n <= keepout_V_full_n;
        else 
            keepout_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    keepout_V_din <= reg_110;

    keepout_V_write_assign_proc : process(keepout_V_full_n, ap_CS_fsm_state6)
    begin
        if (((keepout_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            keepout_V_write <= ap_const_logic_1;
        else 
            keepout_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
