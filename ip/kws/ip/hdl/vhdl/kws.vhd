-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kws is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    data_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_TVALID : IN STD_LOGIC;
    data_in_TREADY : OUT STD_LOGIC;
    data_in_TLAST : IN STD_LOGIC;
    weight_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_in_TVALID : IN STD_LOGIC;
    weight_in_TREADY : OUT STD_LOGIC;
    weight_in_TLAST : IN STD_LOGIC;
    control_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    control_in_TVALID : IN STD_LOGIC;
    control_in_TREADY : OUT STD_LOGIC;
    control_in_TLAST : IN STD_LOGIC;
    keep_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    keep_in_TVALID : IN STD_LOGIC;
    keep_in_TREADY : OUT STD_LOGIC;
    keep_in_TLAST : IN STD_LOGIC;
    data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_TVALID : OUT STD_LOGIC;
    data_out_TREADY : IN STD_LOGIC;
    data_out_TLAST : OUT STD_LOGIC );
end;


architecture behav of kws is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kws,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.587000,HLS_SYN_LAT=47795,HLS_SYN_TPT=none,HLS_SYN_MEM=59,HLS_SYN_DSP=104,HLS_SYN_FF=32142,HLS_SYN_LUT=25688,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal dw_weight1_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dw_weight1_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dw_weight1_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal pw_weight1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal pw_weight1_ce0 : STD_LOGIC;
    signal pw_weight1_we0 : STD_LOGIC;
    signal pw_weight1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bn_bias1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bn_bias1_ce0 : STD_LOGIC;
    signal bn_bias1_we0 : STD_LOGIC;
    signal bn_bias1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_ru_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_ru_ce0 : STD_LOGIC;
    signal weights_ru_we0 : STD_LOGIC;
    signal weights_ru_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_rw_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_rw_ce0 : STD_LOGIC;
    signal weights_rw_we0 : STD_LOGIC;
    signal weights_rw_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_r_ce0 : STD_LOGIC;
    signal bias_r_we0 : STD_LOGIC;
    signal bias_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_zu_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_zu_ce0 : STD_LOGIC;
    signal weights_zu_we0 : STD_LOGIC;
    signal weights_zu_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_zw_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_zw_ce0 : STD_LOGIC;
    signal weights_zw_we0 : STD_LOGIC;
    signal weights_zw_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_z_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_z_ce0 : STD_LOGIC;
    signal bias_z_we0 : STD_LOGIC;
    signal bias_z_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_hu_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_hu_ce0 : STD_LOGIC;
    signal weights_hu_we0 : STD_LOGIC;
    signal weights_hu_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_hw_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_hw_ce0 : STD_LOGIC;
    signal weights_hw_we0 : STD_LOGIC;
    signal weights_hw_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_h_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_h_ce0 : STD_LOGIC;
    signal bias_h_we0 : STD_LOGIC;
    signal bias_h_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc_weights1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fc_weights1_ce0 : STD_LOGIC;
    signal fc_weights1_we0 : STD_LOGIC;
    signal fc_weights1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc_bias1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fc_bias1_ce0 : STD_LOGIC;
    signal fc_bias1_we0 : STD_LOGIC;
    signal fc_bias1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc_weights2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_weights2_ce0 : STD_LOGIC;
    signal fc_weights2_we0 : STD_LOGIC;
    signal fc_weights2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc_bias2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_bias2_ce0 : STD_LOGIC;
    signal fc_bias2_we0 : STD_LOGIC;
    signal fc_bias2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal control_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln73_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_grucell_fu_292_ap_start : STD_LOGIC;
    signal grp_grucell_fu_292_ap_done : STD_LOGIC;
    signal grp_grucell_fu_292_ap_idle : STD_LOGIC;
    signal grp_grucell_fu_292_ap_ready : STD_LOGIC;
    signal grp_grucell_fu_292_in_stream_V_read : STD_LOGIC;
    signal grp_grucell_fu_292_out_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_grucell_fu_292_out_stream_V_write : STD_LOGIC;
    signal grp_grucell_fu_292_keep_stream_V_read : STD_LOGIC;
    signal grp_grucell_fu_292_weights_zu_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_grucell_fu_292_weights_zu_ce0 : STD_LOGIC;
    signal grp_grucell_fu_292_weights_ru_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_grucell_fu_292_weights_ru_ce0 : STD_LOGIC;
    signal grp_grucell_fu_292_weights_zw_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_grucell_fu_292_weights_zw_ce0 : STD_LOGIC;
    signal grp_grucell_fu_292_weights_rw_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_grucell_fu_292_weights_rw_ce0 : STD_LOGIC;
    signal grp_grucell_fu_292_bias_z_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_grucell_fu_292_bias_z_ce0 : STD_LOGIC;
    signal grp_grucell_fu_292_bias_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_grucell_fu_292_bias_r_ce0 : STD_LOGIC;
    signal grp_grucell_fu_292_weights_hw_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_grucell_fu_292_weights_hw_ce0 : STD_LOGIC;
    signal grp_grucell_fu_292_weights_hu_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_grucell_fu_292_weights_hu_ce0 : STD_LOGIC;
    signal grp_grucell_fu_292_bias_h_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_grucell_fu_292_bias_h_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_ap_start : STD_LOGIC;
    signal grp_weight_loader_fu_327_ap_done : STD_LOGIC;
    signal grp_weight_loader_fu_327_ap_idle : STD_LOGIC;
    signal grp_weight_loader_fu_327_ap_ready : STD_LOGIC;
    signal grp_weight_loader_fu_327_weight_in_TREADY : STD_LOGIC;
    signal grp_weight_loader_fu_327_pw_weight1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_weight_loader_fu_327_pw_weight1_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_pw_weight1_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_pw_weight1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_bn_bias1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_weight_loader_fu_327_bn_bias1_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_bn_bias1_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_bn_bias1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_weights_ru_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_weight_loader_fu_327_weights_ru_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_ru_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_ru_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_weights_rw_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_weight_loader_fu_327_weights_rw_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_rw_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_rw_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_bias_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_weight_loader_fu_327_bias_r_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_bias_r_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_bias_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_weights_zu_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_weight_loader_fu_327_weights_zu_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_zu_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_zu_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_weights_zw_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_weight_loader_fu_327_weights_zw_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_zw_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_zw_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_bias_z_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_weight_loader_fu_327_bias_z_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_bias_z_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_bias_z_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_weights_hu_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_weight_loader_fu_327_weights_hu_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_hu_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_hu_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_weights_hw_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_weight_loader_fu_327_weights_hw_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_hw_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_weights_hw_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_bias_h_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_weight_loader_fu_327_bias_h_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_bias_h_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_bias_h_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_fc_weights1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_weight_loader_fu_327_fc_weights1_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_fc_weights1_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_fc_weights1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_fc_bias1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_weight_loader_fu_327_fc_bias1_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_fc_bias1_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_fc_bias1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_fc_weights2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_weight_loader_fu_327_fc_weights2_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_fc_weights2_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_fc_weights2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_fc_bias2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_weight_loader_fu_327_fc_bias2_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_fc_bias2_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_327_fc_bias2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_327_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pw_layer1_fu_368_ap_start : STD_LOGIC;
    signal grp_pw_layer1_fu_368_ap_done : STD_LOGIC;
    signal grp_pw_layer1_fu_368_ap_idle : STD_LOGIC;
    signal grp_pw_layer1_fu_368_ap_ready : STD_LOGIC;
    signal grp_pw_layer1_fu_368_in_stream_V_read : STD_LOGIC;
    signal grp_pw_layer1_fu_368_out_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pw_layer1_fu_368_out_stream_V_write : STD_LOGIC;
    signal grp_pw_layer1_fu_368_pw_weight1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pw_layer1_fu_368_pw_weight1_ce0 : STD_LOGIC;
    signal grp_pw_layer1_fu_368_bn_bias1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pw_layer1_fu_368_bn_bias1_ce0 : STD_LOGIC;
    signal grp_fc_relu6_fu_382_ap_start : STD_LOGIC;
    signal grp_fc_relu6_fu_382_ap_done : STD_LOGIC;
    signal grp_fc_relu6_fu_382_ap_idle : STD_LOGIC;
    signal grp_fc_relu6_fu_382_ap_ready : STD_LOGIC;
    signal grp_fc_relu6_fu_382_in_stream_V_read : STD_LOGIC;
    signal grp_fc_relu6_fu_382_out_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fc_relu6_fu_382_out_stream_V_write : STD_LOGIC;
    signal grp_fc_relu6_fu_382_fc_bias1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fc_relu6_fu_382_fc_bias1_ce0 : STD_LOGIC;
    signal grp_fc_relu6_fu_382_fc_weights1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fc_relu6_fu_382_fc_weights1_ce0 : STD_LOGIC;
    signal grp_fc_64u_12u_1u_s_fu_396_ap_start : STD_LOGIC;
    signal grp_fc_64u_12u_1u_s_fu_396_ap_done : STD_LOGIC;
    signal grp_fc_64u_12u_1u_s_fu_396_ap_idle : STD_LOGIC;
    signal grp_fc_64u_12u_1u_s_fu_396_ap_ready : STD_LOGIC;
    signal grp_fc_64u_12u_1u_s_fu_396_in_stream_V_read : STD_LOGIC;
    signal grp_fc_64u_12u_1u_s_fu_396_out_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fc_64u_12u_1u_s_fu_396_out_stream_V_write : STD_LOGIC;
    signal grp_fc_64u_12u_1u_s_fu_396_fc_bias2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_64u_12u_1u_s_fu_396_fc_bias2_ce0 : STD_LOGIC;
    signal grp_fc_64u_12u_1u_s_fu_396_fc_weights2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fc_64u_12u_1u_s_fu_396_fc_weights2_ce0 : STD_LOGIC;
    signal grp_dw_layer1_fu_410_ap_start : STD_LOGIC;
    signal grp_dw_layer1_fu_410_ap_done : STD_LOGIC;
    signal grp_dw_layer1_fu_410_ap_idle : STD_LOGIC;
    signal grp_dw_layer1_fu_410_ap_ready : STD_LOGIC;
    signal grp_dw_layer1_fu_410_in_stream_V_read : STD_LOGIC;
    signal grp_dw_layer1_fu_410_out_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dw_layer1_fu_410_out_stream_V_write : STD_LOGIC;
    signal grp_data_broadcaster_fu_426_ap_start : STD_LOGIC;
    signal grp_data_broadcaster_fu_426_ap_done : STD_LOGIC;
    signal grp_data_broadcaster_fu_426_ap_idle : STD_LOGIC;
    signal grp_data_broadcaster_fu_426_ap_ready : STD_LOGIC;
    signal grp_data_broadcaster_fu_426_data_in_TREADY : STD_LOGIC;
    signal grp_data_broadcaster_fu_426_keep_in_TREADY : STD_LOGIC;
    signal grp_data_broadcaster_fu_426_data2dw1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_data_broadcaster_fu_426_data2dw1_V_write : STD_LOGIC;
    signal grp_data_broadcaster_fu_426_keepout_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_data_broadcaster_fu_426_keepout_V_write : STD_LOGIC;
    signal grp_datastream_out_12u_s_fu_440_ap_start : STD_LOGIC;
    signal grp_datastream_out_12u_s_fu_440_ap_done : STD_LOGIC;
    signal grp_datastream_out_12u_s_fu_440_ap_idle : STD_LOGIC;
    signal grp_datastream_out_12u_s_fu_440_ap_ready : STD_LOGIC;
    signal grp_datastream_out_12u_s_fu_440_output_V_read : STD_LOGIC;
    signal grp_datastream_out_12u_s_fu_440_data_out_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_datastream_out_12u_s_fu_440_data_out_TVALID : STD_LOGIC;
    signal grp_datastream_out_12u_s_fu_440_data_out_TREADY : STD_LOGIC;
    signal grp_datastream_out_12u_s_fu_440_data_out_TLAST : STD_LOGIC;
    signal grp_grucell_fu_292_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal pw12gru_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal pw12gru_V_empty_n : STD_LOGIC;
    signal pw12gru_V_read : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal gru2fc_V_full_n : STD_LOGIC;
    signal gru2fc_V_write : STD_LOGIC;
    signal keepout_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal keepout_V_empty_n : STD_LOGIC;
    signal keepout_V_read : STD_LOGIC;
    signal grp_weight_loader_fu_327_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_pw_layer1_fu_368_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal dw12pw1_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal dw12pw1_V_empty_n : STD_LOGIC;
    signal dw12pw1_V_read : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal pw12gru_V_full_n : STD_LOGIC;
    signal pw12gru_V_write : STD_LOGIC;
    signal grp_fc_relu6_fu_382_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal gru2fc_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal gru2fc_V_empty_n : STD_LOGIC;
    signal gru2fc_V_read : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal fc2final_V_full_n : STD_LOGIC;
    signal fc2final_V_write : STD_LOGIC;
    signal grp_fc_64u_12u_1u_s_fu_396_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal fc2final_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal fc2final_V_empty_n : STD_LOGIC;
    signal fc2final_V_read : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal output_V_full_n : STD_LOGIC;
    signal output_V_write : STD_LOGIC;
    signal grp_dw_layer1_fu_410_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data2dw1_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal data2dw1_V_empty_n : STD_LOGIC;
    signal data2dw1_V_read : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal dw12pw1_V_full_n : STD_LOGIC;
    signal dw12pw1_V_write : STD_LOGIC;
    signal grp_data_broadcaster_fu_426_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal data2dw1_V_full_n : STD_LOGIC;
    signal data2dw1_V_write : STD_LOGIC;
    signal keepout_V_full_n : STD_LOGIC;
    signal keepout_V_write : STD_LOGIC;
    signal grp_datastream_out_12u_s_fu_440_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal output_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_empty_n : STD_LOGIC;
    signal output_V_read : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal regslice_both_data_out_V_data_U_apdone_blk : STD_LOGIC;
    signal regslice_both_data_in_V_data_U_apdone_blk : STD_LOGIC;
    signal data_in_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_TVALID_int : STD_LOGIC;
    signal data_in_TREADY_int : STD_LOGIC;
    signal regslice_both_data_in_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_data_in_V_last_U_apdone_blk : STD_LOGIC;
    signal data_in_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_data_in_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_data_in_V_last_U_ack_in : STD_LOGIC;
    signal regslice_both_weight_in_V_data_U_apdone_blk : STD_LOGIC;
    signal weight_in_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_in_TVALID_int : STD_LOGIC;
    signal weight_in_TREADY_int : STD_LOGIC;
    signal regslice_both_weight_in_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_weight_in_V_last_U_apdone_blk : STD_LOGIC;
    signal weight_in_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_weight_in_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_weight_in_V_last_U_ack_in : STD_LOGIC;
    signal regslice_both_control_in_V_data_U_apdone_blk : STD_LOGIC;
    signal control_in_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal control_in_TVALID_int : STD_LOGIC;
    signal control_in_TREADY_int : STD_LOGIC;
    signal regslice_both_control_in_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_control_in_V_last_U_apdone_blk : STD_LOGIC;
    signal control_in_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_control_in_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_control_in_V_last_U_ack_in : STD_LOGIC;
    signal regslice_both_keep_in_V_data_U_apdone_blk : STD_LOGIC;
    signal keep_in_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal keep_in_TVALID_int : STD_LOGIC;
    signal keep_in_TREADY_int : STD_LOGIC;
    signal regslice_both_keep_in_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_keep_in_V_last_U_apdone_blk : STD_LOGIC;
    signal keep_in_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_keep_in_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_keep_in_V_last_U_ack_in : STD_LOGIC;
    signal data_out_TREADY_int : STD_LOGIC;
    signal regslice_both_data_out_V_data_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_data_out_V_last_U_apdone_blk : STD_LOGIC;
    signal regslice_both_w1_data_out_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_data_out_V_last_U_vld_out : STD_LOGIC;

    component grucell IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_stream_V_empty_n : IN STD_LOGIC;
        in_stream_V_read : OUT STD_LOGIC;
        out_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_stream_V_full_n : IN STD_LOGIC;
        out_stream_V_write : OUT STD_LOGIC;
        keep_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        keep_stream_V_empty_n : IN STD_LOGIC;
        keep_stream_V_read : OUT STD_LOGIC;
        weights_zu_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        weights_zu_ce0 : OUT STD_LOGIC;
        weights_zu_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        weights_ru_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        weights_ru_ce0 : OUT STD_LOGIC;
        weights_ru_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        weights_zw_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_zw_ce0 : OUT STD_LOGIC;
        weights_zw_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        weights_rw_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_rw_ce0 : OUT STD_LOGIC;
        weights_rw_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_z_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bias_z_ce0 : OUT STD_LOGIC;
        bias_z_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bias_r_ce0 : OUT STD_LOGIC;
        bias_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        weights_hw_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_hw_ce0 : OUT STD_LOGIC;
        weights_hw_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        weights_hu_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        weights_hu_ce0 : OUT STD_LOGIC;
        weights_hu_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_h_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bias_h_ce0 : OUT STD_LOGIC;
        bias_h_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component weight_loader IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weight_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_in_TVALID : IN STD_LOGIC;
        weight_in_TREADY : OUT STD_LOGIC;
        weight_in_TLAST : IN STD_LOGIC;
        dw_weight1_0_read : IN STD_LOGIC_VECTOR (15 downto 0);
        dw_weight1_1_read : IN STD_LOGIC_VECTOR (15 downto 0);
        dw_weight1_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        pw_weight1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        pw_weight1_ce0 : OUT STD_LOGIC;
        pw_weight1_we0 : OUT STD_LOGIC;
        pw_weight1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bn_bias1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bn_bias1_ce0 : OUT STD_LOGIC;
        bn_bias1_we0 : OUT STD_LOGIC;
        bn_bias1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_ru_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        weights_ru_ce0 : OUT STD_LOGIC;
        weights_ru_we0 : OUT STD_LOGIC;
        weights_ru_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_rw_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_rw_ce0 : OUT STD_LOGIC;
        weights_rw_we0 : OUT STD_LOGIC;
        weights_rw_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bias_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bias_r_ce0 : OUT STD_LOGIC;
        bias_r_we0 : OUT STD_LOGIC;
        bias_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_zu_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        weights_zu_ce0 : OUT STD_LOGIC;
        weights_zu_we0 : OUT STD_LOGIC;
        weights_zu_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_zw_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_zw_ce0 : OUT STD_LOGIC;
        weights_zw_we0 : OUT STD_LOGIC;
        weights_zw_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bias_z_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bias_z_ce0 : OUT STD_LOGIC;
        bias_z_we0 : OUT STD_LOGIC;
        bias_z_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_hu_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        weights_hu_ce0 : OUT STD_LOGIC;
        weights_hu_we0 : OUT STD_LOGIC;
        weights_hu_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_hw_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_hw_ce0 : OUT STD_LOGIC;
        weights_hw_we0 : OUT STD_LOGIC;
        weights_hw_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bias_h_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bias_h_ce0 : OUT STD_LOGIC;
        bias_h_we0 : OUT STD_LOGIC;
        bias_h_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        fc_weights1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        fc_weights1_ce0 : OUT STD_LOGIC;
        fc_weights1_we0 : OUT STD_LOGIC;
        fc_weights1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        fc_bias1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        fc_bias1_ce0 : OUT STD_LOGIC;
        fc_bias1_we0 : OUT STD_LOGIC;
        fc_bias1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        fc_weights2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        fc_weights2_ce0 : OUT STD_LOGIC;
        fc_weights2_we0 : OUT STD_LOGIC;
        fc_weights2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        fc_bias2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        fc_bias2_ce0 : OUT STD_LOGIC;
        fc_bias2_we0 : OUT STD_LOGIC;
        fc_bias2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pw_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_stream_V_empty_n : IN STD_LOGIC;
        in_stream_V_read : OUT STD_LOGIC;
        out_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_stream_V_full_n : IN STD_LOGIC;
        out_stream_V_write : OUT STD_LOGIC;
        pw_weight1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        pw_weight1_ce0 : OUT STD_LOGIC;
        pw_weight1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        bn_bias1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bn_bias1_ce0 : OUT STD_LOGIC;
        bn_bias1_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fc_relu6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_stream_V_empty_n : IN STD_LOGIC;
        in_stream_V_read : OUT STD_LOGIC;
        out_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_stream_V_full_n : IN STD_LOGIC;
        out_stream_V_write : OUT STD_LOGIC;
        fc_bias1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        fc_bias1_ce0 : OUT STD_LOGIC;
        fc_bias1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        fc_weights1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        fc_weights1_ce0 : OUT STD_LOGIC;
        fc_weights1_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fc_64u_12u_1u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_stream_V_empty_n : IN STD_LOGIC;
        in_stream_V_read : OUT STD_LOGIC;
        out_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_stream_V_full_n : IN STD_LOGIC;
        out_stream_V_write : OUT STD_LOGIC;
        fc_bias2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        fc_bias2_ce0 : OUT STD_LOGIC;
        fc_bias2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        fc_weights2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        fc_weights2_ce0 : OUT STD_LOGIC;
        fc_weights2_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dw_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_stream_V_empty_n : IN STD_LOGIC;
        in_stream_V_read : OUT STD_LOGIC;
        out_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_stream_V_full_n : IN STD_LOGIC;
        out_stream_V_write : OUT STD_LOGIC;
        dw_weight1_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dw_weight1_0 : IN STD_LOGIC_VECTOR (15 downto 0);
        dw_weight1_1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component data_broadcaster IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        data_in_TVALID : IN STD_LOGIC;
        data_in_TREADY : OUT STD_LOGIC;
        data_in_TLAST : IN STD_LOGIC;
        keep_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        keep_in_TVALID : IN STD_LOGIC;
        keep_in_TREADY : OUT STD_LOGIC;
        keep_in_TLAST : IN STD_LOGIC;
        data2dw1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        data2dw1_V_full_n : IN STD_LOGIC;
        data2dw1_V_write : OUT STD_LOGIC;
        keepout_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        keepout_V_full_n : IN STD_LOGIC;
        keepout_V_write : OUT STD_LOGIC );
    end component;


    component datastream_out_12u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        output_V_empty_n : IN STD_LOGIC;
        output_V_read : OUT STD_LOGIC;
        data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_TVALID : OUT STD_LOGIC;
        data_out_TREADY : IN STD_LOGIC;
        data_out_TLAST : OUT STD_LOGIC );
    end component;


    component kws_pw_weight1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kws_weights_ru IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kws_weights_rw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kws_bias_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component grucell_zz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kws_fc_weights2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fifo_w16_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d100_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d12_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    pw_weight1_U : component kws_pw_weight1
    generic map (
        DataWidth => 16,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pw_weight1_address0,
        ce0 => pw_weight1_ce0,
        we0 => pw_weight1_we0,
        d0 => grp_weight_loader_fu_327_pw_weight1_d0,
        q0 => pw_weight1_q0);

    bn_bias1_U : component kws_pw_weight1
    generic map (
        DataWidth => 16,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bn_bias1_address0,
        ce0 => bn_bias1_ce0,
        we0 => bn_bias1_we0,
        d0 => grp_weight_loader_fu_327_bn_bias1_d0,
        q0 => bn_bias1_q0);

    weights_ru_U : component kws_weights_ru
    generic map (
        DataWidth => 16,
        AddressRange => 6144,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_ru_address0,
        ce0 => weights_ru_ce0,
        we0 => weights_ru_we0,
        d0 => grp_weight_loader_fu_327_weights_ru_d0,
        q0 => weights_ru_q0);

    weights_rw_U : component kws_weights_rw
    generic map (
        DataWidth => 16,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_rw_address0,
        ce0 => weights_rw_ce0,
        we0 => weights_rw_we0,
        d0 => grp_weight_loader_fu_327_weights_rw_d0,
        q0 => weights_rw_q0);

    bias_r_U : component kws_bias_r
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_r_address0,
        ce0 => bias_r_ce0,
        we0 => bias_r_we0,
        d0 => grp_weight_loader_fu_327_bias_r_d0,
        q0 => bias_r_q0);

    weights_zu_U : component kws_weights_ru
    generic map (
        DataWidth => 16,
        AddressRange => 6144,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_zu_address0,
        ce0 => weights_zu_ce0,
        we0 => weights_zu_we0,
        d0 => grp_weight_loader_fu_327_weights_zu_d0,
        q0 => weights_zu_q0);

    weights_zw_U : component kws_weights_rw
    generic map (
        DataWidth => 16,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_zw_address0,
        ce0 => weights_zw_ce0,
        we0 => weights_zw_we0,
        d0 => grp_weight_loader_fu_327_weights_zw_d0,
        q0 => weights_zw_q0);

    bias_z_U : component grucell_zz
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_z_address0,
        ce0 => bias_z_ce0,
        we0 => bias_z_we0,
        d0 => grp_weight_loader_fu_327_bias_z_d0,
        q0 => bias_z_q0);

    weights_hu_U : component kws_weights_ru
    generic map (
        DataWidth => 16,
        AddressRange => 6144,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_hu_address0,
        ce0 => weights_hu_ce0,
        we0 => weights_hu_we0,
        d0 => grp_weight_loader_fu_327_weights_hu_d0,
        q0 => weights_hu_q0);

    weights_hw_U : component kws_weights_rw
    generic map (
        DataWidth => 16,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_hw_address0,
        ce0 => weights_hw_ce0,
        we0 => weights_hw_we0,
        d0 => grp_weight_loader_fu_327_weights_hw_d0,
        q0 => weights_hw_q0);

    bias_h_U : component grucell_zz
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_h_address0,
        ce0 => bias_h_ce0,
        we0 => bias_h_we0,
        d0 => grp_weight_loader_fu_327_bias_h_d0,
        q0 => bias_h_q0);

    fc_weights1_U : component kws_weights_rw
    generic map (
        DataWidth => 16,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_weights1_address0,
        ce0 => fc_weights1_ce0,
        we0 => fc_weights1_we0,
        d0 => grp_weight_loader_fu_327_fc_weights1_d0,
        q0 => fc_weights1_q0);

    fc_bias1_U : component grucell_zz
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_bias1_address0,
        ce0 => fc_bias1_ce0,
        we0 => fc_bias1_we0,
        d0 => grp_weight_loader_fu_327_fc_bias1_d0,
        q0 => fc_bias1_q0);

    fc_weights2_U : component kws_fc_weights2
    generic map (
        DataWidth => 16,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_weights2_address0,
        ce0 => fc_weights2_ce0,
        we0 => fc_weights2_we0,
        d0 => grp_weight_loader_fu_327_fc_weights2_d0,
        q0 => fc_weights2_q0);

    fc_bias2_U : component kws_pw_weight1
    generic map (
        DataWidth => 16,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_bias2_address0,
        ce0 => fc_bias2_ce0,
        we0 => fc_bias2_we0,
        d0 => grp_weight_loader_fu_327_fc_bias2_d0,
        q0 => fc_bias2_q0);

    grp_grucell_fu_292 : component grucell
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_grucell_fu_292_ap_start,
        ap_done => grp_grucell_fu_292_ap_done,
        ap_idle => grp_grucell_fu_292_ap_idle,
        ap_ready => grp_grucell_fu_292_ap_ready,
        in_stream_V_dout => pw12gru_V_dout,
        in_stream_V_empty_n => pw12gru_V_empty_n,
        in_stream_V_read => grp_grucell_fu_292_in_stream_V_read,
        out_stream_V_din => grp_grucell_fu_292_out_stream_V_din,
        out_stream_V_full_n => gru2fc_V_full_n,
        out_stream_V_write => grp_grucell_fu_292_out_stream_V_write,
        keep_stream_V_dout => keepout_V_dout,
        keep_stream_V_empty_n => keepout_V_empty_n,
        keep_stream_V_read => grp_grucell_fu_292_keep_stream_V_read,
        weights_zu_address0 => grp_grucell_fu_292_weights_zu_address0,
        weights_zu_ce0 => grp_grucell_fu_292_weights_zu_ce0,
        weights_zu_q0 => weights_zu_q0,
        weights_ru_address0 => grp_grucell_fu_292_weights_ru_address0,
        weights_ru_ce0 => grp_grucell_fu_292_weights_ru_ce0,
        weights_ru_q0 => weights_ru_q0,
        weights_zw_address0 => grp_grucell_fu_292_weights_zw_address0,
        weights_zw_ce0 => grp_grucell_fu_292_weights_zw_ce0,
        weights_zw_q0 => weights_zw_q0,
        weights_rw_address0 => grp_grucell_fu_292_weights_rw_address0,
        weights_rw_ce0 => grp_grucell_fu_292_weights_rw_ce0,
        weights_rw_q0 => weights_rw_q0,
        bias_z_address0 => grp_grucell_fu_292_bias_z_address0,
        bias_z_ce0 => grp_grucell_fu_292_bias_z_ce0,
        bias_z_q0 => bias_z_q0,
        bias_r_address0 => grp_grucell_fu_292_bias_r_address0,
        bias_r_ce0 => grp_grucell_fu_292_bias_r_ce0,
        bias_r_q0 => bias_r_q0,
        weights_hw_address0 => grp_grucell_fu_292_weights_hw_address0,
        weights_hw_ce0 => grp_grucell_fu_292_weights_hw_ce0,
        weights_hw_q0 => weights_hw_q0,
        weights_hu_address0 => grp_grucell_fu_292_weights_hu_address0,
        weights_hu_ce0 => grp_grucell_fu_292_weights_hu_ce0,
        weights_hu_q0 => weights_hu_q0,
        bias_h_address0 => grp_grucell_fu_292_bias_h_address0,
        bias_h_ce0 => grp_grucell_fu_292_bias_h_ce0,
        bias_h_q0 => bias_h_q0);

    grp_weight_loader_fu_327 : component weight_loader
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_weight_loader_fu_327_ap_start,
        ap_done => grp_weight_loader_fu_327_ap_done,
        ap_idle => grp_weight_loader_fu_327_ap_idle,
        ap_ready => grp_weight_loader_fu_327_ap_ready,
        weight_in_TDATA => weight_in_TDATA_int,
        weight_in_TVALID => weight_in_TVALID_int,
        weight_in_TREADY => grp_weight_loader_fu_327_weight_in_TREADY,
        weight_in_TLAST => weight_in_TLAST_int,
        dw_weight1_0_read => dw_weight1_0,
        dw_weight1_1_read => dw_weight1_1,
        dw_weight1_2_read => dw_weight1_2,
        pw_weight1_address0 => grp_weight_loader_fu_327_pw_weight1_address0,
        pw_weight1_ce0 => grp_weight_loader_fu_327_pw_weight1_ce0,
        pw_weight1_we0 => grp_weight_loader_fu_327_pw_weight1_we0,
        pw_weight1_d0 => grp_weight_loader_fu_327_pw_weight1_d0,
        bn_bias1_address0 => grp_weight_loader_fu_327_bn_bias1_address0,
        bn_bias1_ce0 => grp_weight_loader_fu_327_bn_bias1_ce0,
        bn_bias1_we0 => grp_weight_loader_fu_327_bn_bias1_we0,
        bn_bias1_d0 => grp_weight_loader_fu_327_bn_bias1_d0,
        weights_ru_address0 => grp_weight_loader_fu_327_weights_ru_address0,
        weights_ru_ce0 => grp_weight_loader_fu_327_weights_ru_ce0,
        weights_ru_we0 => grp_weight_loader_fu_327_weights_ru_we0,
        weights_ru_d0 => grp_weight_loader_fu_327_weights_ru_d0,
        weights_rw_address0 => grp_weight_loader_fu_327_weights_rw_address0,
        weights_rw_ce0 => grp_weight_loader_fu_327_weights_rw_ce0,
        weights_rw_we0 => grp_weight_loader_fu_327_weights_rw_we0,
        weights_rw_d0 => grp_weight_loader_fu_327_weights_rw_d0,
        bias_r_address0 => grp_weight_loader_fu_327_bias_r_address0,
        bias_r_ce0 => grp_weight_loader_fu_327_bias_r_ce0,
        bias_r_we0 => grp_weight_loader_fu_327_bias_r_we0,
        bias_r_d0 => grp_weight_loader_fu_327_bias_r_d0,
        weights_zu_address0 => grp_weight_loader_fu_327_weights_zu_address0,
        weights_zu_ce0 => grp_weight_loader_fu_327_weights_zu_ce0,
        weights_zu_we0 => grp_weight_loader_fu_327_weights_zu_we0,
        weights_zu_d0 => grp_weight_loader_fu_327_weights_zu_d0,
        weights_zw_address0 => grp_weight_loader_fu_327_weights_zw_address0,
        weights_zw_ce0 => grp_weight_loader_fu_327_weights_zw_ce0,
        weights_zw_we0 => grp_weight_loader_fu_327_weights_zw_we0,
        weights_zw_d0 => grp_weight_loader_fu_327_weights_zw_d0,
        bias_z_address0 => grp_weight_loader_fu_327_bias_z_address0,
        bias_z_ce0 => grp_weight_loader_fu_327_bias_z_ce0,
        bias_z_we0 => grp_weight_loader_fu_327_bias_z_we0,
        bias_z_d0 => grp_weight_loader_fu_327_bias_z_d0,
        weights_hu_address0 => grp_weight_loader_fu_327_weights_hu_address0,
        weights_hu_ce0 => grp_weight_loader_fu_327_weights_hu_ce0,
        weights_hu_we0 => grp_weight_loader_fu_327_weights_hu_we0,
        weights_hu_d0 => grp_weight_loader_fu_327_weights_hu_d0,
        weights_hw_address0 => grp_weight_loader_fu_327_weights_hw_address0,
        weights_hw_ce0 => grp_weight_loader_fu_327_weights_hw_ce0,
        weights_hw_we0 => grp_weight_loader_fu_327_weights_hw_we0,
        weights_hw_d0 => grp_weight_loader_fu_327_weights_hw_d0,
        bias_h_address0 => grp_weight_loader_fu_327_bias_h_address0,
        bias_h_ce0 => grp_weight_loader_fu_327_bias_h_ce0,
        bias_h_we0 => grp_weight_loader_fu_327_bias_h_we0,
        bias_h_d0 => grp_weight_loader_fu_327_bias_h_d0,
        fc_weights1_address0 => grp_weight_loader_fu_327_fc_weights1_address0,
        fc_weights1_ce0 => grp_weight_loader_fu_327_fc_weights1_ce0,
        fc_weights1_we0 => grp_weight_loader_fu_327_fc_weights1_we0,
        fc_weights1_d0 => grp_weight_loader_fu_327_fc_weights1_d0,
        fc_bias1_address0 => grp_weight_loader_fu_327_fc_bias1_address0,
        fc_bias1_ce0 => grp_weight_loader_fu_327_fc_bias1_ce0,
        fc_bias1_we0 => grp_weight_loader_fu_327_fc_bias1_we0,
        fc_bias1_d0 => grp_weight_loader_fu_327_fc_bias1_d0,
        fc_weights2_address0 => grp_weight_loader_fu_327_fc_weights2_address0,
        fc_weights2_ce0 => grp_weight_loader_fu_327_fc_weights2_ce0,
        fc_weights2_we0 => grp_weight_loader_fu_327_fc_weights2_we0,
        fc_weights2_d0 => grp_weight_loader_fu_327_fc_weights2_d0,
        fc_bias2_address0 => grp_weight_loader_fu_327_fc_bias2_address0,
        fc_bias2_ce0 => grp_weight_loader_fu_327_fc_bias2_ce0,
        fc_bias2_we0 => grp_weight_loader_fu_327_fc_bias2_we0,
        fc_bias2_d0 => grp_weight_loader_fu_327_fc_bias2_d0,
        ap_return_0 => grp_weight_loader_fu_327_ap_return_0,
        ap_return_1 => grp_weight_loader_fu_327_ap_return_1,
        ap_return_2 => grp_weight_loader_fu_327_ap_return_2);

    grp_pw_layer1_fu_368 : component pw_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pw_layer1_fu_368_ap_start,
        ap_done => grp_pw_layer1_fu_368_ap_done,
        ap_idle => grp_pw_layer1_fu_368_ap_idle,
        ap_ready => grp_pw_layer1_fu_368_ap_ready,
        in_stream_V_dout => dw12pw1_V_dout,
        in_stream_V_empty_n => dw12pw1_V_empty_n,
        in_stream_V_read => grp_pw_layer1_fu_368_in_stream_V_read,
        out_stream_V_din => grp_pw_layer1_fu_368_out_stream_V_din,
        out_stream_V_full_n => pw12gru_V_full_n,
        out_stream_V_write => grp_pw_layer1_fu_368_out_stream_V_write,
        pw_weight1_address0 => grp_pw_layer1_fu_368_pw_weight1_address0,
        pw_weight1_ce0 => grp_pw_layer1_fu_368_pw_weight1_ce0,
        pw_weight1_q0 => pw_weight1_q0,
        bn_bias1_address0 => grp_pw_layer1_fu_368_bn_bias1_address0,
        bn_bias1_ce0 => grp_pw_layer1_fu_368_bn_bias1_ce0,
        bn_bias1_q0 => bn_bias1_q0);

    grp_fc_relu6_fu_382 : component fc_relu6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fc_relu6_fu_382_ap_start,
        ap_done => grp_fc_relu6_fu_382_ap_done,
        ap_idle => grp_fc_relu6_fu_382_ap_idle,
        ap_ready => grp_fc_relu6_fu_382_ap_ready,
        in_stream_V_dout => gru2fc_V_dout,
        in_stream_V_empty_n => gru2fc_V_empty_n,
        in_stream_V_read => grp_fc_relu6_fu_382_in_stream_V_read,
        out_stream_V_din => grp_fc_relu6_fu_382_out_stream_V_din,
        out_stream_V_full_n => fc2final_V_full_n,
        out_stream_V_write => grp_fc_relu6_fu_382_out_stream_V_write,
        fc_bias1_address0 => grp_fc_relu6_fu_382_fc_bias1_address0,
        fc_bias1_ce0 => grp_fc_relu6_fu_382_fc_bias1_ce0,
        fc_bias1_q0 => fc_bias1_q0,
        fc_weights1_address0 => grp_fc_relu6_fu_382_fc_weights1_address0,
        fc_weights1_ce0 => grp_fc_relu6_fu_382_fc_weights1_ce0,
        fc_weights1_q0 => fc_weights1_q0);

    grp_fc_64u_12u_1u_s_fu_396 : component fc_64u_12u_1u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fc_64u_12u_1u_s_fu_396_ap_start,
        ap_done => grp_fc_64u_12u_1u_s_fu_396_ap_done,
        ap_idle => grp_fc_64u_12u_1u_s_fu_396_ap_idle,
        ap_ready => grp_fc_64u_12u_1u_s_fu_396_ap_ready,
        in_stream_V_dout => fc2final_V_dout,
        in_stream_V_empty_n => fc2final_V_empty_n,
        in_stream_V_read => grp_fc_64u_12u_1u_s_fu_396_in_stream_V_read,
        out_stream_V_din => grp_fc_64u_12u_1u_s_fu_396_out_stream_V_din,
        out_stream_V_full_n => output_V_full_n,
        out_stream_V_write => grp_fc_64u_12u_1u_s_fu_396_out_stream_V_write,
        fc_bias2_address0 => grp_fc_64u_12u_1u_s_fu_396_fc_bias2_address0,
        fc_bias2_ce0 => grp_fc_64u_12u_1u_s_fu_396_fc_bias2_ce0,
        fc_bias2_q0 => fc_bias2_q0,
        fc_weights2_address0 => grp_fc_64u_12u_1u_s_fu_396_fc_weights2_address0,
        fc_weights2_ce0 => grp_fc_64u_12u_1u_s_fu_396_fc_weights2_ce0,
        fc_weights2_q0 => fc_weights2_q0);

    grp_dw_layer1_fu_410 : component dw_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dw_layer1_fu_410_ap_start,
        ap_done => grp_dw_layer1_fu_410_ap_done,
        ap_idle => grp_dw_layer1_fu_410_ap_idle,
        ap_ready => grp_dw_layer1_fu_410_ap_ready,
        in_stream_V_dout => data2dw1_V_dout,
        in_stream_V_empty_n => data2dw1_V_empty_n,
        in_stream_V_read => grp_dw_layer1_fu_410_in_stream_V_read,
        out_stream_V_din => grp_dw_layer1_fu_410_out_stream_V_din,
        out_stream_V_full_n => dw12pw1_V_full_n,
        out_stream_V_write => grp_dw_layer1_fu_410_out_stream_V_write,
        dw_weight1_2 => dw_weight1_2,
        dw_weight1_0 => dw_weight1_0,
        dw_weight1_1 => dw_weight1_1);

    grp_data_broadcaster_fu_426 : component data_broadcaster
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_data_broadcaster_fu_426_ap_start,
        ap_done => grp_data_broadcaster_fu_426_ap_done,
        ap_idle => grp_data_broadcaster_fu_426_ap_idle,
        ap_ready => grp_data_broadcaster_fu_426_ap_ready,
        data_in_TDATA => data_in_TDATA_int,
        data_in_TVALID => data_in_TVALID_int,
        data_in_TREADY => grp_data_broadcaster_fu_426_data_in_TREADY,
        data_in_TLAST => data_in_TLAST_int,
        keep_in_TDATA => keep_in_TDATA_int,
        keep_in_TVALID => keep_in_TVALID_int,
        keep_in_TREADY => grp_data_broadcaster_fu_426_keep_in_TREADY,
        keep_in_TLAST => keep_in_TLAST_int,
        data2dw1_V_din => grp_data_broadcaster_fu_426_data2dw1_V_din,
        data2dw1_V_full_n => data2dw1_V_full_n,
        data2dw1_V_write => grp_data_broadcaster_fu_426_data2dw1_V_write,
        keepout_V_din => grp_data_broadcaster_fu_426_keepout_V_din,
        keepout_V_full_n => keepout_V_full_n,
        keepout_V_write => grp_data_broadcaster_fu_426_keepout_V_write);

    grp_datastream_out_12u_s_fu_440 : component datastream_out_12u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_datastream_out_12u_s_fu_440_ap_start,
        ap_done => grp_datastream_out_12u_s_fu_440_ap_done,
        ap_idle => grp_datastream_out_12u_s_fu_440_ap_idle,
        ap_ready => grp_datastream_out_12u_s_fu_440_ap_ready,
        output_V_dout => output_V_dout,
        output_V_empty_n => output_V_empty_n,
        output_V_read => grp_datastream_out_12u_s_fu_440_output_V_read,
        data_out_TDATA => grp_datastream_out_12u_s_fu_440_data_out_TDATA,
        data_out_TVALID => grp_datastream_out_12u_s_fu_440_data_out_TVALID,
        data_out_TREADY => grp_datastream_out_12u_s_fu_440_data_out_TREADY,
        data_out_TLAST => grp_datastream_out_12u_s_fu_440_data_out_TLAST);

    data2dw1_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_data_broadcaster_fu_426_data2dw1_V_din,
        if_full_n => data2dw1_V_full_n,
        if_write => data2dw1_V_write,
        if_dout => data2dw1_V_dout,
        if_empty_n => data2dw1_V_empty_n,
        if_read => data2dw1_V_read);

    keepout_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_data_broadcaster_fu_426_keepout_V_din,
        if_full_n => keepout_V_full_n,
        if_write => keepout_V_write,
        if_dout => keepout_V_dout,
        if_empty_n => keepout_V_empty_n,
        if_read => keepout_V_read);

    dw12pw1_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_dw_layer1_fu_410_out_stream_V_din,
        if_full_n => dw12pw1_V_full_n,
        if_write => dw12pw1_V_write,
        if_dout => dw12pw1_V_dout,
        if_empty_n => dw12pw1_V_empty_n,
        if_read => dw12pw1_V_read);

    pw12gru_V_fifo_U : component fifo_w16_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_pw_layer1_fu_368_out_stream_V_din,
        if_full_n => pw12gru_V_full_n,
        if_write => pw12gru_V_write,
        if_dout => pw12gru_V_dout,
        if_empty_n => pw12gru_V_empty_n,
        if_read => pw12gru_V_read);

    gru2fc_V_fifo_U : component fifo_w16_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_grucell_fu_292_out_stream_V_din,
        if_full_n => gru2fc_V_full_n,
        if_write => gru2fc_V_write,
        if_dout => gru2fc_V_dout,
        if_empty_n => gru2fc_V_empty_n,
        if_read => gru2fc_V_read);

    fc2final_V_fifo_U : component fifo_w16_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fc_relu6_fu_382_out_stream_V_din,
        if_full_n => fc2final_V_full_n,
        if_write => fc2final_V_write,
        if_dout => fc2final_V_dout,
        if_empty_n => fc2final_V_empty_n,
        if_read => fc2final_V_read);

    output_V_fifo_U : component fifo_w16_d12_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fc_64u_12u_1u_s_fu_396_out_stream_V_din,
        if_full_n => output_V_full_n,
        if_write => output_V_write,
        if_dout => output_V_dout,
        if_empty_n => output_V_empty_n,
        if_read => output_V_read);

    regslice_both_data_in_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_in_TDATA,
        vld_in => data_in_TVALID,
        ack_in => regslice_both_data_in_V_data_U_ack_in,
        data_out => data_in_TDATA_int,
        vld_out => data_in_TVALID_int,
        ack_out => data_in_TREADY_int,
        apdone_blk => regslice_both_data_in_V_data_U_apdone_blk);

    regslice_both_w1_data_in_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_in_TLAST,
        vld_in => data_in_TVALID,
        ack_in => regslice_both_w1_data_in_V_last_U_ack_in,
        data_out => data_in_TLAST_int,
        vld_out => regslice_both_w1_data_in_V_last_U_vld_out,
        ack_out => data_in_TREADY_int,
        apdone_blk => regslice_both_w1_data_in_V_last_U_apdone_blk);

    regslice_both_weight_in_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weight_in_TDATA,
        vld_in => weight_in_TVALID,
        ack_in => regslice_both_weight_in_V_data_U_ack_in,
        data_out => weight_in_TDATA_int,
        vld_out => weight_in_TVALID_int,
        ack_out => weight_in_TREADY_int,
        apdone_blk => regslice_both_weight_in_V_data_U_apdone_blk);

    regslice_both_w1_weight_in_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weight_in_TLAST,
        vld_in => weight_in_TVALID,
        ack_in => regslice_both_w1_weight_in_V_last_U_ack_in,
        data_out => weight_in_TLAST_int,
        vld_out => regslice_both_w1_weight_in_V_last_U_vld_out,
        ack_out => weight_in_TREADY_int,
        apdone_blk => regslice_both_w1_weight_in_V_last_U_apdone_blk);

    regslice_both_control_in_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => control_in_TDATA,
        vld_in => control_in_TVALID,
        ack_in => regslice_both_control_in_V_data_U_ack_in,
        data_out => control_in_TDATA_int,
        vld_out => control_in_TVALID_int,
        ack_out => control_in_TREADY_int,
        apdone_blk => regslice_both_control_in_V_data_U_apdone_blk);

    regslice_both_w1_control_in_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => control_in_TLAST,
        vld_in => control_in_TVALID,
        ack_in => regslice_both_w1_control_in_V_last_U_ack_in,
        data_out => control_in_TLAST_int,
        vld_out => regslice_both_w1_control_in_V_last_U_vld_out,
        ack_out => control_in_TREADY_int,
        apdone_blk => regslice_both_w1_control_in_V_last_U_apdone_blk);

    regslice_both_keep_in_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => keep_in_TDATA,
        vld_in => keep_in_TVALID,
        ack_in => regslice_both_keep_in_V_data_U_ack_in,
        data_out => keep_in_TDATA_int,
        vld_out => keep_in_TVALID_int,
        ack_out => keep_in_TREADY_int,
        apdone_blk => regslice_both_keep_in_V_data_U_apdone_blk);

    regslice_both_w1_keep_in_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => keep_in_TLAST,
        vld_in => keep_in_TVALID,
        ack_in => regslice_both_w1_keep_in_V_last_U_ack_in,
        data_out => keep_in_TLAST_int,
        vld_out => regslice_both_w1_keep_in_V_last_U_vld_out,
        ack_out => keep_in_TREADY_int,
        apdone_blk => regslice_both_w1_keep_in_V_last_U_apdone_blk);

    regslice_both_data_out_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_datastream_out_12u_s_fu_440_data_out_TDATA,
        vld_in => grp_datastream_out_12u_s_fu_440_data_out_TVALID,
        ack_in => data_out_TREADY_int,
        data_out => data_out_TDATA,
        vld_out => regslice_both_data_out_V_data_U_vld_out,
        ack_out => data_out_TREADY,
        apdone_blk => regslice_both_data_out_V_data_U_apdone_blk);

    regslice_both_w1_data_out_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_datastream_out_12u_s_fu_440_data_out_TLAST,
        vld_in => grp_datastream_out_12u_s_fu_440_data_out_TVALID,
        ack_in => regslice_both_w1_data_out_V_last_U_ack_in_dummy,
        data_out => data_out_TLAST,
        vld_out => regslice_both_w1_data_out_V_last_U_vld_out,
        ack_out => data_out_TREADY,
        apdone_blk => regslice_both_w1_data_out_V_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_data_broadcaster_fu_426_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_data_broadcaster_fu_426_ap_start_reg <= ap_const_logic_0;
            else
                if (((control_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln73_fu_453_p2 = ap_const_lv1_0))) then 
                    grp_data_broadcaster_fu_426_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_data_broadcaster_fu_426_ap_ready = ap_const_logic_1)) then 
                    grp_data_broadcaster_fu_426_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_datastream_out_12u_s_fu_440_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_datastream_out_12u_s_fu_440_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_datastream_out_12u_s_fu_440_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_datastream_out_12u_s_fu_440_ap_ready = ap_const_logic_1)) then 
                    grp_datastream_out_12u_s_fu_440_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dw_layer1_fu_410_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dw_layer1_fu_410_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_dw_layer1_fu_410_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dw_layer1_fu_410_ap_ready = ap_const_logic_1)) then 
                    grp_dw_layer1_fu_410_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fc_64u_12u_1u_s_fu_396_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fc_64u_12u_1u_s_fu_396_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_fc_64u_12u_1u_s_fu_396_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fc_64u_12u_1u_s_fu_396_ap_ready = ap_const_logic_1)) then 
                    grp_fc_64u_12u_1u_s_fu_396_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fc_relu6_fu_382_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fc_relu6_fu_382_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_fc_relu6_fu_382_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fc_relu6_fu_382_ap_ready = ap_const_logic_1)) then 
                    grp_fc_relu6_fu_382_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_grucell_fu_292_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_grucell_fu_292_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_grucell_fu_292_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_grucell_fu_292_ap_ready = ap_const_logic_1)) then 
                    grp_grucell_fu_292_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pw_layer1_fu_368_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pw_layer1_fu_368_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_pw_layer1_fu_368_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pw_layer1_fu_368_ap_ready = ap_const_logic_1)) then 
                    grp_pw_layer1_fu_368_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_weight_loader_fu_327_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_weight_loader_fu_327_ap_start_reg <= ap_const_logic_0;
            else
                if (((control_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln73_fu_453_p2 = ap_const_lv1_1))) then 
                    grp_weight_loader_fu_327_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_weight_loader_fu_327_ap_ready = ap_const_logic_1)) then 
                    grp_weight_loader_fu_327_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_weight_loader_fu_327_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                dw_weight1_0 <= grp_weight_loader_fu_327_ap_return_0;
                dw_weight1_1 <= grp_weight_loader_fu_327_ap_return_1;
                dw_weight1_2 <= grp_weight_loader_fu_327_ap_return_2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln73_fu_453_p2, grp_grucell_fu_292_ap_done, grp_weight_loader_fu_327_ap_done, grp_pw_layer1_fu_368_ap_done, grp_fc_relu6_fu_382_ap_done, grp_fc_64u_12u_1u_s_fu_396_ap_done, grp_dw_layer1_fu_410_ap_done, grp_data_broadcaster_fu_426_ap_done, grp_datastream_out_12u_s_fu_440_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state14, ap_CS_fsm_state16, regslice_both_data_out_V_data_U_apdone_blk, control_in_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((control_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln73_fu_453_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((control_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln73_fu_453_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_data_broadcaster_fu_426_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_dw_layer1_fu_410_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_pw_layer1_fu_368_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_grucell_fu_292_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_fc_relu6_fu_382_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_fc_64u_12u_1u_s_fu_396_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_datastream_out_12u_s_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((grp_weight_loader_fu_327_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((regslice_both_data_out_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    bias_h_address0_assign_proc : process(grp_grucell_fu_292_bias_h_address0, grp_weight_loader_fu_327_bias_h_address0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bias_h_address0 <= grp_weight_loader_fu_327_bias_h_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bias_h_address0 <= grp_grucell_fu_292_bias_h_address0;
        else 
            bias_h_address0 <= "XXXXXX";
        end if; 
    end process;


    bias_h_ce0_assign_proc : process(grp_grucell_fu_292_bias_h_ce0, grp_weight_loader_fu_327_bias_h_ce0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bias_h_ce0 <= grp_weight_loader_fu_327_bias_h_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bias_h_ce0 <= grp_grucell_fu_292_bias_h_ce0;
        else 
            bias_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_h_we0_assign_proc : process(grp_weight_loader_fu_327_bias_h_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bias_h_we0 <= grp_weight_loader_fu_327_bias_h_we0;
        else 
            bias_h_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_r_address0_assign_proc : process(grp_grucell_fu_292_bias_r_address0, grp_weight_loader_fu_327_bias_r_address0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bias_r_address0 <= grp_weight_loader_fu_327_bias_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bias_r_address0 <= grp_grucell_fu_292_bias_r_address0;
        else 
            bias_r_address0 <= "XXXXXX";
        end if; 
    end process;


    bias_r_ce0_assign_proc : process(grp_grucell_fu_292_bias_r_ce0, grp_weight_loader_fu_327_bias_r_ce0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bias_r_ce0 <= grp_weight_loader_fu_327_bias_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bias_r_ce0 <= grp_grucell_fu_292_bias_r_ce0;
        else 
            bias_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_r_we0_assign_proc : process(grp_weight_loader_fu_327_bias_r_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bias_r_we0 <= grp_weight_loader_fu_327_bias_r_we0;
        else 
            bias_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_z_address0_assign_proc : process(grp_grucell_fu_292_bias_z_address0, grp_weight_loader_fu_327_bias_z_address0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bias_z_address0 <= grp_weight_loader_fu_327_bias_z_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bias_z_address0 <= grp_grucell_fu_292_bias_z_address0;
        else 
            bias_z_address0 <= "XXXXXX";
        end if; 
    end process;


    bias_z_ce0_assign_proc : process(grp_grucell_fu_292_bias_z_ce0, grp_weight_loader_fu_327_bias_z_ce0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bias_z_ce0 <= grp_weight_loader_fu_327_bias_z_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bias_z_ce0 <= grp_grucell_fu_292_bias_z_ce0;
        else 
            bias_z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_z_we0_assign_proc : process(grp_weight_loader_fu_327_bias_z_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bias_z_we0 <= grp_weight_loader_fu_327_bias_z_we0;
        else 
            bias_z_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bn_bias1_address0_assign_proc : process(grp_weight_loader_fu_327_bn_bias1_address0, grp_pw_layer1_fu_368_bn_bias1_address0, ap_CS_fsm_state15, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bn_bias1_address0 <= grp_pw_layer1_fu_368_bn_bias1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bn_bias1_address0 <= grp_weight_loader_fu_327_bn_bias1_address0;
        else 
            bn_bias1_address0 <= "XXXX";
        end if; 
    end process;


    bn_bias1_ce0_assign_proc : process(grp_weight_loader_fu_327_bn_bias1_ce0, grp_pw_layer1_fu_368_bn_bias1_ce0, ap_CS_fsm_state15, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bn_bias1_ce0 <= grp_pw_layer1_fu_368_bn_bias1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bn_bias1_ce0 <= grp_weight_loader_fu_327_bn_bias1_ce0;
        else 
            bn_bias1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bn_bias1_we0_assign_proc : process(grp_weight_loader_fu_327_bn_bias1_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bn_bias1_we0 <= grp_weight_loader_fu_327_bn_bias1_we0;
        else 
            bn_bias1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    control_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, control_in_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            control_in_TDATA_blk_n <= control_in_TVALID_int;
        else 
            control_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    control_in_TREADY_assign_proc : process(control_in_TVALID, regslice_both_control_in_V_data_U_ack_in)
    begin
        if (((regslice_both_control_in_V_data_U_ack_in = ap_const_logic_1) and (control_in_TVALID = ap_const_logic_1))) then 
            control_in_TREADY <= ap_const_logic_1;
        else 
            control_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    control_in_TREADY_int_assign_proc : process(ap_CS_fsm_state1, control_in_TVALID_int)
    begin
        if (((control_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            control_in_TREADY_int <= ap_const_logic_1;
        else 
            control_in_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    data2dw1_V_read_assign_proc : process(grp_dw_layer1_fu_410_in_stream_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data2dw1_V_read <= grp_dw_layer1_fu_410_in_stream_V_read;
        else 
            data2dw1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data2dw1_V_write_assign_proc : process(grp_data_broadcaster_fu_426_data2dw1_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data2dw1_V_write <= grp_data_broadcaster_fu_426_data2dw1_V_write;
        else 
            data2dw1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    data_in_TREADY_assign_proc : process(data_in_TVALID, regslice_both_data_in_V_data_U_ack_in)
    begin
        if (((regslice_both_data_in_V_data_U_ack_in = ap_const_logic_1) and (data_in_TVALID = ap_const_logic_1))) then 
            data_in_TREADY <= ap_const_logic_1;
        else 
            data_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_in_TREADY_int_assign_proc : process(grp_data_broadcaster_fu_426_data_in_TREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_in_TREADY_int <= grp_data_broadcaster_fu_426_data_in_TREADY;
        else 
            data_in_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    data_out_TVALID <= regslice_both_data_out_V_data_U_vld_out;

    dw12pw1_V_read_assign_proc : process(grp_pw_layer1_fu_368_in_stream_V_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dw12pw1_V_read <= grp_pw_layer1_fu_368_in_stream_V_read;
        else 
            dw12pw1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    dw12pw1_V_write_assign_proc : process(grp_dw_layer1_fu_410_out_stream_V_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dw12pw1_V_write <= grp_dw_layer1_fu_410_out_stream_V_write;
        else 
            dw12pw1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    fc2final_V_read_assign_proc : process(grp_fc_64u_12u_1u_s_fu_396_in_stream_V_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc2final_V_read <= grp_fc_64u_12u_1u_s_fu_396_in_stream_V_read;
        else 
            fc2final_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fc2final_V_write_assign_proc : process(grp_fc_relu6_fu_382_out_stream_V_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc2final_V_write <= grp_fc_relu6_fu_382_out_stream_V_write;
        else 
            fc2final_V_write <= ap_const_logic_0;
        end if; 
    end process;


    fc_bias1_address0_assign_proc : process(grp_weight_loader_fu_327_fc_bias1_address0, grp_fc_relu6_fu_382_fc_bias1_address0, ap_CS_fsm_state15, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_bias1_address0 <= grp_fc_relu6_fu_382_fc_bias1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_bias1_address0 <= grp_weight_loader_fu_327_fc_bias1_address0;
        else 
            fc_bias1_address0 <= "XXXXXX";
        end if; 
    end process;


    fc_bias1_ce0_assign_proc : process(grp_weight_loader_fu_327_fc_bias1_ce0, grp_fc_relu6_fu_382_fc_bias1_ce0, ap_CS_fsm_state15, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_bias1_ce0 <= grp_fc_relu6_fu_382_fc_bias1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_bias1_ce0 <= grp_weight_loader_fu_327_fc_bias1_ce0;
        else 
            fc_bias1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_bias1_we0_assign_proc : process(grp_weight_loader_fu_327_fc_bias1_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_bias1_we0 <= grp_weight_loader_fu_327_fc_bias1_we0;
        else 
            fc_bias1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_bias2_address0_assign_proc : process(grp_weight_loader_fu_327_fc_bias2_address0, grp_fc_64u_12u_1u_s_fu_396_fc_bias2_address0, ap_CS_fsm_state15, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_bias2_address0 <= grp_fc_64u_12u_1u_s_fu_396_fc_bias2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_bias2_address0 <= grp_weight_loader_fu_327_fc_bias2_address0;
        else 
            fc_bias2_address0 <= "XXXX";
        end if; 
    end process;


    fc_bias2_ce0_assign_proc : process(grp_weight_loader_fu_327_fc_bias2_ce0, grp_fc_64u_12u_1u_s_fu_396_fc_bias2_ce0, ap_CS_fsm_state15, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_bias2_ce0 <= grp_fc_64u_12u_1u_s_fu_396_fc_bias2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_bias2_ce0 <= grp_weight_loader_fu_327_fc_bias2_ce0;
        else 
            fc_bias2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_bias2_we0_assign_proc : process(grp_weight_loader_fu_327_fc_bias2_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_bias2_we0 <= grp_weight_loader_fu_327_fc_bias2_we0;
        else 
            fc_bias2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_weights1_address0_assign_proc : process(grp_weight_loader_fu_327_fc_weights1_address0, grp_fc_relu6_fu_382_fc_weights1_address0, ap_CS_fsm_state15, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_weights1_address0 <= grp_fc_relu6_fu_382_fc_weights1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_weights1_address0 <= grp_weight_loader_fu_327_fc_weights1_address0;
        else 
            fc_weights1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    fc_weights1_ce0_assign_proc : process(grp_weight_loader_fu_327_fc_weights1_ce0, grp_fc_relu6_fu_382_fc_weights1_ce0, ap_CS_fsm_state15, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_weights1_ce0 <= grp_fc_relu6_fu_382_fc_weights1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_weights1_ce0 <= grp_weight_loader_fu_327_fc_weights1_ce0;
        else 
            fc_weights1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_weights1_we0_assign_proc : process(grp_weight_loader_fu_327_fc_weights1_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_weights1_we0 <= grp_weight_loader_fu_327_fc_weights1_we0;
        else 
            fc_weights1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_weights2_address0_assign_proc : process(grp_weight_loader_fu_327_fc_weights2_address0, grp_fc_64u_12u_1u_s_fu_396_fc_weights2_address0, ap_CS_fsm_state15, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_weights2_address0 <= grp_fc_64u_12u_1u_s_fu_396_fc_weights2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_weights2_address0 <= grp_weight_loader_fu_327_fc_weights2_address0;
        else 
            fc_weights2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    fc_weights2_ce0_assign_proc : process(grp_weight_loader_fu_327_fc_weights2_ce0, grp_fc_64u_12u_1u_s_fu_396_fc_weights2_ce0, ap_CS_fsm_state15, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_weights2_ce0 <= grp_fc_64u_12u_1u_s_fu_396_fc_weights2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_weights2_ce0 <= grp_weight_loader_fu_327_fc_weights2_ce0;
        else 
            fc_weights2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_weights2_we0_assign_proc : process(grp_weight_loader_fu_327_fc_weights2_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc_weights2_we0 <= grp_weight_loader_fu_327_fc_weights2_we0;
        else 
            fc_weights2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_data_broadcaster_fu_426_ap_start <= grp_data_broadcaster_fu_426_ap_start_reg;
    grp_datastream_out_12u_s_fu_440_ap_start <= grp_datastream_out_12u_s_fu_440_ap_start_reg;
    grp_datastream_out_12u_s_fu_440_data_out_TREADY <= (data_out_TREADY_int and ap_CS_fsm_state14);
    grp_dw_layer1_fu_410_ap_start <= grp_dw_layer1_fu_410_ap_start_reg;
    grp_fc_64u_12u_1u_s_fu_396_ap_start <= grp_fc_64u_12u_1u_s_fu_396_ap_start_reg;
    grp_fc_relu6_fu_382_ap_start <= grp_fc_relu6_fu_382_ap_start_reg;
    grp_grucell_fu_292_ap_start <= grp_grucell_fu_292_ap_start_reg;
    grp_pw_layer1_fu_368_ap_start <= grp_pw_layer1_fu_368_ap_start_reg;
    grp_weight_loader_fu_327_ap_start <= grp_weight_loader_fu_327_ap_start_reg;

    gru2fc_V_read_assign_proc : process(grp_fc_relu6_fu_382_in_stream_V_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gru2fc_V_read <= grp_fc_relu6_fu_382_in_stream_V_read;
        else 
            gru2fc_V_read <= ap_const_logic_0;
        end if; 
    end process;


    gru2fc_V_write_assign_proc : process(grp_grucell_fu_292_out_stream_V_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            gru2fc_V_write <= grp_grucell_fu_292_out_stream_V_write;
        else 
            gru2fc_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln73_fu_453_p2 <= "1" when (control_in_TDATA_int = ap_const_lv32_0) else "0";

    keep_in_TREADY_assign_proc : process(keep_in_TVALID, regslice_both_keep_in_V_data_U_ack_in)
    begin
        if (((regslice_both_keep_in_V_data_U_ack_in = ap_const_logic_1) and (keep_in_TVALID = ap_const_logic_1))) then 
            keep_in_TREADY <= ap_const_logic_1;
        else 
            keep_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    keep_in_TREADY_int_assign_proc : process(grp_data_broadcaster_fu_426_keep_in_TREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            keep_in_TREADY_int <= grp_data_broadcaster_fu_426_keep_in_TREADY;
        else 
            keep_in_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    keepout_V_read_assign_proc : process(grp_grucell_fu_292_keep_stream_V_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            keepout_V_read <= grp_grucell_fu_292_keep_stream_V_read;
        else 
            keepout_V_read <= ap_const_logic_0;
        end if; 
    end process;


    keepout_V_write_assign_proc : process(grp_data_broadcaster_fu_426_keepout_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            keepout_V_write <= grp_data_broadcaster_fu_426_keepout_V_write;
        else 
            keepout_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_V_read_assign_proc : process(grp_datastream_out_12u_s_fu_440_output_V_read, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_V_read <= grp_datastream_out_12u_s_fu_440_output_V_read;
        else 
            output_V_read <= ap_const_logic_0;
        end if; 
    end process;


    output_V_write_assign_proc : process(grp_fc_64u_12u_1u_s_fu_396_out_stream_V_write, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_V_write <= grp_fc_64u_12u_1u_s_fu_396_out_stream_V_write;
        else 
            output_V_write <= ap_const_logic_0;
        end if; 
    end process;


    pw12gru_V_read_assign_proc : process(grp_grucell_fu_292_in_stream_V_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pw12gru_V_read <= grp_grucell_fu_292_in_stream_V_read;
        else 
            pw12gru_V_read <= ap_const_logic_0;
        end if; 
    end process;


    pw12gru_V_write_assign_proc : process(grp_pw_layer1_fu_368_out_stream_V_write, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pw12gru_V_write <= grp_pw_layer1_fu_368_out_stream_V_write;
        else 
            pw12gru_V_write <= ap_const_logic_0;
        end if; 
    end process;


    pw_weight1_address0_assign_proc : process(grp_weight_loader_fu_327_pw_weight1_address0, grp_pw_layer1_fu_368_pw_weight1_address0, ap_CS_fsm_state15, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pw_weight1_address0 <= grp_pw_layer1_fu_368_pw_weight1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pw_weight1_address0 <= grp_weight_loader_fu_327_pw_weight1_address0;
        else 
            pw_weight1_address0 <= "XXXX";
        end if; 
    end process;


    pw_weight1_ce0_assign_proc : process(grp_weight_loader_fu_327_pw_weight1_ce0, grp_pw_layer1_fu_368_pw_weight1_ce0, ap_CS_fsm_state15, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pw_weight1_ce0 <= grp_pw_layer1_fu_368_pw_weight1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pw_weight1_ce0 <= grp_weight_loader_fu_327_pw_weight1_ce0;
        else 
            pw_weight1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pw_weight1_we0_assign_proc : process(grp_weight_loader_fu_327_pw_weight1_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pw_weight1_we0 <= grp_weight_loader_fu_327_pw_weight1_we0;
        else 
            pw_weight1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_in_TREADY_assign_proc : process(weight_in_TVALID, regslice_both_weight_in_V_data_U_ack_in)
    begin
        if (((regslice_both_weight_in_V_data_U_ack_in = ap_const_logic_1) and (weight_in_TVALID = ap_const_logic_1))) then 
            weight_in_TREADY <= ap_const_logic_1;
        else 
            weight_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    weight_in_TREADY_int_assign_proc : process(grp_weight_loader_fu_327_weight_in_TREADY, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weight_in_TREADY_int <= grp_weight_loader_fu_327_weight_in_TREADY;
        else 
            weight_in_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    weights_hu_address0_assign_proc : process(grp_grucell_fu_292_weights_hu_address0, grp_weight_loader_fu_327_weights_hu_address0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_hu_address0 <= grp_weight_loader_fu_327_weights_hu_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_hu_address0 <= grp_grucell_fu_292_weights_hu_address0;
        else 
            weights_hu_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    weights_hu_ce0_assign_proc : process(grp_grucell_fu_292_weights_hu_ce0, grp_weight_loader_fu_327_weights_hu_ce0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_hu_ce0 <= grp_weight_loader_fu_327_weights_hu_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_hu_ce0 <= grp_grucell_fu_292_weights_hu_ce0;
        else 
            weights_hu_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_hu_we0_assign_proc : process(grp_weight_loader_fu_327_weights_hu_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_hu_we0 <= grp_weight_loader_fu_327_weights_hu_we0;
        else 
            weights_hu_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_hw_address0_assign_proc : process(grp_grucell_fu_292_weights_hw_address0, grp_weight_loader_fu_327_weights_hw_address0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_hw_address0 <= grp_weight_loader_fu_327_weights_hw_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_hw_address0 <= grp_grucell_fu_292_weights_hw_address0;
        else 
            weights_hw_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_hw_ce0_assign_proc : process(grp_grucell_fu_292_weights_hw_ce0, grp_weight_loader_fu_327_weights_hw_ce0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_hw_ce0 <= grp_weight_loader_fu_327_weights_hw_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_hw_ce0 <= grp_grucell_fu_292_weights_hw_ce0;
        else 
            weights_hw_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_hw_we0_assign_proc : process(grp_weight_loader_fu_327_weights_hw_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_hw_we0 <= grp_weight_loader_fu_327_weights_hw_we0;
        else 
            weights_hw_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_ru_address0_assign_proc : process(grp_grucell_fu_292_weights_ru_address0, grp_weight_loader_fu_327_weights_ru_address0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_ru_address0 <= grp_weight_loader_fu_327_weights_ru_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_ru_address0 <= grp_grucell_fu_292_weights_ru_address0;
        else 
            weights_ru_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    weights_ru_ce0_assign_proc : process(grp_grucell_fu_292_weights_ru_ce0, grp_weight_loader_fu_327_weights_ru_ce0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_ru_ce0 <= grp_weight_loader_fu_327_weights_ru_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_ru_ce0 <= grp_grucell_fu_292_weights_ru_ce0;
        else 
            weights_ru_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_ru_we0_assign_proc : process(grp_weight_loader_fu_327_weights_ru_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_ru_we0 <= grp_weight_loader_fu_327_weights_ru_we0;
        else 
            weights_ru_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_rw_address0_assign_proc : process(grp_grucell_fu_292_weights_rw_address0, grp_weight_loader_fu_327_weights_rw_address0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_rw_address0 <= grp_weight_loader_fu_327_weights_rw_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_rw_address0 <= grp_grucell_fu_292_weights_rw_address0;
        else 
            weights_rw_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_rw_ce0_assign_proc : process(grp_grucell_fu_292_weights_rw_ce0, grp_weight_loader_fu_327_weights_rw_ce0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_rw_ce0 <= grp_weight_loader_fu_327_weights_rw_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_rw_ce0 <= grp_grucell_fu_292_weights_rw_ce0;
        else 
            weights_rw_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_rw_we0_assign_proc : process(grp_weight_loader_fu_327_weights_rw_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_rw_we0 <= grp_weight_loader_fu_327_weights_rw_we0;
        else 
            weights_rw_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_zu_address0_assign_proc : process(grp_grucell_fu_292_weights_zu_address0, grp_weight_loader_fu_327_weights_zu_address0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_zu_address0 <= grp_weight_loader_fu_327_weights_zu_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_zu_address0 <= grp_grucell_fu_292_weights_zu_address0;
        else 
            weights_zu_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    weights_zu_ce0_assign_proc : process(grp_grucell_fu_292_weights_zu_ce0, grp_weight_loader_fu_327_weights_zu_ce0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_zu_ce0 <= grp_weight_loader_fu_327_weights_zu_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_zu_ce0 <= grp_grucell_fu_292_weights_zu_ce0;
        else 
            weights_zu_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_zu_we0_assign_proc : process(grp_weight_loader_fu_327_weights_zu_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_zu_we0 <= grp_weight_loader_fu_327_weights_zu_we0;
        else 
            weights_zu_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_zw_address0_assign_proc : process(grp_grucell_fu_292_weights_zw_address0, grp_weight_loader_fu_327_weights_zw_address0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_zw_address0 <= grp_weight_loader_fu_327_weights_zw_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_zw_address0 <= grp_grucell_fu_292_weights_zw_address0;
        else 
            weights_zw_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_zw_ce0_assign_proc : process(grp_grucell_fu_292_weights_zw_ce0, grp_weight_loader_fu_327_weights_zw_ce0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_zw_ce0 <= grp_weight_loader_fu_327_weights_zw_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_zw_ce0 <= grp_grucell_fu_292_weights_zw_ce0;
        else 
            weights_zw_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_zw_we0_assign_proc : process(grp_weight_loader_fu_327_weights_zw_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            weights_zw_we0 <= grp_weight_loader_fu_327_weights_zw_we0;
        else 
            weights_zw_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
