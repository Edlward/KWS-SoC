-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dw_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_stream_V_empty_n : IN STD_LOGIC;
    in_stream_V_read : OUT STD_LOGIC;
    out_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_stream_V_full_n : IN STD_LOGIC;
    out_stream_V_write : OUT STD_LOGIC;
    dw_weight1_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    dw_weight1_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    dw_weight1_1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dw_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_4_ce0 : STD_LOGIC;
    signal x_4_we0 : STD_LOGIC;
    signal x_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_ce0 : STD_LOGIC;
    signal y_3_we0 : STD_LOGIC;
    signal y_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_3_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_ce1 : STD_LOGIC;
    signal y_3_we1 : STD_LOGIC;
    signal y_3_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln26_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln46_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_0_reg_173 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_196 : STD_LOGIC_VECTOR (4 downto 0);
    signal kw_0_reg_207 : STD_LOGIC_VECTOR (1 downto 0);
    signal ow1_0_reg_218 : STD_LOGIC_VECTOR (3 downto 0);
    signal ow2_0_reg_229 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln26_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w_fu_254_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_433 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ow_fu_271_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln38_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state7_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln38_reg_464_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_464_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_464_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_464_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_464_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_464_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_464_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_464_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_464_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_464_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_fu_325_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln38_1_fu_351_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln38_1_reg_473 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln38_2_fu_382_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln38_2_reg_478 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln38_2_reg_478_pp2_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal y_3_addr_2_reg_488 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_addr_2_reg_488_pp2_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_addr_2_reg_488_pp2_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_addr_2_reg_488_pp2_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_addr_2_reg_488_pp2_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_addr_2_reg_488_pp2_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_addr_2_reg_488_pp2_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_addr_2_reg_488_pp2_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_addr_2_reg_488_pp2_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_addr_2_reg_488_pp2_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_addr_2_reg_488_pp2_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ow_1_fu_406_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_4_load_reg_499 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_504 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_3_load_reg_509 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_514 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln46_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state20_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ow_2_fu_418_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state20 : STD_LOGIC;
    signal ap_phi_mux_w_0_phi_fu_177_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ow_0_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln32_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_phi_mux_kw_0_phi_fu_211_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln29_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal icmp_ln7_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_fu_300_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln39_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kw_fu_331_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln7_2_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_2_fu_369_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln7_3_fu_375_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln7_1_fu_312_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln38_fu_359_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln38_fu_343_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln41_fu_390_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component kws_hadd_16ns_16ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kws_hmul_16ns_16ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dw_layer1_x_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dw_layer1_y_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    x_4_U : component dw_layer1_x_4
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_4_address0,
        ce0 => x_4_ce0,
        we0 => x_4_we0,
        d0 => in_stream_V_dout,
        q0 => x_4_q0);

    y_3_U : component dw_layer1_y_3
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_3_address0,
        ce0 => y_3_ce0,
        we0 => y_3_we0,
        d0 => ap_const_lv16_0,
        q0 => y_3_q0,
        address1 => y_3_address1,
        ce1 => y_3_ce1,
        we1 => y_3_we1,
        d1 => tmp_s_reg_514,
        q1 => y_3_q1);

    kws_hadd_16ns_16ncud_U9 : component kws_hadd_16ns_16ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_3_load_reg_509,
        din1 => tmp_1_reg_504,
        ce => ap_const_logic_1,
        dout => grp_fu_240_p2);

    kws_hmul_16ns_16ndEe_U10 : component kws_hmul_16ns_16ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_4_load_reg_499,
        din1 => select_ln38_2_reg_478_pp2_iter1_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_244_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state20))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state20))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state20);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_319_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten_reg_196 <= add_ln38_fu_325_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_196 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    kw_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                kw_0_reg_207 <= select_ln38_1_reg_473;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                kw_0_reg_207 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ow1_0_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_319_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                ow1_0_reg_218 <= ow_1_fu_406_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ow1_0_reg_218 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ow2_0_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                ow2_0_reg_229 <= ap_const_lv4_0;
            elsif (((icmp_ln46_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
                ow2_0_reg_229 <= ow_2_fu_418_p2;
            end if; 
        end if;
    end process;

    ow_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ow_0_reg_185 <= ap_const_lv4_0;
            elsif (((icmp_ln32_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ow_0_reg_185 <= ow_fu_271_p2;
            end if; 
        end if;
    end process;

    w_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_429 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_0_reg_173 <= w_reg_433;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_0_reg_173 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln26_reg_429 <= icmp_ln26_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln38_reg_464 <= icmp_ln38_fu_319_p2;
                icmp_ln38_reg_464_pp2_iter1_reg <= icmp_ln38_reg_464;
                select_ln38_2_reg_478_pp2_iter1_reg <= select_ln38_2_reg_478;
                y_3_addr_2_reg_488_pp2_iter1_reg <= y_3_addr_2_reg_488;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln38_reg_464_pp2_iter10_reg <= icmp_ln38_reg_464_pp2_iter9_reg;
                icmp_ln38_reg_464_pp2_iter2_reg <= icmp_ln38_reg_464_pp2_iter1_reg;
                icmp_ln38_reg_464_pp2_iter3_reg <= icmp_ln38_reg_464_pp2_iter2_reg;
                icmp_ln38_reg_464_pp2_iter4_reg <= icmp_ln38_reg_464_pp2_iter3_reg;
                icmp_ln38_reg_464_pp2_iter5_reg <= icmp_ln38_reg_464_pp2_iter4_reg;
                icmp_ln38_reg_464_pp2_iter6_reg <= icmp_ln38_reg_464_pp2_iter5_reg;
                icmp_ln38_reg_464_pp2_iter7_reg <= icmp_ln38_reg_464_pp2_iter6_reg;
                icmp_ln38_reg_464_pp2_iter8_reg <= icmp_ln38_reg_464_pp2_iter7_reg;
                icmp_ln38_reg_464_pp2_iter9_reg <= icmp_ln38_reg_464_pp2_iter8_reg;
                y_3_addr_2_reg_488_pp2_iter10_reg <= y_3_addr_2_reg_488_pp2_iter9_reg;
                y_3_addr_2_reg_488_pp2_iter2_reg <= y_3_addr_2_reg_488_pp2_iter1_reg;
                y_3_addr_2_reg_488_pp2_iter3_reg <= y_3_addr_2_reg_488_pp2_iter2_reg;
                y_3_addr_2_reg_488_pp2_iter4_reg <= y_3_addr_2_reg_488_pp2_iter3_reg;
                y_3_addr_2_reg_488_pp2_iter5_reg <= y_3_addr_2_reg_488_pp2_iter4_reg;
                y_3_addr_2_reg_488_pp2_iter6_reg <= y_3_addr_2_reg_488_pp2_iter5_reg;
                y_3_addr_2_reg_488_pp2_iter7_reg <= y_3_addr_2_reg_488_pp2_iter6_reg;
                y_3_addr_2_reg_488_pp2_iter8_reg <= y_3_addr_2_reg_488_pp2_iter7_reg;
                y_3_addr_2_reg_488_pp2_iter9_reg <= y_3_addr_2_reg_488_pp2_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln46_reg_519 <= icmp_ln46_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_319_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln38_1_reg_473 <= select_ln38_1_fu_351_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln38_2_reg_478 <= select_ln38_2_fu_382_p3;
                y_3_addr_2_reg_488 <= zext_ln42_fu_401_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_reg_464_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_1_reg_504 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_reg_464_pp2_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_s_reg_514 <= grp_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                w_reg_433 <= w_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_reg_464 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                x_4_load_reg_499 <= x_4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_reg_464_pp2_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                y_3_load_reg_509 <= y_3_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln26_fu_248_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, icmp_ln38_fu_319_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, icmp_ln46_fu_412_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_block_pp3_stage0_subdone, icmp_ln32_fu_265_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln26_fu_248_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln26_fu_248_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln32_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln38_fu_319_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln38_fu_319_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln46_fu_412_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln46_fu_412_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln38_fu_325_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_196) + unsigned(ap_const_lv5_1));
    add_ln41_fu_390_p2 <= std_logic_vector(unsigned(zext_ln38_fu_359_p1) + unsigned(select_ln38_fu_343_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(6);
    ap_CS_fsm_state22 <= ap_CS_fsm(8);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln26_reg_429)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln26_reg_429 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln26_reg_429)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln26_reg_429 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln46_reg_519)
    begin
                ap_block_pp3_stage0_01001 <= ((icmp_ln46_reg_519 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln46_reg_519)
    begin
                ap_block_pp3_stage0_11001 <= ((icmp_ln46_reg_519 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter1, icmp_ln46_reg_519)
    begin
                ap_block_pp3_stage0_subdone <= ((icmp_ln46_reg_519 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_state10_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp3_stage0_iter1_assign_proc : process(out_stream_V_full_n, icmp_ln46_reg_519)
    begin
                ap_block_state21_pp3_stage0_iter1 <= ((icmp_ln46_reg_519 = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_stream_V_empty_n, icmp_ln26_reg_429)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln26_reg_429 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state7_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln26_fu_248_p2)
    begin
        if ((icmp_ln26_fu_248_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state7_assign_proc : process(icmp_ln38_fu_319_p2)
    begin
        if ((icmp_ln38_fu_319_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state20_assign_proc : process(icmp_ln46_fu_412_p2)
    begin
        if ((icmp_ln46_fu_412_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11)
    begin
        if (((ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_kw_0_phi_fu_211_p4_assign_proc : process(kw_0_reg_207, icmp_ln38_reg_464, ap_CS_fsm_pp2_stage0, select_ln38_1_reg_473, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln38_reg_464 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_kw_0_phi_fu_211_p4 <= select_ln38_1_reg_473;
        else 
            ap_phi_mux_kw_0_phi_fu_211_p4 <= kw_0_reg_207;
        end if; 
    end process;


    ap_phi_mux_w_0_phi_fu_177_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln26_reg_429, w_0_reg_173, w_reg_433)
    begin
        if (((icmp_ln26_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_w_0_phi_fu_177_p4 <= w_reg_433;
        else 
            ap_phi_mux_w_0_phi_fu_177_p4 <= w_0_reg_173;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln26_fu_248_p2 <= "1" when (ap_phi_mux_w_0_phi_fu_177_p4 = ap_const_lv4_A) else "0";
    icmp_ln32_fu_265_p2 <= "1" when (ow_0_reg_185 = ap_const_lv4_8) else "0";
    icmp_ln38_fu_319_p2 <= "1" when (indvar_flatten_reg_196 = ap_const_lv5_18) else "0";
    icmp_ln39_fu_337_p2 <= "1" when (ow1_0_reg_218 = ap_const_lv4_8) else "0";
    icmp_ln46_fu_412_p2 <= "1" when (ow2_0_reg_229 = ap_const_lv4_8) else "0";
    icmp_ln7_1_fu_306_p2 <= "1" when (ap_phi_mux_kw_0_phi_fu_211_p4 = ap_const_lv2_1) else "0";
    icmp_ln7_2_fu_363_p2 <= "1" when (kw_fu_331_p2 = ap_const_lv2_0) else "0";
    icmp_ln7_fu_294_p2 <= "1" when (ap_phi_mux_kw_0_phi_fu_211_p4 = ap_const_lv2_0) else "0";

    in_stream_V_blk_n_assign_proc : process(in_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln26_reg_429)
    begin
        if (((icmp_ln26_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_V_blk_n <= in_stream_V_empty_n;
        else 
            in_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln26_reg_429, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln26_reg_429 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_stream_V_read <= ap_const_logic_1;
        else 
            in_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    kw_fu_331_p2 <= std_logic_vector(unsigned(ap_phi_mux_kw_0_phi_fu_211_p4) + unsigned(ap_const_lv2_1));

    out_stream_V_blk_n_assign_proc : process(out_stream_V_full_n, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln46_reg_519)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln46_reg_519 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            out_stream_V_blk_n <= out_stream_V_full_n;
        else 
            out_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_din <= y_3_q1;

    out_stream_V_write_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln46_reg_519, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln46_reg_519 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            out_stream_V_write <= ap_const_logic_1;
        else 
            out_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    ow_1_fu_406_p2 <= std_logic_vector(unsigned(select_ln38_fu_343_p3) + unsigned(ap_const_lv4_1));
    ow_2_fu_418_p2 <= std_logic_vector(unsigned(ow2_0_reg_229) + unsigned(ap_const_lv4_1));
    ow_fu_271_p2 <= std_logic_vector(unsigned(ow_0_reg_185) + unsigned(ap_const_lv4_1));
    select_ln38_1_fu_351_p3 <= 
        kw_fu_331_p2 when (icmp_ln39_fu_337_p2(0) = '1') else 
        ap_phi_mux_kw_0_phi_fu_211_p4;
    select_ln38_2_fu_382_p3 <= 
        select_ln7_3_fu_375_p3 when (icmp_ln39_fu_337_p2(0) = '1') else 
        select_ln7_1_fu_312_p3;
    select_ln38_fu_343_p3 <= 
        ap_const_lv4_0 when (icmp_ln39_fu_337_p2(0) = '1') else 
        ow1_0_reg_218;
    select_ln7_1_fu_312_p3 <= 
        dw_weight1_1 when (icmp_ln7_1_fu_306_p2(0) = '1') else 
        select_ln7_fu_300_p3;
    select_ln7_2_fu_369_p3 <= 
        dw_weight1_0 when (icmp_ln7_2_fu_363_p2(0) = '1') else 
        dw_weight1_2;
    select_ln7_3_fu_375_p3 <= 
        dw_weight1_1 when (icmp_ln7_fu_294_p2(0) = '1') else 
        select_ln7_2_fu_369_p3;
    select_ln7_fu_300_p3 <= 
        dw_weight1_0 when (icmp_ln7_fu_294_p2(0) = '1') else 
        dw_weight1_2;
    w_fu_254_p2 <= std_logic_vector(unsigned(ap_phi_mux_w_0_phi_fu_177_p4) + unsigned(ap_const_lv4_1));

    x_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, zext_ln29_fu_260_p1, zext_ln41_fu_396_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            x_4_address0 <= zext_ln41_fu_396_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_4_address0 <= zext_ln29_fu_260_p1(4 - 1 downto 0);
        else 
            x_4_address0 <= "XXXX";
        end if; 
    end process;


    x_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            x_4_ce0 <= ap_const_logic_1;
        else 
            x_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln26_reg_429, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln26_reg_429 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_4_we0 <= ap_const_logic_1;
        else 
            x_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_3_address0_assign_proc : process(ap_CS_fsm_state5, y_3_addr_2_reg_488_pp2_iter3_reg, ap_enable_reg_pp2_iter4, ap_block_pp2_stage0, zext_ln34_fu_277_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            y_3_address0 <= y_3_addr_2_reg_488_pp2_iter3_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_3_address0 <= zext_ln34_fu_277_p1(3 - 1 downto 0);
        else 
            y_3_address0 <= "XXX";
        end if; 
    end process;


    y_3_address1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, y_3_addr_2_reg_488_pp2_iter10_reg, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter11, ap_block_pp2_stage0, zext_ln48_fu_424_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            y_3_address1 <= zext_ln48_fu_424_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1))) then 
            y_3_address1 <= y_3_addr_2_reg_488_pp2_iter10_reg;
        else 
            y_3_address1 <= "XXX";
        end if; 
    end process;


    y_3_ce0_assign_proc : process(ap_CS_fsm_state5, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            y_3_ce0 <= ap_const_logic_1;
        else 
            y_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_3_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter11)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            y_3_ce1 <= ap_const_logic_1;
        else 
            y_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_3_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln32_fu_265_p2)
    begin
        if (((icmp_ln32_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_3_we0 <= ap_const_logic_1;
        else 
            y_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_3_we1_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln38_reg_464_pp2_iter10_reg, ap_enable_reg_pp2_iter11)
    begin
        if (((icmp_ln38_reg_464_pp2_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            y_3_we1 <= ap_const_logic_1;
        else 
            y_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln29_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_0_reg_173),64));
    zext_ln34_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ow_0_reg_185),64));
    zext_ln38_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_1_fu_351_p3),4));
    zext_ln41_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_fu_390_p2),64));
    zext_ln42_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_fu_343_p3),64));
    zext_ln48_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ow2_0_reg_229),64));
end behav;
