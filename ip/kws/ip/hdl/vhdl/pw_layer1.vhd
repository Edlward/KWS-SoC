-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pw_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_stream_V_empty_n : IN STD_LOGIC;
    in_stream_V_read : OUT STD_LOGIC;
    out_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_stream_V_full_n : IN STD_LOGIC;
    out_stream_V_write : OUT STD_LOGIC;
    pw_weight1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pw_weight1_ce0 : OUT STD_LOGIC;
    pw_weight1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bn_bias1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bn_bias1_ce0 : OUT STD_LOGIC;
    bn_bias1_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pw_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_4600 : STD_LOGIC_VECTOR (15 downto 0) := "0100011000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_ce0 : STD_LOGIC;
    signal x_we0 : STD_LOGIC;
    signal x_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_ce0 : STD_LOGIC;
    signal y_we0 : STD_LOGIC;
    signal y_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_ce1 : STD_LOGIC;
    signal y_we1 : STD_LOGIC;
    signal y_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln25_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln48_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_777_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal w_0_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_216 : STD_LOGIC_VECTOR (6 downto 0);
    signal iw_0_reg_227 : STD_LOGIC_VECTOR (3 downto 0);
    signal om_0_reg_238 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten12_reg_249 : STD_LOGIC_VECTOR (6 downto 0);
    signal iw1_0_reg_260 : STD_LOGIC_VECTOR (3 downto 0);
    signal om2_0_reg_271 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten24_reg_282 : STD_LOGIC_VECTOR (6 downto 0);
    signal iw3_0_reg_293 : STD_LOGIC_VECTOR (3 downto 0);
    signal om4_0_reg_304 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_339 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter12 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter13 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter14 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter15 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter16 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln41_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_state26_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state29_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state30_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln48_reg_777_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w_fu_353_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_664 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln32_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln32_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln36_fu_388_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_678 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_fu_396_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_reg_683 : STD_LOGIC_VECTOR (3 downto 0);
    signal om_fu_404_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln41_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal icmp_ln41_reg_695_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_695_pp2_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_fu_454_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln44_fu_472_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln44_reg_704 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln44_2_fu_480_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln44_2_reg_709 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln44_1_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_reg_721 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_reg_721_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_reg_721_pp2_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_reg_721_pp2_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_reg_721_pp2_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_reg_721_pp2_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_reg_721_pp2_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_reg_721_pp2_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_reg_721_pp2_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal om_1_fu_498_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_load_reg_736 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal y_addr_1_reg_741 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter10_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter11_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter12_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter13_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter14_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_1_reg_741_pp2_iter15_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal pw_weight1_load_reg_747 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_752 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_reg_762 : STD_LOGIC_VECTOR (15 downto 0);
    signal bn_bias1_load_reg_767 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_772 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln48_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal icmp_ln48_reg_777_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln48_fu_548_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal select_ln51_fu_566_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_reg_786 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_1_fu_574_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_1_reg_791 : STD_LOGIC_VECTOR (3 downto 0);
    signal om_2_fu_582_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal outprepare_fu_652_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal outprepare_reg_808 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_w_0_phi_fu_208_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_iw_0_phi_fu_231_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_iw1_0_phi_fu_264_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_iw3_0_phi_fu_297_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln29_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_4_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln51_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal icmp_ln33_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iw_fu_376_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_40_fu_417_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_39_fu_410_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln36_fu_424_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln36_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln36_1_fu_434_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln42_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iw_1_fu_460_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_511_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_504_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln44_2_fu_518_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln44_3_fu_528_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln44_fu_522_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln44_fu_531_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln49_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iw_2_fu_554_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_42_fu_595_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_41_fu_588_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_fu_602_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln51_fu_606_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_1_fu_612_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_fu_615_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln225_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln227_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln227_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln227_fu_638_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_327_ce : STD_LOGIC;
    signal ap_block_pp3_stage0_00001 : BOOLEAN;
    signal grp_fu_333_ce : STD_LOGIC;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component kws_hadd_16ns_16ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kws_hmul_16ns_16ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kws_hcmp_16ns_16neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pw_layer1_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pw_layer1_y IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    x_U : component pw_layer1_x
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_address0,
        ce0 => x_ce0,
        we0 => x_we0,
        d0 => in_stream_V_dout,
        q0 => x_q0);

    y_U : component pw_layer1_y
    generic map (
        DataWidth => 16,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_address0,
        ce0 => y_ce0,
        we0 => y_we0,
        d0 => ap_const_lv16_0,
        q0 => y_q0,
        address1 => y_address1,
        ce1 => y_ce1,
        we1 => y_we1,
        d1 => tmp_17_reg_772,
        q1 => y_q1);

    kws_hadd_16ns_16ncud_U20 : component kws_hadd_16ns_16ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_339,
        din1 => tmp_s_reg_752,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p2);

    kws_hadd_16ns_16ncud_U21 : component kws_hadd_16ns_16ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_16_reg_762,
        din1 => bn_bias1_load_reg_767,
        ce => ap_const_logic_1,
        dout => grp_fu_319_p2);

    kws_hmul_16ns_16ndEe_U22 : component kws_hmul_16ns_16ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_load_reg_736,
        din1 => pw_weight1_load_reg_747,
        ce => ap_const_logic_1,
        dout => grp_fu_323_p2);

    kws_hcmp_16ns_16neOg_U23 : component kws_hcmp_16ns_16neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_q1,
        din1 => ap_const_lv16_0,
        ce => grp_fu_327_ce,
        opcode => ap_const_lv5_4,
        dout => grp_fu_327_p2);

    kws_hcmp_16ns_16neOg_U24 : component kws_hcmp_16ns_16neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_q1,
        din1 => ap_const_lv16_4600,
        ce => grp_fu_333_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_333_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten12_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten12_reg_249 <= ap_const_lv7_0;
            elsif (((icmp_ln41_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten12_reg_249 <= add_ln41_fu_454_p2;
            end if; 
        end if;
    end process;

    indvar_flatten24_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                indvar_flatten24_reg_282 <= ap_const_lv7_0;
            elsif (((icmp_ln48_fu_542_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                indvar_flatten24_reg_282 <= add_ln48_fu_548_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_216 <= ap_const_lv7_0;
            elsif (((icmp_ln32_fu_364_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten_reg_216 <= add_ln32_fu_370_p2;
            end if; 
        end if;
    end process;

    iw1_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                iw1_0_reg_260 <= ap_const_lv4_0;
            elsif (((icmp_ln41_reg_695 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                iw1_0_reg_260 <= select_ln44_2_reg_709;
            end if; 
        end if;
    end process;

    iw3_0_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                iw3_0_reg_293 <= ap_const_lv4_0;
            elsif (((icmp_ln48_reg_777 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                iw3_0_reg_293 <= select_ln51_1_reg_791;
            end if; 
        end if;
    end process;

    iw_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                iw_0_reg_227 <= ap_const_lv4_0;
            elsif (((icmp_ln32_reg_669 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                iw_0_reg_227 <= select_ln36_1_reg_683;
            end if; 
        end if;
    end process;

    om2_0_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                om2_0_reg_271 <= ap_const_lv4_0;
            elsif (((icmp_ln41_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                om2_0_reg_271 <= om_1_fu_498_p2;
            end if; 
        end if;
    end process;

    om4_0_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                om4_0_reg_304 <= ap_const_lv4_0;
            elsif (((icmp_ln48_fu_542_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                om4_0_reg_304 <= om_2_fu_582_p2;
            end if; 
        end if;
    end process;

    om_0_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                om_0_reg_238 <= ap_const_lv4_0;
            elsif (((icmp_ln32_fu_364_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                om_0_reg_238 <= om_fu_404_p2;
            end if; 
        end if;
    end process;

    reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_reg_777_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                reg_339 <= y_q1;
            elsif (((icmp_ln41_reg_695_pp2_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                reg_339 <= y_q0;
            end if; 
        end if;
    end process;

    w_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_660 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_0_reg_204 <= w_reg_664;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_0_reg_204 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_reg_695_pp2_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                bn_bias1_load_reg_767 <= bn_bias1_q0;
                tmp_16_reg_762 <= grp_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln25_reg_660 <= icmp_ln25_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln32_reg_669 <= icmp_ln32_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln41_reg_695 <= icmp_ln41_fu_448_p2;
                icmp_ln41_reg_695_pp2_iter1_reg <= icmp_ln41_reg_695;
                    zext_ln44_1_reg_721_pp2_iter1_reg(3 downto 0) <= zext_ln44_1_reg_721(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln41_reg_695_pp2_iter10_reg <= icmp_ln41_reg_695_pp2_iter9_reg;
                icmp_ln41_reg_695_pp2_iter11_reg <= icmp_ln41_reg_695_pp2_iter10_reg;
                icmp_ln41_reg_695_pp2_iter12_reg <= icmp_ln41_reg_695_pp2_iter11_reg;
                icmp_ln41_reg_695_pp2_iter13_reg <= icmp_ln41_reg_695_pp2_iter12_reg;
                icmp_ln41_reg_695_pp2_iter14_reg <= icmp_ln41_reg_695_pp2_iter13_reg;
                icmp_ln41_reg_695_pp2_iter15_reg <= icmp_ln41_reg_695_pp2_iter14_reg;
                icmp_ln41_reg_695_pp2_iter2_reg <= icmp_ln41_reg_695_pp2_iter1_reg;
                icmp_ln41_reg_695_pp2_iter3_reg <= icmp_ln41_reg_695_pp2_iter2_reg;
                icmp_ln41_reg_695_pp2_iter4_reg <= icmp_ln41_reg_695_pp2_iter3_reg;
                icmp_ln41_reg_695_pp2_iter5_reg <= icmp_ln41_reg_695_pp2_iter4_reg;
                icmp_ln41_reg_695_pp2_iter6_reg <= icmp_ln41_reg_695_pp2_iter5_reg;
                icmp_ln41_reg_695_pp2_iter7_reg <= icmp_ln41_reg_695_pp2_iter6_reg;
                icmp_ln41_reg_695_pp2_iter8_reg <= icmp_ln41_reg_695_pp2_iter7_reg;
                icmp_ln41_reg_695_pp2_iter9_reg <= icmp_ln41_reg_695_pp2_iter8_reg;
                y_addr_1_reg_741_pp2_iter10_reg <= y_addr_1_reg_741_pp2_iter9_reg;
                y_addr_1_reg_741_pp2_iter11_reg <= y_addr_1_reg_741_pp2_iter10_reg;
                y_addr_1_reg_741_pp2_iter12_reg <= y_addr_1_reg_741_pp2_iter11_reg;
                y_addr_1_reg_741_pp2_iter13_reg <= y_addr_1_reg_741_pp2_iter12_reg;
                y_addr_1_reg_741_pp2_iter14_reg <= y_addr_1_reg_741_pp2_iter13_reg;
                y_addr_1_reg_741_pp2_iter15_reg <= y_addr_1_reg_741_pp2_iter14_reg;
                y_addr_1_reg_741_pp2_iter2_reg <= y_addr_1_reg_741;
                y_addr_1_reg_741_pp2_iter3_reg <= y_addr_1_reg_741_pp2_iter2_reg;
                y_addr_1_reg_741_pp2_iter4_reg <= y_addr_1_reg_741_pp2_iter3_reg;
                y_addr_1_reg_741_pp2_iter5_reg <= y_addr_1_reg_741_pp2_iter4_reg;
                y_addr_1_reg_741_pp2_iter6_reg <= y_addr_1_reg_741_pp2_iter5_reg;
                y_addr_1_reg_741_pp2_iter7_reg <= y_addr_1_reg_741_pp2_iter6_reg;
                y_addr_1_reg_741_pp2_iter8_reg <= y_addr_1_reg_741_pp2_iter7_reg;
                y_addr_1_reg_741_pp2_iter9_reg <= y_addr_1_reg_741_pp2_iter8_reg;
                    zext_ln44_1_reg_721_pp2_iter2_reg(3 downto 0) <= zext_ln44_1_reg_721_pp2_iter1_reg(3 downto 0);
                    zext_ln44_1_reg_721_pp2_iter3_reg(3 downto 0) <= zext_ln44_1_reg_721_pp2_iter2_reg(3 downto 0);
                    zext_ln44_1_reg_721_pp2_iter4_reg(3 downto 0) <= zext_ln44_1_reg_721_pp2_iter3_reg(3 downto 0);
                    zext_ln44_1_reg_721_pp2_iter5_reg(3 downto 0) <= zext_ln44_1_reg_721_pp2_iter4_reg(3 downto 0);
                    zext_ln44_1_reg_721_pp2_iter6_reg(3 downto 0) <= zext_ln44_1_reg_721_pp2_iter5_reg(3 downto 0);
                    zext_ln44_1_reg_721_pp2_iter7_reg(3 downto 0) <= zext_ln44_1_reg_721_pp2_iter6_reg(3 downto 0);
                    zext_ln44_1_reg_721_pp2_iter8_reg(3 downto 0) <= zext_ln44_1_reg_721_pp2_iter7_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln48_reg_777 <= icmp_ln48_fu_542_p2;
                icmp_ln48_reg_777_pp3_iter1_reg <= icmp_ln48_reg_777;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln48_reg_777_pp3_iter2_reg <= icmp_ln48_reg_777_pp3_iter1_reg;
                icmp_ln48_reg_777_pp3_iter3_reg <= icmp_ln48_reg_777_pp3_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_reg_777_pp3_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                outprepare_reg_808 <= outprepare_fu_652_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_reg_695 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                pw_weight1_load_reg_747 <= pw_weight1_q0;
                y_addr_1_reg_741 <= zext_ln44_4_fu_537_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_364_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln36_1_reg_683 <= select_ln36_1_fu_396_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_364_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln36_reg_678 <= select_ln36_fu_388_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln44_2_reg_709 <= select_ln44_2_fu_480_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln44_reg_704 <= select_ln44_fu_472_p3;
                    zext_ln44_1_reg_721(3 downto 0) <= zext_ln44_1_fu_493_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_542_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                select_ln51_1_reg_791 <= select_ln51_1_fu_574_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_542_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                select_ln51_reg_786 <= select_ln51_fu_566_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_reg_695_pp2_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_17_reg_772 <= grp_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_reg_695_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_s_reg_752 <= grp_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                w_reg_664 <= w_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_reg_695 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                x_load_reg_736 <= x_q0;
            end if;
        end if;
    end process;
    zext_ln44_1_reg_721(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln44_1_reg_721_pp2_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln44_1_reg_721_pp2_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln44_1_reg_721_pp2_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln44_1_reg_721_pp2_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln44_1_reg_721_pp2_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln44_1_reg_721_pp2_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln44_1_reg_721_pp2_iter7_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln44_1_reg_721_pp2_iter8_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp3_iter4, icmp_ln25_fu_347_p2, ap_enable_reg_pp0_iter0, icmp_ln32_fu_364_p2, ap_enable_reg_pp1_iter0, icmp_ln41_fu_448_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, icmp_ln48_fu_542_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter15, ap_enable_reg_pp2_iter16, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_347_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_347_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln32_fu_364_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln32_fu_364_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln41_fu_448_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter16 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter16 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln41_fu_448_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln48_fu_542_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln48_fu_542_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln32_fu_370_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_216) + unsigned(ap_const_lv7_1));
    add_ln36_fu_437_p2 <= std_logic_vector(unsigned(sub_ln36_fu_428_p2) + unsigned(zext_ln36_1_fu_434_p1));
    add_ln41_fu_454_p2 <= std_logic_vector(unsigned(indvar_flatten12_reg_249) + unsigned(ap_const_lv7_1));
    add_ln44_fu_531_p2 <= std_logic_vector(unsigned(zext_ln44_3_fu_528_p1) + unsigned(sub_ln44_fu_522_p2));
    add_ln48_fu_548_p2 <= std_logic_vector(unsigned(indvar_flatten24_reg_282) + unsigned(ap_const_lv7_1));
    add_ln51_fu_615_p2 <= std_logic_vector(unsigned(sub_ln51_fu_606_p2) + unsigned(zext_ln51_1_fu_612_p1));
    and_ln227_fu_632_p2 <= (xor_ln225_fu_626_p2 and grp_fu_333_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state25 <= ap_CS_fsm(6);
    ap_CS_fsm_state31 <= ap_CS_fsm(8);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_660)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln25_reg_660 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln25_reg_660)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln25_reg_660 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_00001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter4, icmp_ln48_reg_777_pp3_iter3_reg)
    begin
                ap_block_pp3_stage0_00001 <= ((icmp_ln48_reg_777_pp3_iter3_reg = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_01001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter4, icmp_ln48_reg_777_pp3_iter3_reg)
    begin
                ap_block_pp3_stage0_01001 <= ((icmp_ln48_reg_777_pp3_iter3_reg = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter4, icmp_ln48_reg_777_pp3_iter3_reg)
    begin
                ap_block_pp3_stage0_11001 <= ((icmp_ln48_reg_777_pp3_iter3_reg = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter4, icmp_ln48_reg_777_pp3_iter3_reg)
    begin
                ap_block_pp3_stage0_subdone <= ((icmp_ln48_reg_777_pp3_iter3_reg = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1));
    end process;

        ap_block_state10_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state30_pp3_stage0_iter4_assign_proc : process(out_stream_V_full_n, icmp_ln48_reg_777_pp3_iter3_reg)
    begin
                ap_block_state30_pp3_stage0_iter4 <= ((icmp_ln48_reg_777_pp3_iter3_reg = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_stream_V_empty_n, icmp_ln25_reg_660)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln25_reg_660 = ap_const_lv1_0) and (in_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln25_fu_347_p2)
    begin
        if ((icmp_ln25_fu_347_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln32_fu_364_p2)
    begin
        if ((icmp_ln32_fu_364_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state8_assign_proc : process(icmp_ln41_fu_448_p2)
    begin
        if ((icmp_ln41_fu_448_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state26_assign_proc : process(icmp_ln48_fu_542_p2)
    begin
        if ((icmp_ln48_fu_542_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter13, ap_enable_reg_pp2_iter14, ap_enable_reg_pp2_iter15, ap_enable_reg_pp2_iter16)
    begin
        if (((ap_enable_reg_pp2_iter16 = ap_const_logic_0) and (ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_enable_reg_pp2_iter14 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter3)
    begin
        if (((ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_iw1_0_phi_fu_264_p4_assign_proc : process(iw1_0_reg_260, icmp_ln41_reg_695, ap_CS_fsm_pp2_stage0, select_ln44_2_reg_709, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln41_reg_695 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_iw1_0_phi_fu_264_p4 <= select_ln44_2_reg_709;
        else 
            ap_phi_mux_iw1_0_phi_fu_264_p4 <= iw1_0_reg_260;
        end if; 
    end process;


    ap_phi_mux_iw3_0_phi_fu_297_p4_assign_proc : process(ap_block_pp3_stage0, icmp_ln48_reg_777, iw3_0_reg_293, ap_CS_fsm_pp3_stage0, select_ln51_1_reg_791, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln48_reg_777 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_iw3_0_phi_fu_297_p4 <= select_ln51_1_reg_791;
        else 
            ap_phi_mux_iw3_0_phi_fu_297_p4 <= iw3_0_reg_293;
        end if; 
    end process;


    ap_phi_mux_iw_0_phi_fu_231_p4_assign_proc : process(iw_0_reg_227, icmp_ln32_reg_669, ap_CS_fsm_pp1_stage0, select_ln36_1_reg_683, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln32_reg_669 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_iw_0_phi_fu_231_p4 <= select_ln36_1_reg_683;
        else 
            ap_phi_mux_iw_0_phi_fu_231_p4 <= iw_0_reg_227;
        end if; 
    end process;


    ap_phi_mux_w_0_phi_fu_208_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_660, w_0_reg_204, w_reg_664)
    begin
        if (((icmp_ln25_reg_660 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_w_0_phi_fu_208_p4 <= w_reg_664;
        else 
            ap_phi_mux_w_0_phi_fu_208_p4 <= w_0_reg_204;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bn_bias1_address0 <= zext_ln44_1_reg_721_pp2_iter8_reg(4 - 1 downto 0);

    bn_bias1_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter9)
    begin
        if (((ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            bn_bias1_ce0 <= ap_const_logic_1;
        else 
            bn_bias1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_327_ce_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            grp_fu_327_ce <= ap_const_logic_1;
        else 
            grp_fu_327_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_333_ce_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            grp_fu_333_ce <= ap_const_logic_1;
        else 
            grp_fu_333_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln25_fu_347_p2 <= "1" when (ap_phi_mux_w_0_phi_fu_208_p4 = ap_const_lv4_8) else "0";
    icmp_ln32_fu_364_p2 <= "1" when (indvar_flatten_reg_216 = ap_const_lv7_60) else "0";
    icmp_ln33_fu_382_p2 <= "1" when (om_0_reg_238 = ap_const_lv4_C) else "0";
    icmp_ln41_fu_448_p2 <= "1" when (indvar_flatten12_reg_249 = ap_const_lv7_60) else "0";
    icmp_ln42_fu_466_p2 <= "1" when (om2_0_reg_271 = ap_const_lv4_C) else "0";
    icmp_ln48_fu_542_p2 <= "1" when (indvar_flatten24_reg_282 = ap_const_lv7_60) else "0";
    icmp_ln49_fu_560_p2 <= "1" when (om4_0_reg_304 = ap_const_lv4_C) else "0";

    in_stream_V_blk_n_assign_proc : process(in_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln25_reg_660)
    begin
        if (((icmp_ln25_reg_660 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_V_blk_n <= in_stream_V_empty_n;
        else 
            in_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_660, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_660 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_stream_V_read <= ap_const_logic_1;
        else 
            in_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    iw_1_fu_460_p2 <= std_logic_vector(unsigned(ap_phi_mux_iw1_0_phi_fu_264_p4) + unsigned(ap_const_lv4_1));
    iw_2_fu_554_p2 <= std_logic_vector(unsigned(ap_phi_mux_iw3_0_phi_fu_297_p4) + unsigned(ap_const_lv4_1));
    iw_fu_376_p2 <= std_logic_vector(unsigned(ap_phi_mux_iw_0_phi_fu_231_p4) + unsigned(ap_const_lv4_1));
    om_1_fu_498_p2 <= std_logic_vector(unsigned(select_ln44_fu_472_p3) + unsigned(ap_const_lv4_1));
    om_2_fu_582_p2 <= std_logic_vector(unsigned(select_ln51_fu_566_p3) + unsigned(ap_const_lv4_1));
    om_fu_404_p2 <= std_logic_vector(unsigned(select_ln36_fu_388_p3) + unsigned(ap_const_lv4_1));
    or_ln227_fu_646_p2 <= (grp_fu_327_p2 or and_ln227_fu_632_p2);

    out_stream_V_blk_n_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter4, ap_block_pp3_stage0, icmp_ln48_reg_777_pp3_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln48_reg_777_pp3_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1))) then 
            out_stream_V_blk_n <= out_stream_V_full_n;
        else 
            out_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_din <= outprepare_reg_808;

    out_stream_V_write_assign_proc : process(ap_enable_reg_pp3_iter4, icmp_ln48_reg_777_pp3_iter3_reg, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln48_reg_777_pp3_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            out_stream_V_write <= ap_const_logic_1;
        else 
            out_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    outprepare_fu_652_p3 <= 
        select_ln227_fu_638_p3 when (or_ln227_fu_646_p2(0) = '1') else 
        reg_339;
    p_shl_cast_fu_504_p3 <= (select_ln44_2_reg_709 & ap_const_lv4_0);
    pw_weight1_address0 <= zext_ln44_1_fu_493_p1(4 - 1 downto 0);

    pw_weight1_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            pw_weight1_ce0 <= ap_const_logic_1;
        else 
            pw_weight1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln227_fu_638_p3 <= 
        ap_const_lv16_4600 when (and_ln227_fu_632_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln36_1_fu_396_p3 <= 
        iw_fu_376_p2 when (icmp_ln33_fu_382_p2(0) = '1') else 
        ap_phi_mux_iw_0_phi_fu_231_p4;
    select_ln36_fu_388_p3 <= 
        ap_const_lv4_0 when (icmp_ln33_fu_382_p2(0) = '1') else 
        om_0_reg_238;
    select_ln44_2_fu_480_p3 <= 
        iw_1_fu_460_p2 when (icmp_ln42_fu_466_p2(0) = '1') else 
        ap_phi_mux_iw1_0_phi_fu_264_p4;
    select_ln44_fu_472_p3 <= 
        ap_const_lv4_0 when (icmp_ln42_fu_466_p2(0) = '1') else 
        om2_0_reg_271;
    select_ln51_1_fu_574_p3 <= 
        iw_2_fu_554_p2 when (icmp_ln49_fu_560_p2(0) = '1') else 
        ap_phi_mux_iw3_0_phi_fu_297_p4;
    select_ln51_fu_566_p3 <= 
        ap_const_lv4_0 when (icmp_ln49_fu_560_p2(0) = '1') else 
        om4_0_reg_304;
        sext_ln36_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_fu_437_p2),64));

        sext_ln51_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln51_fu_615_p2),64));

    sub_ln36_fu_428_p2 <= std_logic_vector(unsigned(tmp_39_fu_410_p3) - unsigned(zext_ln36_fu_424_p1));
    sub_ln44_fu_522_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_504_p3) - unsigned(zext_ln44_2_fu_518_p1));
    sub_ln51_fu_606_p2 <= std_logic_vector(unsigned(tmp_41_fu_588_p3) - unsigned(zext_ln51_fu_602_p1));
    tmp_1_fu_511_p3 <= (select_ln44_2_reg_709 & ap_const_lv2_0);
    tmp_39_fu_410_p3 <= (select_ln36_1_reg_683 & ap_const_lv4_0);
    tmp_40_fu_417_p3 <= (select_ln36_1_reg_683 & ap_const_lv2_0);
    tmp_41_fu_588_p3 <= (select_ln51_1_reg_791 & ap_const_lv4_0);
    tmp_42_fu_595_p3 <= (select_ln51_1_reg_791 & ap_const_lv2_0);
    w_fu_353_p2 <= std_logic_vector(unsigned(ap_phi_mux_w_0_phi_fu_208_p4) + unsigned(ap_const_lv4_1));

    x_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, zext_ln29_fu_359_p1, zext_ln44_fu_488_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            x_address0 <= zext_ln44_fu_488_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_address0 <= zext_ln29_fu_359_p1(3 - 1 downto 0);
        else 
            x_address0 <= "XXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_660, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_660 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_we0 <= ap_const_logic_1;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln225_fu_626_p2 <= (grp_fu_327_p2 xor ap_const_lv1_1);

    y_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, y_addr_1_reg_741_pp2_iter3_reg, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter4, ap_block_pp1_stage0, ap_block_pp2_stage0, sext_ln36_fu_443_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            y_address0 <= y_addr_1_reg_741_pp2_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            y_address0 <= sext_ln36_fu_443_p1(7 - 1 downto 0);
        else 
            y_address0 <= "XXXXXXX";
        end if; 
    end process;


    y_address1_assign_proc : process(ap_block_pp3_stage0, y_addr_1_reg_741_pp2_iter15_reg, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp2_iter16, ap_enable_reg_pp3_iter1, ap_block_pp2_stage0, sext_ln51_fu_621_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            y_address1 <= sext_ln51_fu_621_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter16 = ap_const_logic_1))) then 
            y_address1 <= y_addr_1_reg_741_pp2_iter15_reg;
        else 
            y_address1 <= "XXXXXXX";
        end if; 
    end process;


    y_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter4)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_ce1_assign_proc : process(ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp2_iter16, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            y_ce1 <= ap_const_logic_1;
        else 
            y_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_we0_assign_proc : process(icmp_ln32_reg_669, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln32_reg_669 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_we1_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln41_reg_695_pp2_iter15_reg, ap_enable_reg_pp2_iter16)
    begin
        if (((icmp_ln41_reg_695_pp2_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            y_we1 <= ap_const_logic_1;
        else 
            y_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln29_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_0_reg_204),64));
    zext_ln36_1_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_reg_678),8));
    zext_ln36_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_417_p3),8));
    zext_ln44_1_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln44_fu_472_p3),64));
    zext_ln44_2_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_511_p3),8));
    zext_ln44_3_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln44_reg_704),8));
    zext_ln44_4_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_fu_531_p2),64));
    zext_ln44_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln44_2_fu_480_p3),64));
    zext_ln51_1_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_reg_786),8));
    zext_ln51_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_595_p3),8));
end behav;
