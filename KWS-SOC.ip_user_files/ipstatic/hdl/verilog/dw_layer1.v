// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dw_layer1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_V_dout,
        in_stream_V_empty_n,
        in_stream_V_read,
        out_stream_V_din,
        out_stream_V_full_n,
        out_stream_V_write,
        dw_weight1_2,
        dw_weight1_0,
        dw_weight1_1
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_pp0_stage0 = 9'd2;
parameter    ap_ST_fsm_state4 = 9'd4;
parameter    ap_ST_fsm_state5 = 9'd8;
parameter    ap_ST_fsm_state6 = 9'd16;
parameter    ap_ST_fsm_pp2_stage0 = 9'd32;
parameter    ap_ST_fsm_state19 = 9'd64;
parameter    ap_ST_fsm_pp3_stage0 = 9'd128;
parameter    ap_ST_fsm_state22 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_stream_V_dout;
input   in_stream_V_empty_n;
output   in_stream_V_read;
output  [15:0] out_stream_V_din;
input   out_stream_V_full_n;
output   out_stream_V_write;
input  [15:0] dw_weight1_2;
input  [15:0] dw_weight1_0;
input  [15:0] dw_weight1_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_read;
reg out_stream_V_write;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] x_4_address0;
reg    x_4_ce0;
reg    x_4_we0;
wire   [15:0] x_4_q0;
reg   [2:0] y_3_address0;
reg    y_3_ce0;
reg    y_3_we0;
wire   [15:0] y_3_q0;
reg   [2:0] y_3_address1;
reg    y_3_ce1;
reg    y_3_we1;
wire   [15:0] y_3_q1;
reg    in_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln26_reg_429;
reg    out_stream_V_blk_n;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln46_reg_519;
reg   [3:0] w_0_reg_173;
reg   [4:0] indvar_flatten_reg_196;
reg   [1:0] kw_0_reg_207;
reg   [3:0] ow1_0_reg_218;
reg   [3:0] ow2_0_reg_229;
wire   [0:0] icmp_ln26_fu_248_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] w_fu_254_p2;
reg   [3:0] w_reg_433;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] ow_fu_271_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln38_fu_319_p2;
reg   [0:0] icmp_ln38_reg_464;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state7_pp2_stage0_iter0;
wire    ap_block_state8_pp2_stage0_iter1;
wire    ap_block_state9_pp2_stage0_iter2;
wire    ap_block_state10_pp2_stage0_iter3;
wire    ap_block_state11_pp2_stage0_iter4;
wire    ap_block_state12_pp2_stage0_iter5;
wire    ap_block_state13_pp2_stage0_iter6;
wire    ap_block_state14_pp2_stage0_iter7;
wire    ap_block_state15_pp2_stage0_iter8;
wire    ap_block_state16_pp2_stage0_iter9;
wire    ap_block_state17_pp2_stage0_iter10;
wire    ap_block_state18_pp2_stage0_iter11;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln38_reg_464_pp2_iter1_reg;
reg   [0:0] icmp_ln38_reg_464_pp2_iter2_reg;
reg   [0:0] icmp_ln38_reg_464_pp2_iter3_reg;
reg   [0:0] icmp_ln38_reg_464_pp2_iter4_reg;
reg   [0:0] icmp_ln38_reg_464_pp2_iter5_reg;
reg   [0:0] icmp_ln38_reg_464_pp2_iter6_reg;
reg   [0:0] icmp_ln38_reg_464_pp2_iter7_reg;
reg   [0:0] icmp_ln38_reg_464_pp2_iter8_reg;
reg   [0:0] icmp_ln38_reg_464_pp2_iter9_reg;
reg   [0:0] icmp_ln38_reg_464_pp2_iter10_reg;
wire   [4:0] add_ln38_fu_325_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [1:0] select_ln38_1_fu_351_p3;
reg   [1:0] select_ln38_1_reg_473;
wire   [15:0] select_ln38_2_fu_382_p3;
reg   [15:0] select_ln38_2_reg_478;
reg   [15:0] select_ln38_2_reg_478_pp2_iter1_reg;
reg   [2:0] y_3_addr_2_reg_488;
reg   [2:0] y_3_addr_2_reg_488_pp2_iter1_reg;
reg   [2:0] y_3_addr_2_reg_488_pp2_iter2_reg;
reg   [2:0] y_3_addr_2_reg_488_pp2_iter3_reg;
reg   [2:0] y_3_addr_2_reg_488_pp2_iter4_reg;
reg   [2:0] y_3_addr_2_reg_488_pp2_iter5_reg;
reg   [2:0] y_3_addr_2_reg_488_pp2_iter6_reg;
reg   [2:0] y_3_addr_2_reg_488_pp2_iter7_reg;
reg   [2:0] y_3_addr_2_reg_488_pp2_iter8_reg;
reg   [2:0] y_3_addr_2_reg_488_pp2_iter9_reg;
reg   [2:0] y_3_addr_2_reg_488_pp2_iter10_reg;
wire   [3:0] ow_1_fu_406_p2;
reg   [15:0] x_4_load_reg_499;
reg    ap_enable_reg_pp2_iter1;
wire   [15:0] grp_fu_244_p2;
reg   [15:0] tmp_1_reg_504;
reg   [15:0] y_3_load_reg_509;
reg    ap_enable_reg_pp2_iter5;
wire   [15:0] grp_fu_240_p2;
reg   [15:0] tmp_s_reg_514;
wire   [0:0] icmp_ln46_fu_412_p2;
wire    ap_block_state20_pp3_stage0_iter0;
reg    ap_block_state21_pp3_stage0_iter1;
reg    ap_block_pp3_stage0_11001;
wire   [3:0] ow_2_fu_418_p2;
reg    ap_enable_reg_pp3_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state7;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
wire    ap_CS_fsm_state19;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state20;
reg   [3:0] ap_phi_mux_w_0_phi_fu_177_p4;
reg   [3:0] ow_0_reg_185;
wire   [0:0] icmp_ln32_fu_265_p2;
wire    ap_CS_fsm_state4;
reg   [1:0] ap_phi_mux_kw_0_phi_fu_211_p4;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln29_fu_260_p1;
wire   [63:0] zext_ln34_fu_277_p1;
wire   [63:0] zext_ln41_fu_396_p1;
wire   [63:0] zext_ln42_fu_401_p1;
wire   [63:0] zext_ln48_fu_424_p1;
reg    ap_block_pp3_stage0_01001;
wire   [0:0] icmp_ln7_fu_294_p2;
wire   [0:0] icmp_ln7_1_fu_306_p2;
wire   [15:0] select_ln7_fu_300_p3;
wire   [0:0] icmp_ln39_fu_337_p2;
wire   [1:0] kw_fu_331_p2;
wire   [0:0] icmp_ln7_2_fu_363_p2;
wire   [15:0] select_ln7_2_fu_369_p3;
wire   [15:0] select_ln7_3_fu_375_p3;
wire   [15:0] select_ln7_1_fu_312_p3;
wire   [3:0] zext_ln38_fu_359_p1;
wire   [3:0] select_ln38_fu_343_p3;
wire   [3:0] add_ln41_fu_390_p2;
wire    ap_CS_fsm_state22;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
end

dw_layer1_x_4 #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
x_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_4_address0),
    .ce0(x_4_ce0),
    .we0(x_4_we0),
    .d0(in_stream_V_dout),
    .q0(x_4_q0)
);

dw_layer1_y_3 #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
y_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_3_address0),
    .ce0(y_3_ce0),
    .we0(y_3_we0),
    .d0(16'd0),
    .q0(y_3_q0),
    .address1(y_3_address1),
    .ce1(y_3_ce1),
    .we1(y_3_we1),
    .d1(tmp_s_reg_514),
    .q1(y_3_q1)
);

kws_hadd_16ns_16ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
kws_hadd_16ns_16ncud_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_3_load_reg_509),
    .din1(tmp_1_reg_504),
    .ce(1'b1),
    .dout(grp_fu_240_p2)
);

kws_hmul_16ns_16ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
kws_hmul_16ns_16ndEe_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_4_load_reg_499),
    .din1(select_ln38_2_reg_478_pp2_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_244_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state7)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state20))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state20))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state20);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_319_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten_reg_196 <= add_ln38_fu_325_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_196 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_464 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        kw_0_reg_207 <= select_ln38_1_reg_473;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        kw_0_reg_207 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_319_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ow1_0_reg_218 <= ow_1_fu_406_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ow1_0_reg_218 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ow2_0_reg_229 <= 4'd0;
    end else if (((icmp_ln46_fu_412_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        ow2_0_reg_229 <= ow_2_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ow_0_reg_185 <= 4'd0;
    end else if (((icmp_ln32_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ow_0_reg_185 <= ow_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_429 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_0_reg_173 <= w_reg_433;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_0_reg_173 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln26_reg_429 <= icmp_ln26_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln38_reg_464 <= icmp_ln38_fu_319_p2;
        icmp_ln38_reg_464_pp2_iter1_reg <= icmp_ln38_reg_464;
        select_ln38_2_reg_478_pp2_iter1_reg <= select_ln38_2_reg_478;
        y_3_addr_2_reg_488_pp2_iter1_reg <= y_3_addr_2_reg_488;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln38_reg_464_pp2_iter10_reg <= icmp_ln38_reg_464_pp2_iter9_reg;
        icmp_ln38_reg_464_pp2_iter2_reg <= icmp_ln38_reg_464_pp2_iter1_reg;
        icmp_ln38_reg_464_pp2_iter3_reg <= icmp_ln38_reg_464_pp2_iter2_reg;
        icmp_ln38_reg_464_pp2_iter4_reg <= icmp_ln38_reg_464_pp2_iter3_reg;
        icmp_ln38_reg_464_pp2_iter5_reg <= icmp_ln38_reg_464_pp2_iter4_reg;
        icmp_ln38_reg_464_pp2_iter6_reg <= icmp_ln38_reg_464_pp2_iter5_reg;
        icmp_ln38_reg_464_pp2_iter7_reg <= icmp_ln38_reg_464_pp2_iter6_reg;
        icmp_ln38_reg_464_pp2_iter8_reg <= icmp_ln38_reg_464_pp2_iter7_reg;
        icmp_ln38_reg_464_pp2_iter9_reg <= icmp_ln38_reg_464_pp2_iter8_reg;
        y_3_addr_2_reg_488_pp2_iter10_reg <= y_3_addr_2_reg_488_pp2_iter9_reg;
        y_3_addr_2_reg_488_pp2_iter2_reg <= y_3_addr_2_reg_488_pp2_iter1_reg;
        y_3_addr_2_reg_488_pp2_iter3_reg <= y_3_addr_2_reg_488_pp2_iter2_reg;
        y_3_addr_2_reg_488_pp2_iter4_reg <= y_3_addr_2_reg_488_pp2_iter3_reg;
        y_3_addr_2_reg_488_pp2_iter5_reg <= y_3_addr_2_reg_488_pp2_iter4_reg;
        y_3_addr_2_reg_488_pp2_iter6_reg <= y_3_addr_2_reg_488_pp2_iter5_reg;
        y_3_addr_2_reg_488_pp2_iter7_reg <= y_3_addr_2_reg_488_pp2_iter6_reg;
        y_3_addr_2_reg_488_pp2_iter8_reg <= y_3_addr_2_reg_488_pp2_iter7_reg;
        y_3_addr_2_reg_488_pp2_iter9_reg <= y_3_addr_2_reg_488_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln46_reg_519 <= icmp_ln46_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_319_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln38_1_reg_473 <= select_ln38_1_fu_351_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_319_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln38_2_reg_478 <= select_ln38_2_fu_382_p3;
        y_3_addr_2_reg_488 <= zext_ln42_fu_401_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_464_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_1_reg_504 <= grp_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_464_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_s_reg_514 <= grp_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_reg_433 <= w_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_464 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        x_4_load_reg_499 <= x_4_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_464_pp2_iter4_reg == 1'd0) & (ap_enable_reg_pp2_iter5 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        y_3_load_reg_509 <= y_3_q0;
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_248_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln38_fu_319_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln46_fu_412_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_464 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_kw_0_phi_fu_211_p4 = select_ln38_1_reg_473;
    end else begin
        ap_phi_mux_kw_0_phi_fu_211_p4 = kw_0_reg_207;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_429 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_w_0_phi_fu_177_p4 = w_reg_433;
    end else begin
        ap_phi_mux_w_0_phi_fu_177_p4 = w_0_reg_173;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_429 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_V_blk_n = in_stream_V_empty_n;
    end else begin
        in_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_429 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_stream_V_read = 1'b1;
    end else begin
        in_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (icmp_ln46_reg_519 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        out_stream_V_blk_n = out_stream_V_full_n;
    end else begin
        out_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_519 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        out_stream_V_write = 1'b1;
    end else begin
        out_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_4_address0 = zext_ln41_fu_396_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_4_address0 = zext_ln29_fu_260_p1;
    end else begin
        x_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        x_4_ce0 = 1'b1;
    end else begin
        x_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_429 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_4_we0 = 1'b1;
    end else begin
        x_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        y_3_address0 = y_3_addr_2_reg_488_pp2_iter3_reg;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        y_3_address0 = zext_ln34_fu_277_p1;
    end else begin
        y_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        y_3_address1 = zext_ln48_fu_424_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        y_3_address1 = y_3_addr_2_reg_488_pp2_iter10_reg;
    end else begin
        y_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        y_3_ce0 = 1'b1;
    end else begin
        y_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter11 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        y_3_ce1 = 1'b1;
    end else begin
        y_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        y_3_we0 = 1'b1;
    end else begin
        y_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_464_pp2_iter10_reg == 1'd0) & (ap_enable_reg_pp2_iter11 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        y_3_we1 = 1'b1;
    end else begin
        y_3_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_248_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_248_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln32_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln38_fu_319_p2 == 1'd1)) & ~((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln38_fu_319_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln46_fu_412_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln46_fu_412_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln38_fu_325_p2 = (indvar_flatten_reg_196 + 5'd1);

assign add_ln41_fu_390_p2 = (zext_ln38_fu_359_p1 + select_ln38_fu_343_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln26_reg_429 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln26_reg_429 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((icmp_ln46_reg_519 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((icmp_ln46_reg_519 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((icmp_ln46_reg_519 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_state10_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp3_stage0_iter1 = ((icmp_ln46_reg_519 == 1'd0) & (out_stream_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln26_reg_429 == 1'd0) & (in_stream_V_empty_n == 1'b0));
end

assign ap_block_state7_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign icmp_ln26_fu_248_p2 = ((ap_phi_mux_w_0_phi_fu_177_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_265_p2 = ((ow_0_reg_185 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_319_p2 = ((indvar_flatten_reg_196 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_337_p2 = ((ow1_0_reg_218 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_412_p2 = ((ow2_0_reg_229 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_306_p2 = ((ap_phi_mux_kw_0_phi_fu_211_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_2_fu_363_p2 = ((kw_fu_331_p2 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_294_p2 = ((ap_phi_mux_kw_0_phi_fu_211_p4 == 2'd0) ? 1'b1 : 1'b0);

assign kw_fu_331_p2 = (ap_phi_mux_kw_0_phi_fu_211_p4 + 2'd1);

assign out_stream_V_din = y_3_q1;

assign ow_1_fu_406_p2 = (select_ln38_fu_343_p3 + 4'd1);

assign ow_2_fu_418_p2 = (ow2_0_reg_229 + 4'd1);

assign ow_fu_271_p2 = (ow_0_reg_185 + 4'd1);

assign select_ln38_1_fu_351_p3 = ((icmp_ln39_fu_337_p2[0:0] === 1'b1) ? kw_fu_331_p2 : ap_phi_mux_kw_0_phi_fu_211_p4);

assign select_ln38_2_fu_382_p3 = ((icmp_ln39_fu_337_p2[0:0] === 1'b1) ? select_ln7_3_fu_375_p3 : select_ln7_1_fu_312_p3);

assign select_ln38_fu_343_p3 = ((icmp_ln39_fu_337_p2[0:0] === 1'b1) ? 4'd0 : ow1_0_reg_218);

assign select_ln7_1_fu_312_p3 = ((icmp_ln7_1_fu_306_p2[0:0] === 1'b1) ? dw_weight1_1 : select_ln7_fu_300_p3);

assign select_ln7_2_fu_369_p3 = ((icmp_ln7_2_fu_363_p2[0:0] === 1'b1) ? dw_weight1_0 : dw_weight1_2);

assign select_ln7_3_fu_375_p3 = ((icmp_ln7_fu_294_p2[0:0] === 1'b1) ? dw_weight1_1 : select_ln7_2_fu_369_p3);

assign select_ln7_fu_300_p3 = ((icmp_ln7_fu_294_p2[0:0] === 1'b1) ? dw_weight1_0 : dw_weight1_2);

assign w_fu_254_p2 = (ap_phi_mux_w_0_phi_fu_177_p4 + 4'd1);

assign zext_ln29_fu_260_p1 = w_0_reg_173;

assign zext_ln34_fu_277_p1 = ow_0_reg_185;

assign zext_ln38_fu_359_p1 = select_ln38_1_fu_351_p3;

assign zext_ln41_fu_396_p1 = add_ln41_fu_390_p2;

assign zext_ln42_fu_401_p1 = select_ln38_fu_343_p3;

assign zext_ln48_fu_424_p1 = ow2_0_reg_229;

endmodule //dw_layer1
