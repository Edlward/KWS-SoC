-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_64u_12u_1u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_stream_V_V_empty_n : IN STD_LOGIC;
    in_stream_V_V_read : OUT STD_LOGIC;
    out_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_full_n : IN STD_LOGIC;
    out_stream_V_write : OUT STD_LOGIC;
    fc2final_scale_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fc2final_scale_V_empty_n : IN STD_LOGIC;
    fc2final_scale_V_read : OUT STD_LOGIC;
    fc_weight2_scale : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_scale_fc : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_bias2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fc_bias2_V_ce0 : OUT STD_LOGIC;
    fc_bias2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    fc_weights2_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    fc_weights2_V_ce0 : OUT STD_LOGIC;
    fc_weights2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of fc_64u_12u_1u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_V_ce0 : STD_LOGIC;
    signal x_V_we0 : STD_LOGIC;
    signal x_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_V_ce0 : STD_LOGIC;
    signal y_V_we0 : STD_LOGIC;
    signal y_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_V_ce1 : STD_LOGIC;
    signal y_V_we1 : STD_LOGIC;
    signal y_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln37_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp3_iter23 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln56_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal fc2final_scale_V_blk_n : STD_LOGIC;
    signal i_0_reg_278 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_reg_301 : STD_LOGIC_VECTOR (9 downto 0);
    signal om1_0_reg_312 : STD_LOGIC_VECTOR (3 downto 0);
    signal im_0_reg_323 : STD_LOGIC_VECTOR (6 downto 0);
    signal om2_0_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_block_state11_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln49_1_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_873_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state31_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state34_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state36_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state37_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state38_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state39_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_state40_pp3_stage0_iter9 : BOOLEAN;
    signal ap_block_state41_pp3_stage0_iter10 : BOOLEAN;
    signal ap_block_state42_pp3_stage0_iter11 : BOOLEAN;
    signal ap_block_state43_pp3_stage0_iter12 : BOOLEAN;
    signal ap_block_state44_pp3_stage0_iter13 : BOOLEAN;
    signal ap_block_state45_pp3_stage0_iter14 : BOOLEAN;
    signal ap_block_state46_pp3_stage0_iter15 : BOOLEAN;
    signal ap_block_state47_pp3_stage0_iter16 : BOOLEAN;
    signal ap_block_state48_pp3_stage0_iter17 : BOOLEAN;
    signal ap_block_state49_pp3_stage0_iter18 : BOOLEAN;
    signal ap_block_state50_pp3_stage0_iter19 : BOOLEAN;
    signal ap_block_state51_pp3_stage0_iter20 : BOOLEAN;
    signal ap_block_state52_pp3_stage0_iter21 : BOOLEAN;
    signal ap_block_state53_pp3_stage0_iter22 : BOOLEAN;
    signal ap_block_state54_pp3_stage0_iter23 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal icmp_ln56_reg_972_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_130_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_scale_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_scale_1_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln37_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_379_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_823 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal om_fu_396_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln48_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_836_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln48_fu_413_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_reg_840 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln51_fu_431_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_reg_845 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_1_fu_439_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_1_reg_851 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_V_addr_1_reg_862 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_V_addr_1_reg_862_pp2_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal y_V_addr_1_reg_862_pp2_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal y_V_addr_1_reg_862_pp2_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal y_V_addr_1_reg_862_pp2_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal y_V_addr_1_reg_862_pp2_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal y_V_addr_1_reg_862_pp2_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal y_V_addr_1_reg_862_pp2_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal y_V_addr_1_reg_862_pp2_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal im_fu_458_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal im_reg_868 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln49_1_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_873_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_873_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_873_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_873_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_873_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_873_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_873_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state12_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state14_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state16_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state18_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_state20_pp2_stage1_iter4 : BOOLEAN;
    signal ap_block_state22_pp2_stage1_iter5 : BOOLEAN;
    signal ap_block_state24_pp2_stage1_iter6 : BOOLEAN;
    signal ap_block_state26_pp2_stage1_iter7 : BOOLEAN;
    signal ap_block_state28_pp2_stage1_iter8 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal x_V_load_reg_887 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1428_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_weights2_V_load_reg_897 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_784_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal tmp_296_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal i_op_assign_4_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_fu_519_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_62_reg_927 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_552_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_96_reg_932 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln278_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_942 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_11_fu_594_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_11_reg_947 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_666_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_reg_957 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln303_fu_760_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln303_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln56_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal icmp_ln56_reg_972_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_972_pp3_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal om_8_fu_773_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal grp_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal outprepare_reg_991 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state11 : STD_LOGIC;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state31 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter22 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_282_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal om_0_reg_290 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln43_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_305_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_om1_0_phi_fu_316_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_im_0_phi_fu_327_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_1_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln215_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal zext_ln58_fu_779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal grp_fu_349_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln49_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal om_7_fu_419_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_109_fu_480_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_108_fu_473_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln215_fu_487_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln215_fu_491_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln49_fu_470_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln215_fu_497_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_s_fu_534_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_fu_548_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_fu_522_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_544_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_fu_566_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_600_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln281_fu_572_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln282_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_fu_616_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_fu_634_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_128_fu_698_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln283_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_fu_695_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln297_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln285_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln295_fu_722_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln285_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_11_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_705_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln278_fu_729_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_11_fu_746_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln461_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_359_ce : STD_LOGIC;
    signal grp_fu_363_ce : STD_LOGIC;
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component kws_fadd_32ns_32nwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fdiv_32ns_32nGfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_sitofp_32s_32OgC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_mac_muladd_8sLf8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_relu6_x_V_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fc_64u_12u_1u_s_y_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    x_V_U : component fc_relu6_x_V_3
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_V_address0,
        ce0 => x_V_ce0,
        we0 => x_V_we0,
        d0 => in_stream_V_V_dout,
        q0 => x_V_q0);

    y_V_U : component fc_64u_12u_1u_s_y_V
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_V_address0,
        ce0 => y_V_ce0,
        we0 => y_V_we0,
        d0 => ap_const_lv32_0,
        q0 => y_V_q0,
        address1 => y_V_address1,
        ce1 => y_V_ce1,
        we1 => y_V_we1,
        d1 => y_V_d1);

    kws_fadd_32ns_32nwdI_U348 : component kws_fadd_32ns_32nwdI
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_296_reg_907,
        din1 => i_op_assign_4_reg_912,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p2);

    kws_fmul_32ns_32neOg_U349 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_349_p0,
        din1 => grp_fu_349_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p2);

    kws_fmul_32ns_32neOg_U350 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_130_reg_793,
        din1 => tmp_scale_fc,
        ce => ap_const_logic_1,
        dout => grp_fu_354_p2);

    kws_fdiv_32ns_32nGfk_U351 : component kws_fdiv_32ns_32nGfk
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_367,
        din1 => output_scale_reg_809,
        ce => grp_fu_359_ce,
        dout => grp_fu_359_p2);

    kws_sitofp_32s_32OgC_U352 : component kws_sitofp_32s_32OgC
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_363_p0,
        ce => grp_fu_363_ce,
        dout => grp_fu_363_p1);

    kws_mac_muladd_8sLf8_U353 : component kws_mac_muladd_8sLf8
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => fc_weights2_V_load_reg_897,
        din1 => x_V_load_reg_887,
        din2 => y_V_q0,
        dout => grp_fu_784_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state31) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state31)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter14 <= ap_enable_reg_pp3_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter15 <= ap_enable_reg_pp3_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter16 <= ap_enable_reg_pp3_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter17 <= ap_enable_reg_pp3_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter18 <= ap_enable_reg_pp3_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter19 <= ap_enable_reg_pp3_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter20 <= ap_enable_reg_pp3_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter21 <= ap_enable_reg_pp3_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter22 <= ap_enable_reg_pp3_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter23 <= ap_enable_reg_pp3_iter22;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp3_iter23 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_819 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_278 <= i_reg_823;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_278 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    im_0_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                im_0_reg_323 <= ap_const_lv7_0;
            elsif (((icmp_ln48_reg_836 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                im_0_reg_323 <= im_reg_868;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten_reg_301 <= ap_const_lv10_0;
            elsif (((icmp_ln48_reg_836 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten_reg_301 <= add_ln48_reg_840;
            end if; 
        end if;
    end process;

    om1_0_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                om1_0_reg_312 <= ap_const_lv4_0;
            elsif (((icmp_ln48_reg_836 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                om1_0_reg_312 <= select_ln51_1_reg_851;
            end if; 
        end if;
    end process;

    om2_0_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                om2_0_reg_334 <= ap_const_lv4_0;
            elsif (((icmp_ln56_fu_767_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                om2_0_reg_334 <= om_8_fu_773_p2;
            end if; 
        end if;
    end process;

    om_0_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                om_0_reg_290 <= ap_const_lv4_0;
            elsif (((icmp_ln43_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                om_0_reg_290 <= om_fu_396_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln48_reg_840 <= add_ln48_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_reg_836_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                add_ln68_reg_902 <= grp_fu_784_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_1_reg_873_pp2_iter7_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                and_ln284_reg_952 <= and_ln284_fu_654_p2;
                and_ln295_reg_962 <= and_ln295_fu_686_p2;
                icmp_ln278_reg_937 <= icmp_ln278_fu_560_p2;
                icmp_ln285_reg_942 <= icmp_ln285_fu_588_p2;
                p_Result_62_reg_927 <= reg_V_fu_519_p1(31 downto 31);
                reg_V_reg_922 <= reg_V_fu_519_p1;
                select_ln285_reg_957 <= select_ln285_fu_666_p3;
                sh_amt_11_reg_947 <= sh_amt_11_fu_594_p2;
                    tmp_96_reg_932(22 downto 0) <= tmp_96_fu_552_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_reg_836 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                fc_weights2_V_load_reg_897 <= fc_weights2_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_1_reg_873_pp2_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                i_op_assign_4_reg_912 <= grp_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_reg_823 <= i_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln37_reg_819 <= icmp_ln37_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln48_reg_836 <= icmp_ln48_fu_407_p2;
                icmp_ln48_reg_836_pp2_iter1_reg <= icmp_ln48_reg_836;
                icmp_ln49_1_reg_873_pp2_iter1_reg <= icmp_ln49_1_reg_873;
                icmp_ln49_1_reg_873_pp2_iter2_reg <= icmp_ln49_1_reg_873_pp2_iter1_reg;
                icmp_ln49_1_reg_873_pp2_iter3_reg <= icmp_ln49_1_reg_873_pp2_iter2_reg;
                icmp_ln49_1_reg_873_pp2_iter4_reg <= icmp_ln49_1_reg_873_pp2_iter3_reg;
                icmp_ln49_1_reg_873_pp2_iter5_reg <= icmp_ln49_1_reg_873_pp2_iter4_reg;
                icmp_ln49_1_reg_873_pp2_iter6_reg <= icmp_ln49_1_reg_873_pp2_iter5_reg;
                icmp_ln49_1_reg_873_pp2_iter7_reg <= icmp_ln49_1_reg_873_pp2_iter6_reg;
                icmp_ln49_1_reg_873_pp2_iter8_reg <= icmp_ln49_1_reg_873_pp2_iter7_reg;
                y_V_addr_1_reg_862_pp2_iter1_reg <= y_V_addr_1_reg_862;
                y_V_addr_1_reg_862_pp2_iter2_reg <= y_V_addr_1_reg_862_pp2_iter1_reg;
                y_V_addr_1_reg_862_pp2_iter3_reg <= y_V_addr_1_reg_862_pp2_iter2_reg;
                y_V_addr_1_reg_862_pp2_iter4_reg <= y_V_addr_1_reg_862_pp2_iter3_reg;
                y_V_addr_1_reg_862_pp2_iter5_reg <= y_V_addr_1_reg_862_pp2_iter4_reg;
                y_V_addr_1_reg_862_pp2_iter6_reg <= y_V_addr_1_reg_862_pp2_iter5_reg;
                y_V_addr_1_reg_862_pp2_iter7_reg <= y_V_addr_1_reg_862_pp2_iter6_reg;
                y_V_addr_1_reg_862_pp2_iter8_reg <= y_V_addr_1_reg_862_pp2_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln49_1_reg_873 <= icmp_ln49_1_fu_464_p2;
                select_ln51_reg_845 <= select_ln51_fu_431_p3;
                y_V_addr_1_reg_862 <= zext_ln51_fu_447_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln56_reg_972 <= icmp_ln56_fu_767_p2;
                icmp_ln56_reg_972_pp3_iter1_reg <= icmp_ln56_reg_972;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln56_reg_972_pp3_iter10_reg <= icmp_ln56_reg_972_pp3_iter9_reg;
                icmp_ln56_reg_972_pp3_iter11_reg <= icmp_ln56_reg_972_pp3_iter10_reg;
                icmp_ln56_reg_972_pp3_iter12_reg <= icmp_ln56_reg_972_pp3_iter11_reg;
                icmp_ln56_reg_972_pp3_iter13_reg <= icmp_ln56_reg_972_pp3_iter12_reg;
                icmp_ln56_reg_972_pp3_iter14_reg <= icmp_ln56_reg_972_pp3_iter13_reg;
                icmp_ln56_reg_972_pp3_iter15_reg <= icmp_ln56_reg_972_pp3_iter14_reg;
                icmp_ln56_reg_972_pp3_iter16_reg <= icmp_ln56_reg_972_pp3_iter15_reg;
                icmp_ln56_reg_972_pp3_iter17_reg <= icmp_ln56_reg_972_pp3_iter16_reg;
                icmp_ln56_reg_972_pp3_iter18_reg <= icmp_ln56_reg_972_pp3_iter17_reg;
                icmp_ln56_reg_972_pp3_iter19_reg <= icmp_ln56_reg_972_pp3_iter18_reg;
                icmp_ln56_reg_972_pp3_iter20_reg <= icmp_ln56_reg_972_pp3_iter19_reg;
                icmp_ln56_reg_972_pp3_iter21_reg <= icmp_ln56_reg_972_pp3_iter20_reg;
                icmp_ln56_reg_972_pp3_iter22_reg <= icmp_ln56_reg_972_pp3_iter21_reg;
                icmp_ln56_reg_972_pp3_iter2_reg <= icmp_ln56_reg_972_pp3_iter1_reg;
                icmp_ln56_reg_972_pp3_iter3_reg <= icmp_ln56_reg_972_pp3_iter2_reg;
                icmp_ln56_reg_972_pp3_iter4_reg <= icmp_ln56_reg_972_pp3_iter3_reg;
                icmp_ln56_reg_972_pp3_iter5_reg <= icmp_ln56_reg_972_pp3_iter4_reg;
                icmp_ln56_reg_972_pp3_iter6_reg <= icmp_ln56_reg_972_pp3_iter5_reg;
                icmp_ln56_reg_972_pp3_iter7_reg <= icmp_ln56_reg_972_pp3_iter6_reg;
                icmp_ln56_reg_972_pp3_iter8_reg <= icmp_ln56_reg_972_pp3_iter7_reg;
                icmp_ln56_reg_972_pp3_iter9_reg <= icmp_ln56_reg_972_pp3_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_407_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                im_reg_868 <= im_fu_458_p2;
                select_ln51_1_reg_851 <= select_ln51_1_fu_439_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_972_pp3_iter21_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                outprepare_reg_991 <= grp_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                output_scale_reg_809 <= grp_fu_349_p2;
                tmp_scale_1_reg_814 <= grp_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln56_reg_972_pp3_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_1_reg_873_pp2_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then
                reg_367 <= grp_fu_363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln49_1_reg_873_pp2_iter8_reg = ap_const_lv1_1))) then
                select_ln303_reg_967 <= select_ln303_fu_760_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((fc2final_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_130_reg_793 <= fc2final_scale_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln49_1_reg_873_pp2_iter4_reg = ap_const_lv1_1))) then
                tmp_296_reg_907 <= grp_fu_363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln49_1_reg_873_pp2_iter7_reg = ap_const_lv1_1))) then
                val_assign_reg_917 <= grp_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                x_V_load_reg_887 <= x_V_q0;
            end if;
        end if;
    end process;
    tmp_96_reg_932(23) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, fc2final_scale_V_empty_n, ap_enable_reg_pp3_iter23, ap_CS_fsm_pp2_stage0, icmp_ln37_fu_373_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, icmp_ln48_fu_407_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, icmp_ln56_fu_767_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter22, icmp_ln43_fu_390_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((fc2final_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln37_fu_373_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln37_fu_373_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln43_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln48_fu_407_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln48_fu_407_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln56_fu_767_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp3_iter22 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter23 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln56_fu_767_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp3_iter22 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter23 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln215_fu_497_p2 <= std_logic_vector(unsigned(sub_ln215_fu_491_p2) + unsigned(zext_ln49_fu_470_p1));
    add_ln48_fu_413_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_305_p4) + unsigned(ap_const_lv10_1));
    and_ln282_fu_628_p2 <= (xor_ln278_fu_622_p2 and icmp_ln282_fu_576_p2);
    and_ln284_fu_654_p2 <= (xor_ln282_fu_648_p2 and icmp_ln284_fu_582_p2);
    and_ln285_11_fu_741_p2 <= (xor_ln285_fu_736_p2 and and_ln284_reg_952);
    and_ln285_fu_660_p2 <= (icmp_ln285_fu_588_p2 and and_ln284_fu_654_p2);
    and_ln295_fu_686_p2 <= (xor_ln284_fu_680_p2 and icmp_ln295_fu_610_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(10);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state30 <= ap_CS_fsm(11);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state55 <= ap_CS_fsm(13);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln37_reg_819)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln37_reg_819 = ap_const_lv1_0) and (in_stream_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln37_reg_819)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln37_reg_819 = ap_const_lv1_0) and (in_stream_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter23, icmp_ln56_reg_972_pp3_iter22_reg)
    begin
                ap_block_pp3_stage0_01001 <= ((icmp_ln56_reg_972_pp3_iter22_reg = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter23 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter23, icmp_ln56_reg_972_pp3_iter22_reg)
    begin
                ap_block_pp3_stage0_11001 <= ((icmp_ln56_reg_972_pp3_iter22_reg = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter23 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter23, icmp_ln56_reg_972_pp3_iter22_reg)
    begin
                ap_block_pp3_stage0_subdone <= ((icmp_ln56_reg_972_pp3_iter22_reg = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter23 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, fc2final_scale_V_empty_n)
    begin
                ap_block_state1 <= ((fc2final_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state11_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp3_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp3_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp3_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp3_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp3_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp3_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp3_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp3_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp3_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp3_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp3_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp3_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp3_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state54_pp3_stage0_iter23_assign_proc : process(out_stream_V_full_n, icmp_ln56_reg_972_pp3_iter22_reg)
    begin
                ap_block_state54_pp3_stage0_iter23 <= ((icmp_ln56_reg_972_pp3_iter22_reg = ap_const_lv1_0) and (out_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter1_assign_proc : process(in_stream_V_V_empty_n, icmp_ln37_reg_819)
    begin
                ap_block_state7_pp0_stage0_iter1 <= ((icmp_ln37_reg_819 = ap_const_lv1_0) and (in_stream_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln37_fu_373_p2)
    begin
        if ((icmp_ln37_fu_373_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state11_assign_proc : process(icmp_ln48_fu_407_p2)
    begin
        if ((icmp_ln48_fu_407_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state31_assign_proc : process(icmp_ln56_fu_767_p2)
    begin
        if ((icmp_ln56_fu_767_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9)
    begin
        if (((ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter23, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12, ap_enable_reg_pp3_iter13, ap_enable_reg_pp3_iter14, ap_enable_reg_pp3_iter15, ap_enable_reg_pp3_iter16, ap_enable_reg_pp3_iter17, ap_enable_reg_pp3_iter18, ap_enable_reg_pp3_iter19, ap_enable_reg_pp3_iter20, ap_enable_reg_pp3_iter21, ap_enable_reg_pp3_iter22)
    begin
        if (((ap_enable_reg_pp3_iter22 = ap_const_logic_0) and (ap_enable_reg_pp3_iter21 = ap_const_logic_0) and (ap_enable_reg_pp3_iter20 = ap_const_logic_0) and (ap_enable_reg_pp3_iter19 = ap_const_logic_0) and (ap_enable_reg_pp3_iter18 = ap_const_logic_0) and (ap_enable_reg_pp3_iter17 = ap_const_logic_0) and (ap_enable_reg_pp3_iter16 = ap_const_logic_0) and (ap_enable_reg_pp3_iter15 = ap_const_logic_0) and (ap_enable_reg_pp3_iter14 = ap_const_logic_0) and (ap_enable_reg_pp3_iter13 = ap_const_logic_0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter23 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_282_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln37_reg_819, i_0_reg_278, i_reg_823)
    begin
        if (((icmp_ln37_reg_819 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_282_p4 <= i_reg_823;
        else 
            ap_phi_mux_i_0_phi_fu_282_p4 <= i_0_reg_278;
        end if; 
    end process;


    ap_phi_mux_im_0_phi_fu_327_p4_assign_proc : process(im_0_reg_323, ap_CS_fsm_pp2_stage0, icmp_ln48_reg_836, im_reg_868, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln48_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_im_0_phi_fu_327_p4 <= im_reg_868;
        else 
            ap_phi_mux_im_0_phi_fu_327_p4 <= im_0_reg_323;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_305_p4_assign_proc : process(indvar_flatten_reg_301, ap_CS_fsm_pp2_stage0, icmp_ln48_reg_836, add_ln48_reg_840, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln48_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_305_p4 <= add_ln48_reg_840;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_305_p4 <= indvar_flatten_reg_301;
        end if; 
    end process;


    ap_phi_mux_om1_0_phi_fu_316_p4_assign_proc : process(om1_0_reg_312, ap_CS_fsm_pp2_stage0, icmp_ln48_reg_836, select_ln51_1_reg_851, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln48_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_om1_0_phi_fu_316_p4 <= select_ln51_1_reg_851;
        else 
            ap_phi_mux_om1_0_phi_fu_316_p4 <= om1_0_reg_312;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exp_V_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_534_p4),9));

    fc2final_scale_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, fc2final_scale_V_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            fc2final_scale_V_blk_n <= fc2final_scale_V_empty_n;
        else 
            fc2final_scale_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fc2final_scale_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, fc2final_scale_V_empty_n)
    begin
        if ((not(((fc2final_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fc2final_scale_V_read <= ap_const_logic_1;
        else 
            fc2final_scale_V_read <= ap_const_logic_0;
        end if; 
    end process;

    fc_bias2_V_address0 <= zext_ln51_fu_447_p1(4 - 1 downto 0);

    fc_bias2_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            fc_bias2_V_ce0 <= ap_const_logic_1;
        else 
            fc_bias2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_weights2_V_address0 <= sext_ln215_fu_503_p1(10 - 1 downto 0);

    fc_weights2_V_ce0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            fc_weights2_V_ce0 <= ap_const_logic_1;
        else 
            fc_weights2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_349_p0_assign_proc : process(reg_367, ap_enable_reg_pp2_iter3, tmp_130_reg_793, ap_CS_fsm_state2, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            grp_fu_349_p0 <= reg_367;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_349_p0 <= tmp_130_reg_793;
        else 
            grp_fu_349_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_349_p1_assign_proc : process(fc_weight2_scale, ap_enable_reg_pp2_iter3, ap_CS_fsm_state2, tmp_scale_1_reg_814, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            grp_fu_349_p1 <= tmp_scale_1_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_349_p1 <= fc_weight2_scale;
        else 
            grp_fu_349_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_359_ce_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            grp_fu_359_ce <= ap_const_logic_1;
        else 
            grp_fu_359_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_363_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp3_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            grp_fu_363_ce <= ap_const_logic_1;
        else 
            grp_fu_363_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_363_p0_assign_proc : process(y_V_q0, ap_block_pp3_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, sext_ln1428_fu_508_p1, add_ln68_reg_902, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, ap_block_pp2_stage1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_363_p0 <= y_V_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_363_p0 <= add_ln68_reg_902;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            grp_fu_363_p0 <= sext_ln1428_fu_508_p1;
        else 
            grp_fu_363_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_379_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_282_p4) + unsigned(ap_const_lv7_1));
    icmp_ln278_fu_560_p2 <= "1" when (trunc_ln262_fu_522_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_fu_576_p2 <= "1" when (p_Result_s_fu_534_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_fu_582_p2 <= "1" when (signed(sh_amt_fu_566_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_fu_588_p2 <= "1" when (signed(sh_amt_fu_566_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_fu_610_p2 <= "1" when (signed(tmp_fu_600_p4) < signed(ap_const_lv4_1)) else "0";
    icmp_ln37_fu_373_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_282_p4 = ap_const_lv7_40) else "0";
    icmp_ln43_fu_390_p2 <= "1" when (om_0_reg_290 = ap_const_lv4_C) else "0";
    icmp_ln48_fu_407_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_305_p4 = ap_const_lv10_300) else "0";
    icmp_ln49_1_fu_464_p2 <= "1" when (im_fu_458_p2 = ap_const_lv7_40) else "0";
    icmp_ln49_fu_425_p2 <= "1" when (ap_phi_mux_im_0_phi_fu_327_p4 = ap_const_lv7_40) else "0";
    icmp_ln56_fu_767_p2 <= "1" when (om2_0_reg_334 = ap_const_lv4_C) else "0";
    im_fu_458_p2 <= std_logic_vector(unsigned(select_ln51_fu_431_p3) + unsigned(ap_const_lv7_1));

    in_stream_V_V_blk_n_assign_proc : process(in_stream_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln37_reg_819)
    begin
        if (((icmp_ln37_reg_819 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_V_V_blk_n <= in_stream_V_V_empty_n;
        else 
            in_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln37_reg_819, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_reg_819 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_V_V_read <= ap_const_logic_1;
        else 
            in_stream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln286_fu_616_p2 <= std_logic_vector(shift_right(unsigned(tmp_96_fu_552_p3),to_integer(unsigned('0' & sext_ln281_fu_572_p1(24-1 downto 0)))));
    om_7_fu_419_p2 <= std_logic_vector(unsigned(ap_phi_mux_om1_0_phi_fu_316_p4) + unsigned(ap_const_lv4_1));
    om_8_fu_773_p2 <= std_logic_vector(unsigned(om2_0_reg_334) + unsigned(ap_const_lv4_1));
    om_fu_396_p2 <= std_logic_vector(unsigned(om_0_reg_290) + unsigned(ap_const_lv4_1));
    or_ln282_fu_642_p2 <= (icmp_ln282_fu_576_p2 or icmp_ln278_fu_560_p2);
    or_ln284_fu_674_p2 <= (or_ln282_fu_642_p2 or icmp_ln284_fu_582_p2);

    out_stream_V_blk_n_assign_proc : process(out_stream_V_full_n, ap_enable_reg_pp3_iter23, ap_block_pp3_stage0, icmp_ln56_reg_972_pp3_iter22_reg)
    begin
        if (((icmp_ln56_reg_972_pp3_iter22_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            out_stream_V_blk_n <= out_stream_V_full_n;
        else 
            out_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_din <= outprepare_reg_991;

    out_stream_V_write_assign_proc : process(ap_enable_reg_pp3_iter23, icmp_ln56_reg_972_pp3_iter22_reg, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln56_reg_972_pp3_iter22_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            out_stream_V_write <= ap_const_logic_1;
        else 
            out_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_534_p4 <= reg_V_fu_519_p1(30 downto 23);
    reg_V_fu_519_p1 <= val_assign_reg_917;
    select_ln278_fu_729_p3 <= 
        ap_const_lv32_0 when (icmp_ln278_reg_937(0) = '1') else 
        select_ln295_fu_722_p3;
    select_ln282_fu_634_p3 <= 
        tmp_96_fu_552_p3 when (and_ln282_fu_628_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln285_11_fu_746_p3 <= 
        select_ln288_fu_705_p3 when (and_ln285_11_fu_741_p2(0) = '1') else 
        select_ln278_fu_729_p3;
    select_ln285_fu_666_p3 <= 
        lshr_ln286_fu_616_p2 when (and_ln285_fu_660_p2(0) = '1') else 
        select_ln282_fu_634_p3;
    select_ln288_fu_705_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_128_fu_698_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln295_fu_722_p3 <= 
        shl_ln297_fu_713_p2 when (and_ln295_reg_962(0) = '1') else 
        zext_ln285_fu_719_p1;
    select_ln303_fu_760_p3 <= 
        sub_ln461_fu_754_p2 when (p_Result_62_reg_927(0) = '1') else 
        select_ln285_11_fu_746_p3;
    select_ln51_1_fu_439_p3 <= 
        om_7_fu_419_p2 when (icmp_ln49_fu_425_p2(0) = '1') else 
        ap_phi_mux_om1_0_phi_fu_316_p4;
    select_ln51_fu_431_p3 <= 
        ap_const_lv7_0 when (icmp_ln49_fu_425_p2(0) = '1') else 
        ap_phi_mux_im_0_phi_fu_327_p4;
        sext_ln1428_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(fc_bias2_V_q0),32));

        sext_ln215_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln215_fu_497_p2),64));

        sext_ln281_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_566_p2),24));

        sext_ln294_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_11_reg_947),32));

    sh_amt_11_fu_594_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_fu_566_p2));
    sh_amt_fu_566_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_544_p1));
    shl_ln297_fu_713_p2 <= std_logic_vector(shift_left(unsigned(zext_ln283_fu_692_p1),to_integer(unsigned('0' & sext_ln294_fu_695_p1(31-1 downto 0)))));
    sub_ln215_fu_491_p2 <= std_logic_vector(unsigned(tmp_108_fu_473_p3) - unsigned(zext_ln215_fu_487_p1));
    sub_ln461_fu_754_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln285_11_fu_746_p3));
    tmp_108_fu_473_p3 <= (select_ln51_reg_845 & ap_const_lv4_0);
    tmp_109_fu_480_p3 <= (select_ln51_reg_845 & ap_const_lv2_0);
    tmp_128_fu_698_p3 <= reg_V_reg_922(31 downto 31);
    tmp_96_fu_552_p3 <= (ap_const_lv1_1 & trunc_ln270_fu_548_p1);
    tmp_fu_600_p4 <= sh_amt_11_fu_594_p2(8 downto 5);
    trunc_ln262_fu_522_p1 <= reg_V_fu_519_p1(31 - 1 downto 0);
    trunc_ln270_fu_548_p1 <= reg_V_fu_519_p1(23 - 1 downto 0);

    x_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, zext_ln40_fu_385_p1, zext_ln51_1_fu_453_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            x_V_address0 <= zext_ln51_1_fu_453_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_address0 <= zext_ln40_fu_385_p1(6 - 1 downto 0);
        else 
            x_V_address0 <= "XXXXXX";
        end if; 
    end process;


    x_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            x_V_ce0 <= ap_const_logic_1;
        else 
            x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln37_reg_819, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_reg_819 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_we0 <= ap_const_logic_1;
        else 
            x_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln278_fu_622_p2 <= (icmp_ln278_fu_560_p2 xor ap_const_lv1_1);
    xor_ln282_fu_648_p2 <= (or_ln282_fu_642_p2 xor ap_const_lv1_1);
    xor_ln284_fu_680_p2 <= (or_ln284_fu_674_p2 xor ap_const_lv1_1);
    xor_ln285_fu_736_p2 <= (icmp_ln285_reg_942 xor ap_const_lv1_1);

    y_V_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_state9, y_V_addr_1_reg_862, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp2_stage0, zext_ln45_fu_402_p1, zext_ln58_fu_779_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            y_V_address0 <= zext_ln58_fu_779_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            y_V_address0 <= y_V_addr_1_reg_862;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_V_address0 <= zext_ln45_fu_402_p1(4 - 1 downto 0);
        else 
            y_V_address0 <= "XXXX";
        end if; 
    end process;


    y_V_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, y_V_addr_1_reg_862_pp2_iter1_reg, y_V_addr_1_reg_862_pp2_iter8_reg, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter9, ap_block_pp2_stage0, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            y_V_address1 <= y_V_addr_1_reg_862_pp2_iter8_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            y_V_address1 <= y_V_addr_1_reg_862_pp2_iter1_reg;
        else 
            y_V_address1 <= "XXXX";
        end if; 
    end process;


    y_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_CS_fsm_state9, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            y_V_ce0 <= ap_const_logic_1;
        else 
            y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_V_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter9)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            y_V_ce1 <= ap_const_logic_1;
        else 
            y_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_V_d1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, grp_fu_784_p3, ap_enable_reg_pp2_iter1, select_ln303_reg_967, ap_enable_reg_pp2_iter9, ap_block_pp2_stage0, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            y_V_d1 <= select_ln303_reg_967;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            y_V_d1 <= grp_fu_784_p3;
        else 
            y_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_V_we0_assign_proc : process(ap_CS_fsm_state9, icmp_ln43_fu_390_p2)
    begin
        if (((icmp_ln43_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            y_V_we0 <= ap_const_logic_1;
        else 
            y_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_V_we1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln48_reg_836_pp2_iter1_reg, icmp_ln49_1_reg_873_pp2_iter8_reg, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter9)
    begin
        if ((((icmp_ln48_reg_836_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_1_reg_873_pp2_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            y_V_we1 <= ap_const_logic_1;
        else 
            y_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln215_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_fu_480_p3),11));
    zext_ln283_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_reg_932),32));
    zext_ln285_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln285_reg_957),32));
    zext_ln40_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_278),64));
    zext_ln45_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(om_0_reg_290),64));
    zext_ln49_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_reg_851),11));
    zext_ln51_1_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_fu_431_p3),64));
    zext_ln51_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_fu_439_p3),64));
    zext_ln58_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(om2_0_reg_334),64));
end behav;
