-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fbank is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_0_ce1 : OUT STD_LOGIC;
    output_0_we1 : OUT STD_LOGIC;
    output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_1_ce1 : OUT STD_LOGIC;
    output_1_we1 : OUT STD_LOGIC;
    output_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_2_ce1 : OUT STD_LOGIC;
    output_2_we1 : OUT STD_LOGIC;
    output_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_3_ce0 : OUT STD_LOGIC;
    output_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_3_ce1 : OUT STD_LOGIC;
    output_3_we1 : OUT STD_LOGIC;
    output_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    spectrogram_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    spectrogram_3_ce0 : OUT STD_LOGIC;
    spectrogram_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    spectrogram_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    spectrogram_0_ce0 : OUT STD_LOGIC;
    spectrogram_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    spectrogram_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    spectrogram_1_ce0 : OUT STD_LOGIC;
    spectrogram_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    spectrogram_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    spectrogram_2_ce0 : OUT STD_LOGIC;
    spectrogram_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fbank is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_101 : STD_LOGIC_VECTOR (8 downto 0) := "100000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv11_7A8 : STD_LOGIC_VECTOR (10 downto 0) := "11110101000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1FC : STD_LOGIC_VECTOR (8 downto 0) := "111111100";
    constant ap_const_lv9_FD : STD_LOGIC_VECTOR (8 downto 0) := "011111101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_28 : STD_LOGIC_VECTOR (6 downto 0) := "0101000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_ce0 : STD_LOGIC;
    signal weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal band_mapper_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal band_mapper_ce0 : STD_LOGIC;
    signal band_mapper_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_reg_387 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_3_reg_398 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_409 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal i_fu_471_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_44_fu_483_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln67_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_45_fu_495_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln93_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_911 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln93_fu_507_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln97_1_fu_533_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_920 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln97_fu_541_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln97_reg_927 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_931 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_555_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_47_fu_612_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_47_reg_944 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln104_1_fu_630_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln104_1_reg_949 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln100_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln104_fu_634_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln104_reg_954 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln108_fu_664_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln108_reg_959 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln102_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_2_fu_750_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln104_2_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal spec_val_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal weights_load_reg_1009 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_reg_1014 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal weighted_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln107_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_0_addr_1_reg_1031 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_1_addr_1_reg_1037 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_2_addr_1_reg_1043 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_3_addr_1_reg_1049 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln108_fu_802_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln108_reg_1055 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_s_fu_809_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_307_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln110_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln110_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal trunc_ln111_fu_834_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln111_reg_1076 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln111_fu_851_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln111_reg_1081 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_0_addr_2_reg_1086 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal output_1_addr_2_reg_1092 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_2_addr_2_reg_1098 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_3_addr_2_reg_1104 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_316_fu_866_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_316_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_19_fu_880_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal i_0_reg_354 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln28_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_365 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln48_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_2_reg_376 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_i_3_phi_fu_402_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal i_4_reg_420 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_1_reg_431 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln97_3_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_3_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_4_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln108_3_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_1_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln95_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_46_fu_513_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_fu_525_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_111_fu_561_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_112_fu_572_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln97_fu_568_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln97_1_fu_579_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln97_2_fu_589_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln97_fu_583_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln97_1_fu_592_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_113_fu_622_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln104_fu_618_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_115_fu_640_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_116_fu_652_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln108_2_fu_660_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln108_1_fu_648_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_131_fu_676_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln104_2_fu_686_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln104_1_fu_690_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln104_2_fu_700_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln104_fu_712_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln104_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_1_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_fu_722_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln104_2_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_1_fu_736_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln107_fu_764_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_132_fu_776_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln108_fu_785_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln108_1_fu_789_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_809_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal channel_1_fu_823_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_133_fu_837_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln111_fu_847_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_316_fu_866_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_443_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component kws_faddfsub_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fsqrt_32ns_32zec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_mux_416_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fbank_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fbank_band_mapper IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    weights_U : component fbank_weights
    generic map (
        DataWidth => 32,
        AddressRange => 257,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_address0,
        ce0 => weights_ce0,
        q0 => weights_q0);

    band_mapper_U : component fbank_band_mapper
    generic map (
        DataWidth => 7,
        AddressRange => 257,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => band_mapper_address0,
        ce0 => band_mapper_ce0,
        q0 => band_mapper_q0);

    kws_faddfsub_32nscud_U80 : component kws_faddfsub_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_443_p0,
        din1 => grp_fu_443_p1,
        opcode => grp_fu_443_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_443_p2);

    kws_fmul_32ns_32neOg_U81 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => spec_val_reg_1003,
        din1 => weights_load_reg_1009,
        ce => ap_const_logic_1,
        dout => grp_fu_447_p2);

    kws_fsqrt_32ns_32zec_U82 : component kws_fsqrt_32ns_32zec
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => select_ln104_2_reg_988,
        ce => ap_const_logic_1,
        dout => grp_fu_451_p2);

    kws_mux_416_32_1_1_U83 : component kws_mux_416_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => output_0_q0,
        din1 => output_1_q0,
        din2 => output_2_q0,
        din3 => output_3_q0,
        din4 => tmp_s_fu_809_p5,
        dout => tmp_s_fu_809_p6);

    kws_mux_416_32_1_1_U84 : component kws_mux_416_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => output_1_q0,
        din1 => output_2_q0,
        din2 => output_3_q0,
        din3 => output_0_q0,
        din4 => tmp_316_fu_866_p5,
        dout => tmp_316_fu_866_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_489_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_489_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_465_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_354 <= i_fu_471_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_354 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_1_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_365 <= ap_const_lv9_0;
            elsif (((icmp_ln48_fu_477_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_365 <= i_44_fu_483_p2;
            end if; 
        end if;
    end process;

    i_2_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_477_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_2_reg_376 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_489_p2 = ap_const_lv1_0))) then 
                i_2_reg_376 <= i_45_fu_495_p2;
            end if; 
        end if;
    end process;

    i_3_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_489_p2 = ap_const_lv1_1))) then 
                i_3_reg_398 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln93_reg_911 = ap_const_lv1_0))) then 
                i_3_reg_398 <= select_ln97_1_reg_920;
            end if; 
        end if;
    end process;

    i_4_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_4_reg_420 <= ap_const_lv6_0;
            elsif (((icmp_ln102_fu_670_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_4_reg_420 <= i_47_reg_944;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_489_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_387 <= ap_const_lv11_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln93_fu_501_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_387 <= add_ln93_fu_507_p2;
            end if; 
        end if;
    end process;

    j_0_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_489_p2 = ap_const_lv1_1))) then 
                j_0_reg_409 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln93_fu_501_p2 = ap_const_lv1_0))) then 
                j_0_reg_409 <= j_fu_555_p2;
            end if; 
        end if;
    end process;

    j_1_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                j_1_reg_431 <= j_19_fu_880_p2;
            elsif (((icmp_ln100_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_1_reg_431 <= ap_const_lv9_2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                add_ln104_reg_954 <= add_ln104_fu_634_p2;
                    add_ln108_reg_959(9 downto 1) <= add_ln108_fu_664_p2(9 downto 1);
                    zext_ln104_1_reg_949(11 downto 6) <= zext_ln104_1_fu_630_p1(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_828_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                add_ln111_reg_1081 <= add_ln111_fu_851_p2;
                trunc_ln111_reg_1076 <= trunc_ln111_fu_834_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                channel_reg_1014 <= band_mapper_q0;
                spec_val_reg_1003 <= grp_fu_451_p2;
                weights_load_reg_1009 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_47_reg_944 <= i_47_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                icmp_ln107_reg_1027 <= icmp_ln107_fu_770_p2;
                weighted_reg_1022 <= grp_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                icmp_ln110_reg_1072 <= icmp_ln110_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln93_reg_911 <= icmp_ln93_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_770_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                output_0_addr_1_reg_1031 <= zext_ln108_3_fu_794_p1(9 - 1 downto 0);
                output_1_addr_1_reg_1037 <= zext_ln108_3_fu_794_p1(9 - 1 downto 0);
                output_2_addr_1_reg_1043 <= zext_ln108_3_fu_794_p1(9 - 1 downto 0);
                output_3_addr_1_reg_1049 <= zext_ln108_3_fu_794_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                output_0_addr_2_reg_1086 <= zext_ln111_1_fu_856_p1(9 - 1 downto 0);
                output_1_addr_2_reg_1092 <= zext_ln111_1_fu_856_p1(9 - 1 downto 0);
                output_2_addr_2_reg_1098 <= zext_ln111_1_fu_856_p1(9 - 1 downto 0);
                output_3_addr_2_reg_1104 <= zext_ln111_1_fu_856_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_456 <= grp_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                select_ln104_2_reg_988 <= select_ln104_2_fu_750_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln93_fu_501_p2 = ap_const_lv1_0))) then
                select_ln97_1_reg_920 <= select_ln97_1_fu_533_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_307_reg_1064 <= grp_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_316_reg_1110 <= tmp_316_fu_866_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln93_fu_501_p2 = ap_const_lv1_0))) then
                tmp_reg_931 <= select_ln97_fu_525_p3(5 downto 2);
                trunc_ln97_reg_927 <= trunc_ln97_fu_541_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_s_reg_1059 <= tmp_s_fu_809_p6;
                trunc_ln108_reg_1055 <= trunc_ln108_fu_802_p1;
            end if;
        end if;
    end process;
    zext_ln104_1_reg_949(5 downto 0) <= "000000";
    zext_ln104_1_reg_949(12) <= '0';
    add_ln108_reg_959(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln67_fu_489_p2, ap_CS_fsm_state5, icmp_ln93_fu_501_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state9, icmp_ln100_fu_606_p2, ap_CS_fsm_state10, icmp_ln102_fu_670_p2, ap_CS_fsm_state27, icmp_ln107_fu_770_p2, icmp_ln110_fu_828_p2, ap_CS_fsm_state34, ap_block_pp1_stage0_subdone, icmp_ln28_fu_465_p2, icmp_ln48_fu_477_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln28_fu_465_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln48_fu_477_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln67_fu_489_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln93_fu_501_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln93_fu_501_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln100_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln102_fu_670_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln107_fu_770_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln110_fu_828_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln104_1_fu_690_p2 <= std_logic_vector(unsigned(add_ln104_reg_954) + unsigned(zext_ln104_2_fu_686_p1));
    add_ln104_2_fu_700_p2 <= std_logic_vector(unsigned(zext_ln104_1_reg_949) + unsigned(zext_ln104_2_fu_686_p1));
    add_ln104_fu_634_p2 <= std_logic_vector(unsigned(zext_ln104_fu_618_p1) + unsigned(zext_ln104_1_fu_630_p1));
    add_ln107_fu_764_p2 <= std_logic_vector(signed(ap_const_lv9_1FC) + signed(j_1_reg_431));
    add_ln108_1_fu_789_p2 <= std_logic_vector(signed(sext_ln108_fu_785_p1) + signed(add_ln108_reg_959));
    add_ln108_fu_664_p2 <= std_logic_vector(unsigned(zext_ln108_2_fu_660_p1) + unsigned(zext_ln108_1_fu_648_p1));
    add_ln111_fu_851_p2 <= std_logic_vector(signed(sext_ln111_fu_847_p1) + signed(add_ln108_reg_959));
    add_ln93_fu_507_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_387) + unsigned(ap_const_lv11_1));
    add_ln97_1_fu_592_p2 <= std_logic_vector(unsigned(zext_ln97_2_fu_589_p1) + unsigned(add_ln97_fu_583_p2));
    add_ln97_fu_583_p2 <= std_logic_vector(unsigned(zext_ln97_fu_568_p1) + unsigned(zext_ln97_1_fu_579_p1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(35);
    ap_CS_fsm_state38 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(41);
    ap_CS_fsm_state44 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln93_fu_501_p2)
    begin
        if ((icmp_ln93_fu_501_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, icmp_ln100_fu_606_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln100_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_3_phi_fu_402_p4_assign_proc : process(i_3_reg_398, icmp_ln93_reg_911, ap_CS_fsm_pp1_stage0, select_ln97_1_reg_920, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln93_reg_911 = ap_const_lv1_0))) then 
            ap_phi_mux_i_3_phi_fu_402_p4 <= select_ln97_1_reg_920;
        else 
            ap_phi_mux_i_3_phi_fu_402_p4 <= i_3_reg_398;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln100_fu_606_p2)
    begin
        if (((icmp_ln100_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    band_mapper_address0 <= zext_ln107_fu_758_p1(9 - 1 downto 0);

    band_mapper_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            band_mapper_ce0 <= ap_const_logic_1;
        else 
            band_mapper_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    channel_1_fu_823_p2 <= std_logic_vector(unsigned(channel_reg_1014) + unsigned(ap_const_lv7_1));

    grp_fu_443_opcode_assign_proc : process(icmp_ln110_fu_828_p2, ap_CS_fsm_state34, ap_CS_fsm_state29, ap_CS_fsm_state39)
    begin
        if (((icmp_ln110_fu_828_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_443_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_443_opcode <= ap_const_lv2_0;
        else 
            grp_fu_443_opcode <= "XX";
        end if; 
    end process;


    grp_fu_443_p0_assign_proc : process(spec_val_reg_1003, tmp_s_reg_1059, ap_CS_fsm_state34, tmp_316_reg_1110, ap_CS_fsm_state29, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_443_p0 <= tmp_316_reg_1110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_443_p0 <= spec_val_reg_1003;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_443_p0 <= tmp_s_reg_1059;
        else 
            grp_fu_443_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_443_p1_assign_proc : process(reg_456, weighted_reg_1022, ap_CS_fsm_state34, ap_CS_fsm_state29, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_443_p1 <= reg_456;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_443_p1 <= weighted_reg_1022;
        else 
            grp_fu_443_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_44_fu_483_p2 <= std_logic_vector(unsigned(i_1_reg_365) + unsigned(ap_const_lv9_1));
    i_45_fu_495_p2 <= std_logic_vector(unsigned(i_2_reg_376) + unsigned(ap_const_lv9_1));
    i_46_fu_513_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_i_3_phi_fu_402_p4));
    i_47_fu_612_p2 <= std_logic_vector(unsigned(i_4_reg_420) + unsigned(ap_const_lv6_1));
    i_fu_471_p2 <= std_logic_vector(unsigned(i_0_reg_354) + unsigned(ap_const_lv6_1));
    icmp_ln100_fu_606_p2 <= "1" when (i_4_reg_420 = ap_const_lv6_31) else "0";
    icmp_ln102_fu_670_p2 <= "1" when (j_1_reg_431 = ap_const_lv9_100) else "0";
    icmp_ln104_1_fu_730_p2 <= "1" when (trunc_ln104_fu_712_p1 = ap_const_lv2_1) else "0";
    icmp_ln104_2_fu_744_p2 <= "1" when (trunc_ln104_fu_712_p1 = ap_const_lv2_2) else "0";
    icmp_ln104_fu_716_p2 <= "1" when (trunc_ln104_fu_712_p1 = ap_const_lv2_0) else "0";
    icmp_ln107_fu_770_p2 <= "1" when (unsigned(add_ln107_fu_764_p2) < unsigned(ap_const_lv9_FD)) else "0";
    icmp_ln110_fu_828_p2 <= "1" when (signed(channel_1_fu_823_p2) < signed(ap_const_lv7_28)) else "0";
    icmp_ln28_fu_465_p2 <= "1" when (i_0_reg_354 = ap_const_lv6_29) else "0";
    icmp_ln48_fu_477_p2 <= "1" when (i_1_reg_365 = ap_const_lv9_101) else "0";
    icmp_ln67_fu_489_p2 <= "1" when (i_2_reg_376 = ap_const_lv9_101) else "0";
    icmp_ln93_fu_501_p2 <= "1" when (indvar_flatten_reg_387 = ap_const_lv11_7A8) else "0";
    icmp_ln95_fu_519_p2 <= "1" when (j_0_reg_409 = ap_const_lv6_28) else "0";
    j_19_fu_880_p2 <= std_logic_vector(unsigned(j_1_reg_431) + unsigned(ap_const_lv9_1));
    j_fu_555_p2 <= std_logic_vector(unsigned(select_ln97_fu_525_p3) + unsigned(ap_const_lv6_1));

    output_0_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37, zext_ln108_3_fu_794_p1, zext_ln111_1_fu_856_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            output_0_address0 <= zext_ln111_1_fu_856_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_0_address0 <= zext_ln108_3_fu_794_p1(9 - 1 downto 0);
        else 
            output_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_0_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, output_0_addr_1_reg_1031, ap_CS_fsm_state34, output_0_addr_2_reg_1086, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln97_3_fu_598_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_0_address1 <= output_0_addr_2_reg_1086;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_0_address1 <= output_0_addr_1_reg_1031;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_0_address1 <= zext_ln97_3_fu_598_p1(9 - 1 downto 0);
        else 
            output_0_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_0_ce1 <= ap_const_logic_1;
        else 
            output_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_d1_assign_proc : process(reg_456, ap_CS_fsm_pp1_stage0, tmp_307_reg_1064, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_0_d1 <= reg_456;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_0_d1 <= tmp_307_reg_1064;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_0_d1 <= ap_const_lv32_0;
        else 
            output_0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, trunc_ln97_reg_927, icmp_ln107_reg_1027, trunc_ln108_reg_1055, icmp_ln110_reg_1072, ap_CS_fsm_state34, trunc_ln111_reg_1076, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if ((((trunc_ln111_reg_1076 = ap_const_lv2_3) and (icmp_ln110_reg_1072 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((trunc_ln108_reg_1055 = ap_const_lv2_0) and (icmp_ln107_reg_1027 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((trunc_ln97_reg_927 = ap_const_lv2_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_0_we1 <= ap_const_logic_1;
        else 
            output_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37, zext_ln108_3_fu_794_p1, zext_ln111_1_fu_856_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            output_1_address0 <= zext_ln111_1_fu_856_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_1_address0 <= zext_ln108_3_fu_794_p1(9 - 1 downto 0);
        else 
            output_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_1_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, output_1_addr_1_reg_1037, ap_CS_fsm_state34, output_1_addr_2_reg_1092, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln97_3_fu_598_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_1_address1 <= output_1_addr_2_reg_1092;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_1_address1 <= output_1_addr_1_reg_1037;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_1_address1 <= zext_ln97_3_fu_598_p1(9 - 1 downto 0);
        else 
            output_1_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    output_1_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_1_ce1 <= ap_const_logic_1;
        else 
            output_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_d1_assign_proc : process(reg_456, ap_CS_fsm_pp1_stage0, tmp_307_reg_1064, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_1_d1 <= reg_456;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_1_d1 <= tmp_307_reg_1064;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_1_d1 <= ap_const_lv32_0;
        else 
            output_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_1_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, trunc_ln97_reg_927, icmp_ln107_reg_1027, trunc_ln108_reg_1055, icmp_ln110_reg_1072, ap_CS_fsm_state34, trunc_ln111_reg_1076, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if ((((trunc_ln111_reg_1076 = ap_const_lv2_0) and (icmp_ln110_reg_1072 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((trunc_ln108_reg_1055 = ap_const_lv2_1) and (icmp_ln107_reg_1027 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((trunc_ln97_reg_927 = ap_const_lv2_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_1_we1 <= ap_const_logic_1;
        else 
            output_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37, zext_ln108_3_fu_794_p1, zext_ln111_1_fu_856_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            output_2_address0 <= zext_ln111_1_fu_856_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_2_address0 <= zext_ln108_3_fu_794_p1(9 - 1 downto 0);
        else 
            output_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_2_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, output_2_addr_1_reg_1043, ap_CS_fsm_state34, output_2_addr_2_reg_1098, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln97_3_fu_598_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_2_address1 <= output_2_addr_2_reg_1098;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_2_address1 <= output_2_addr_1_reg_1043;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_2_address1 <= zext_ln97_3_fu_598_p1(9 - 1 downto 0);
        else 
            output_2_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    output_2_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_2_ce1 <= ap_const_logic_1;
        else 
            output_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_d1_assign_proc : process(reg_456, ap_CS_fsm_pp1_stage0, tmp_307_reg_1064, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_2_d1 <= reg_456;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_2_d1 <= tmp_307_reg_1064;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_2_d1 <= ap_const_lv32_0;
        else 
            output_2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_2_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, trunc_ln97_reg_927, icmp_ln107_reg_1027, trunc_ln108_reg_1055, icmp_ln110_reg_1072, ap_CS_fsm_state34, trunc_ln111_reg_1076, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if ((((trunc_ln111_reg_1076 = ap_const_lv2_1) and (icmp_ln110_reg_1072 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((trunc_ln108_reg_1055 = ap_const_lv2_2) and (icmp_ln107_reg_1027 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((trunc_ln97_reg_927 = ap_const_lv2_2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_2_we1 <= ap_const_logic_1;
        else 
            output_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37, zext_ln108_3_fu_794_p1, zext_ln111_1_fu_856_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            output_3_address0 <= zext_ln111_1_fu_856_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_3_address0 <= zext_ln108_3_fu_794_p1(9 - 1 downto 0);
        else 
            output_3_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_3_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, output_3_addr_1_reg_1049, ap_CS_fsm_state34, output_3_addr_2_reg_1104, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln97_3_fu_598_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_3_address1 <= output_3_addr_2_reg_1104;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_3_address1 <= output_3_addr_1_reg_1049;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_3_address1 <= zext_ln97_3_fu_598_p1(9 - 1 downto 0);
        else 
            output_3_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    output_3_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_3_ce0 <= ap_const_logic_1;
        else 
            output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_3_ce1 <= ap_const_logic_1;
        else 
            output_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_d1_assign_proc : process(reg_456, ap_CS_fsm_pp1_stage0, tmp_307_reg_1064, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_3_d1 <= reg_456;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_3_d1 <= tmp_307_reg_1064;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_3_d1 <= ap_const_lv32_0;
        else 
            output_3_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_3_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, trunc_ln97_reg_927, icmp_ln107_reg_1027, trunc_ln108_reg_1055, icmp_ln110_reg_1072, ap_CS_fsm_state34, trunc_ln111_reg_1076, ap_CS_fsm_state44, ap_enable_reg_pp1_iter1)
    begin
        if ((((trunc_ln111_reg_1076 = ap_const_lv2_2) and (icmp_ln110_reg_1072 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((trunc_ln108_reg_1055 = ap_const_lv2_3) and (icmp_ln107_reg_1027 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((trunc_ln97_reg_927 = ap_const_lv2_3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_3_we1 <= ap_const_logic_1;
        else 
            output_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln104_1_fu_736_p3 <= 
        spectrogram_1_q0 when (icmp_ln104_1_fu_730_p2(0) = '1') else 
        select_ln104_fu_722_p3;
    select_ln104_2_fu_750_p3 <= 
        spectrogram_2_q0 when (icmp_ln104_2_fu_744_p2(0) = '1') else 
        select_ln104_1_fu_736_p3;
    select_ln104_fu_722_p3 <= 
        spectrogram_0_q0 when (icmp_ln104_fu_716_p2(0) = '1') else 
        spectrogram_3_q0;
    select_ln97_1_fu_533_p3 <= 
        i_46_fu_513_p2 when (icmp_ln95_fu_519_p2(0) = '1') else 
        ap_phi_mux_i_3_phi_fu_402_p4;
    select_ln97_fu_525_p3 <= 
        ap_const_lv6_0 when (icmp_ln95_fu_519_p2(0) = '1') else 
        j_0_reg_409;
        sext_ln108_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_fu_776_p4),10));

        sext_ln111_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_133_fu_837_p4),10));

    spectrogram_0_address0 <= zext_ln104_3_fu_695_p1(12 - 1 downto 0);

    spectrogram_0_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            spectrogram_0_ce0 <= ap_const_logic_1;
        else 
            spectrogram_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    spectrogram_1_address0 <= zext_ln104_4_fu_705_p1(12 - 1 downto 0);

    spectrogram_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            spectrogram_1_ce0 <= ap_const_logic_1;
        else 
            spectrogram_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    spectrogram_2_address0 <= zext_ln104_4_fu_705_p1(12 - 1 downto 0);

    spectrogram_2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            spectrogram_2_ce0 <= ap_const_logic_1;
        else 
            spectrogram_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    spectrogram_3_address0 <= zext_ln104_4_fu_705_p1(12 - 1 downto 0);

    spectrogram_3_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            spectrogram_3_ce0 <= ap_const_logic_1;
        else 
            spectrogram_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_111_fu_561_p3 <= (select_ln97_1_reg_920 & ap_const_lv3_0);
    tmp_112_fu_572_p3 <= (select_ln97_1_reg_920 & ap_const_lv1_0);
    tmp_113_fu_622_p3 <= (i_4_reg_420 & ap_const_lv6_0);
    tmp_115_fu_640_p3 <= (i_4_reg_420 & ap_const_lv3_0);
    tmp_116_fu_652_p3 <= (i_4_reg_420 & ap_const_lv1_0);
    tmp_131_fu_676_p4 <= j_1_reg_431(8 downto 2);
    tmp_132_fu_776_p4 <= channel_reg_1014(6 downto 2);
    tmp_133_fu_837_p4 <= channel_1_fu_823_p2(6 downto 2);
    tmp_316_fu_866_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln111_reg_1076),16));
    tmp_s_fu_809_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln108_fu_802_p1),16));
    trunc_ln104_fu_712_p1 <= j_1_reg_431(2 - 1 downto 0);
    trunc_ln108_fu_802_p1 <= channel_reg_1014(2 - 1 downto 0);
    trunc_ln111_fu_834_p1 <= channel_reg_1014(2 - 1 downto 0);
    trunc_ln97_fu_541_p1 <= select_ln97_fu_525_p3(2 - 1 downto 0);
    weights_address0 <= zext_ln107_fu_758_p1(9 - 1 downto 0);

    weights_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln104_1_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_113_fu_622_p3),13));
    zext_ln104_2_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_131_fu_676_p4),13));
    zext_ln104_3_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_1_fu_690_p2),64));
    zext_ln104_4_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_2_fu_700_p2),64));
    zext_ln104_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_420),13));
    zext_ln107_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_431),64));
    zext_ln108_1_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_115_fu_640_p3),10));
    zext_ln108_2_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_fu_652_p3),10));
    zext_ln108_3_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln108_1_fu_789_p2),64));
    zext_ln111_1_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln111_reg_1081),64));
    zext_ln97_1_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_fu_572_p3),10));
    zext_ln97_2_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_931),10));
    zext_ln97_3_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln97_1_fu_592_p2),64));
    zext_ln97_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_111_fu_561_p3),10));
end behav;
