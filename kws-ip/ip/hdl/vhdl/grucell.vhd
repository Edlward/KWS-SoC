-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity grucell is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_stream_V_V_empty_n : IN STD_LOGIC;
    in_stream_V_V_read : OUT STD_LOGIC;
    out_stream_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_V_V_full_n : IN STD_LOGIC;
    out_stream_V_V_write : OUT STD_LOGIC;
    keep_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    keep_stream_V_empty_n : IN STD_LOGIC;
    keep_stream_V_read : OUT STD_LOGIC;
    pw12gru_scale_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    pw12gru_scale_V_empty_n : IN STD_LOGIC;
    pw12gru_scale_V_read : OUT STD_LOGIC;
    gru2fc_scale_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    gru2fc_scale_V_full_n : IN STD_LOGIC;
    gru2fc_scale_V_write : OUT STD_LOGIC;
    zu_weights_scale : IN STD_LOGIC_VECTOR (31 downto 0);
    ru_weights_scale : IN STD_LOGIC_VECTOR (31 downto 0);
    hu_weights_scale : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_scale_gru1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_scale_gru2 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_scale_gru3 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_scale_gru4 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_scale_gru5 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_scale_gru6 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_scale_gru7 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_zu_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    weights_zu_V_ce0 : OUT STD_LOGIC;
    weights_zu_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_ru_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    weights_ru_V_ce0 : OUT STD_LOGIC;
    weights_ru_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_zw_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weights_zw_V_ce0 : OUT STD_LOGIC;
    weights_zw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_rw_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weights_rw_V_ce0 : OUT STD_LOGIC;
    weights_rw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_z_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_z_V_ce0 : OUT STD_LOGIC;
    bias_z_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_r_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_r_V_ce0 : OUT STD_LOGIC;
    bias_r_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_hw_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weights_hw_V_ce0 : OUT STD_LOGIC;
    weights_hw_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_hu_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    weights_hu_V_ce0 : OUT STD_LOGIC;
    weights_hu_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_h_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_h_V_ce0 : OUT STD_LOGIC;
    bias_h_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of grucell is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage1 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage2 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage3 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage4 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage5 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage6 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage7 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage8 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (94 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (94 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (94 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (94 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (94 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (94 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (94 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (94 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (94 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (94 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (94 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_43000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_42FE0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111111100000000000000000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_C40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110001000000";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gru_output_flag : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x_V_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_V_2_ce0 : STD_LOGIC;
    signal x_V_2_we0 : STD_LOGIC;
    signal x_V_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_1_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_ce0 : STD_LOGIC;
    signal state_1_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_1_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_ce1 : STD_LOGIC;
    signal state_1_V_we1 : STD_LOGIC;
    signal state_1_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_1_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zz_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zz_ce0 : STD_LOGIC;
    signal zz_we0 : STD_LOGIC;
    signal zz_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rr_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal rr_ce0 : STD_LOGIC;
    signal rr_we0 : STD_LOGIC;
    signal rr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hh_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal hh_ce0 : STD_LOGIC;
    signal hh_we0 : STD_LOGIC;
    signal hh_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_tmp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_tmp_ce0 : STD_LOGIC;
    signal state_tmp_we0 : STD_LOGIC;
    signal state_tmp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_table2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table2_ce0 : STD_LOGIC;
    signal mask_table2_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_table3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table3_ce0 : STD_LOGIC;
    signal one_half_table3_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal in_stream_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln93_reg_2922 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp7_iter13 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal icmp_ln201_reg_3433 : STD_LOGIC_VECTOR (0 downto 0);
    signal keep_stream_V_blk_n : STD_LOGIC;
    signal pw12gru_scale_V_blk_n : STD_LOGIC;
    signal gru2fc_scale_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state159 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state159 : signal is "none";
    signal j_0_reg_735 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_747 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_ze_V_reg_769 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_re_V_reg_781 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_0174_0_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0326_0_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal j2_0_reg_817 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_0322_0_reg_828 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_0406_0_reg_839 : STD_LOGIC_VECTOR (21 downto 0);
    signal k_0_reg_850 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_he_V_reg_872 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_0387_0_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal k4_0_reg_896 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_0510_0_reg_907 : STD_LOGIC_VECTOR (21 downto 0);
    signal j5_0_reg_918 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_ln187_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_min_0_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal i6_0_reg_953 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_0_reg_964 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1016_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1099 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state145_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state146_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state147_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state148_pp7_stage0_iter3 : BOOLEAN;
    signal ap_block_state149_pp7_stage0_iter4 : BOOLEAN;
    signal ap_block_state150_pp7_stage0_iter5 : BOOLEAN;
    signal ap_block_state151_pp7_stage0_iter6 : BOOLEAN;
    signal ap_block_state152_pp7_stage0_iter7 : BOOLEAN;
    signal ap_block_state153_pp7_stage0_iter8 : BOOLEAN;
    signal ap_block_state154_pp7_stage0_iter9 : BOOLEAN;
    signal ap_block_state155_pp7_stage0_iter10 : BOOLEAN;
    signal ap_block_state156_pp7_stage0_iter11 : BOOLEAN;
    signal ap_block_state157_pp7_stage0_iter12 : BOOLEAN;
    signal ap_block_state158_pp7_stage0_iter13 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp7_iter5 : STD_LOGIC := '0';
    signal grp_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1106 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state102_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state103_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state104_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state105_pp6_stage0_iter3 : BOOLEAN;
    signal ap_block_state106_pp6_stage0_iter4 : BOOLEAN;
    signal ap_block_state107_pp6_stage0_iter5 : BOOLEAN;
    signal ap_block_state108_pp6_stage0_iter6 : BOOLEAN;
    signal ap_block_state109_pp6_stage0_iter7 : BOOLEAN;
    signal ap_block_state110_pp6_stage0_iter8 : BOOLEAN;
    signal ap_block_state111_pp6_stage0_iter9 : BOOLEAN;
    signal ap_block_state112_pp6_stage0_iter10 : BOOLEAN;
    signal ap_block_state113_pp6_stage0_iter11 : BOOLEAN;
    signal ap_block_state114_pp6_stage0_iter12 : BOOLEAN;
    signal ap_block_state115_pp6_stage0_iter13 : BOOLEAN;
    signal ap_block_state116_pp6_stage0_iter14 : BOOLEAN;
    signal ap_block_state117_pp6_stage0_iter15 : BOOLEAN;
    signal ap_block_state118_pp6_stage0_iter16 : BOOLEAN;
    signal ap_block_state119_pp6_stage0_iter17 : BOOLEAN;
    signal ap_block_state120_pp6_stage0_iter18 : BOOLEAN;
    signal ap_block_state121_pp6_stage0_iter19 : BOOLEAN;
    signal ap_block_state122_pp6_stage0_iter20 : BOOLEAN;
    signal ap_block_state123_pp6_stage0_iter21 : BOOLEAN;
    signal ap_block_state124_pp6_stage0_iter22 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp6_iter15 : STD_LOGIC := '0';
    signal icmp_ln173_reg_3333 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1026_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1112 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln100_reg_2931 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state26_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln118_reg_3019 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage1 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state59_pp4_stage1_iter0 : BOOLEAN;
    signal ap_block_state68_pp4_stage1_iter1 : BOOLEAN;
    signal ap_block_pp4_stage1_11001 : BOOLEAN;
    signal icmp_ln150_reg_3220 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal grp_fu_1068_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1124 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal icmp_ln100_reg_2931_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_pp4_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage6 : signal is "none";
    signal ap_block_state64_pp4_stage6_iter0 : BOOLEAN;
    signal ap_block_state73_pp4_stage6_iter1 : BOOLEAN;
    signal ap_block_pp4_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_enable_reg_pp6_iter7 : STD_LOGIC := '0';
    signal icmp_ln173_reg_3333_pp6_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal icmp_ln100_reg_2931_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_state58_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state67_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp4_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage3 : signal is "none";
    signal ap_block_state61_pp4_stage3_iter0 : BOOLEAN;
    signal ap_block_state70_pp4_stage3_iter1 : BOOLEAN;
    signal ap_block_pp4_stage3_11001 : BOOLEAN;
    signal icmp_ln150_reg_3220_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_enable_reg_pp6_iter11 : STD_LOGIC := '0';
    signal icmp_ln173_reg_3333_pp6_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1138 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal icmp_ln118_reg_3019_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_state31_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln132_reg_3109 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1142 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_state76_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state77_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state78_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln159_reg_3289 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1146 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1072_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_pp4_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage7 : signal is "none";
    signal ap_block_state65_pp4_stage7_iter0 : BOOLEAN;
    signal ap_block_state74_pp4_stage7_iter1 : BOOLEAN;
    signal ap_block_pp4_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal grp_fu_1008_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1175 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1175_pp6_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter20 : STD_LOGIC := '0';
    signal icmp_ln173_reg_3333_pp6_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1184 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_118_reg_2819 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_reg_2832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_1031_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_scale3_reg_2887 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1036_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_scale4_reg_2892 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1041_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_scale5_reg_2897 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1046_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_scale6_reg_2902 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1051_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_scale8_reg_2907 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_scale9_reg_2912 : STD_LOGIC_VECTOR (31 downto 0);
    signal gru_output_flag_load_reg_2917 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln93_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_1198_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_2926 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln100_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2931_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2931_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2931_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2931_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2931_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2931_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2931_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2931_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2931_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2931_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2931_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_41_fu_1215_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal state_1_V_addr_reg_2940 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_V_addr_reg_2940_pp1_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_V_fu_1226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_2946 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_34_reg_2951 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_1260_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_71_reg_2956 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln278_fu_1268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_2961 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_2966 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_3_fu_1302_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_3_reg_2971 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_1362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_2976 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_1374_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_reg_2981 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_fu_1394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_2986 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln303_fu_1468_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln303_reg_2991 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln111_fu_1475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_42_fu_1481_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_42_reg_3000 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln120_fu_1487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_3005 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_fu_1491_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln118_reg_3013 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln118_fu_1495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_3019_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_17_fu_1501_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal zext_ln120_1_fu_1507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_reg_3028 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_3_fu_1529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_3_reg_3033 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_zw_V_load_reg_3069 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_rw_V_load_reg_3074 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln68_fu_1538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_reg_3079 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_1_fu_1547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_1_reg_3084 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2771_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal grp_fu_2779_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_zw_V_fu_1565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_rw_V_fu_1570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln132_fu_1575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_3109_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_1609_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal grp_fu_2787_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal grp_fu_2795_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln138_fu_1627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal sext_ln140_fu_1632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal bias_r_V_load_reg_3163 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln138_1_fu_1637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln140_1_fu_1642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_273_reg_3178 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mysigmoid_fu_986_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_272_reg_3183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_mysigmoid_fu_986_ap_ready : STD_LOGIC;
    signal grp_mysigmoid_fu_986_ap_done : STD_LOGIC;
    signal grp_mysigmoid_fu_992_ap_ready : STD_LOGIC;
    signal grp_mysigmoid_fu_992_ap_done : STD_LOGIC;
    signal ap_block_state55_on_subcall_done : BOOLEAN;
    signal grp_mysigmoid_fu_992_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_279_reg_3188 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln145_fu_1646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal i_43_fu_1652_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_43_reg_3197 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln152_fu_1658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_reg_3202 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_fu_1662_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln150_reg_3208 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln173_fu_1666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln173_reg_3214 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln150_fu_1671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_1677_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_reg_3224 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln152_1_fu_1683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_1_reg_3229 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_5_fu_1706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_5_reg_3234 : STD_LOGIC_VECTOR (63 downto 0);
    signal rr_load_reg_3254 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_hw_V_load_reg_3259 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1428_fu_1711_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp4_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage2 : signal is "none";
    signal ap_block_state60_pp4_stage2_iter0 : BOOLEAN;
    signal ap_block_state69_pp4_stage2_iter1 : BOOLEAN;
    signal ap_block_pp4_stage2_11001 : BOOLEAN;
    signal grp_fu_2803_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_hu_V_reg_3279 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_hw_V_fu_1973_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln159_fu_1981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_reg_3289_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_18_fu_2014_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal grp_fu_2811_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal sext_ln163_fu_2028_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal sext_ln163_1_fu_2033_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mytanh_fu_998_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_287_reg_3328 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal grp_mytanh_fu_998_ap_ready : STD_LOGIC;
    signal grp_mytanh_fu_998_ap_done : STD_LOGIC;
    signal icmp_ln173_fu_2038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_3333_pp6_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_2044_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal zext_ln175_fu_2050_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_reg_3342_pp6_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zz_load_reg_3359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter6 : STD_LOGIC := '0';
    signal zz_load_reg_3359_pp6_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal hh_load_reg_3370 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln177_fu_2103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln177_reg_3375 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln177_2_fu_2109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln177_2_reg_3381 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln177_3_fu_2115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln177_3_reg_3386 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_fu_2139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_reg_3391 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_1_fu_2145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_1_reg_3396 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_min_7_fu_2166_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter22 : STD_LOGIC := '0';
    signal tmp_min_9_fu_2189_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_298_reg_3411 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal tmp_min_6_fu_2248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_min_6_reg_3416 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal select_ln186_fu_2340_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln186_reg_3423 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal grp_fu_1063_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shrink_reg_3428 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal icmp_ln201_fu_2347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln197_fu_2352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal h_fu_2358_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal zext_ln199_fu_2364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_reg_3446_pp7_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal state_tmp_load_reg_3456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal p_Result_36_reg_3461 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_36_reg_3461_pp7_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1083_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_3467 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_3467_pp7_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln849_fu_2395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_reg_3472 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_reg_3472_pp7_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_2_fu_2401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_2_reg_3478 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_2_reg_3478_pp7_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_fu_2423_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_reg_3493 : STD_LOGIC_VECTOR (62 downto 0);
    signal bitcast_ln849_fu_2491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln849_reg_3498 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1080_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outprepare_tmp_reg_3508 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_2_fu_2512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_2_reg_3513 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_40_reg_3518 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln283_fu_2545_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln283_reg_3523 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln278_2_fu_2557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_2_reg_3529 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_2_fu_2573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_2_reg_3535 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_2_fu_2585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_2_reg_3540 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_7_fu_2591_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_7_reg_3545 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_2_fu_2635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_2_reg_3550 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_6_fu_2647_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln285_6_reg_3555 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln295_2_fu_2667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_2_reg_3560 : STD_LOGIC_VECTOR (0 downto 0);
    signal outprepare_V_fu_2754_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal outprepare_V_reg_3565 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state26 : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state31 : STD_LOGIC;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state58 : STD_LOGIC;
    signal ap_block_state66_pp4_stage8_iter0 : BOOLEAN;
    signal ap_block_pp4_stage8_subdone : BOOLEAN;
    signal ap_CS_fsm_pp4_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage8 : signal is "none";
    signal ap_block_pp4_stage7_subdone : BOOLEAN;
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state76 : STD_LOGIC;
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state102 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter21 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state145 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter12 : STD_LOGIC := '0';
    signal grp_mysigmoid_fu_986_ap_start : STD_LOGIC;
    signal grp_mysigmoid_fu_986_ap_idle : STD_LOGIC;
    signal grp_mysigmoid_fu_992_ap_start : STD_LOGIC;
    signal grp_mysigmoid_fu_992_ap_idle : STD_LOGIC;
    signal grp_mytanh_fu_998_ap_start : STD_LOGIC;
    signal grp_mytanh_fu_998_ap_idle : STD_LOGIC;
    signal ap_phi_mux_j_0_phi_fu_739_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal i1_0_reg_758 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i3_0_reg_861 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_phi_mux_p_0387_0_phi_fu_888_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp4_stage7 : BOOLEAN;
    signal ap_phi_mux_k4_0_phi_fu_900_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_phi_ln187_phi_fu_933_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal ap_phi_mux_tmp_min_0_phi_fu_945_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal gru_output_flag_new_1_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state159 : BOOLEAN;
    signal grp_mysigmoid_fu_986_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_mysigmoid_fu_992_ap_start_reg : STD_LOGIC := '0';
    signal grp_mytanh_fu_998_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal zext_ln96_fu_1204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_fu_1221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln215_7_fu_1603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln134_fu_1581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_9_fu_2009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal zext_ln161_fu_1987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_fu_2417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state160 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state160 : signal is "none";
    signal ap_block_pp7_stage0_01001 : BOOLEAN;
    signal sext_ln68_7_fu_2761_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1004_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1004_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal grp_fu_1008_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1008_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp4_stage3 : BOOLEAN;
    signal grp_fu_1016_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1016_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_block_pp4_stage6 : BOOLEAN;
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal grp_fu_1021_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1021_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1026_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1026_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal grp_fu_1068_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_block_pp4_stage1 : BOOLEAN;
    signal ap_block_pp4_stage2 : BOOLEAN;
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_fu_1072_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1080_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1086_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1086_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal p_Result_s_fu_1242_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_fu_1256_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_fu_1230_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_1252_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_fu_1274_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_109_fu_1308_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln281_fu_1280_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln282_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_fu_1330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_1336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_fu_1350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_1356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_1368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_fu_1324_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_fu_1342_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_fu_1382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_1318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_1388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_1406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln283_fu_1400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_fu_1403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln297_fu_1421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln285_fu_1427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln295_fu_1430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln285_fu_1444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_3_fu_1449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_1413_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln278_fu_1437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_3_fu_1454_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln461_fu_1462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_fu_1512_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln215_fu_1520_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln215_fu_1524_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln68_fu_1538_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_fu_1538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln68_1_fu_1547_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_1_fu_1547_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_102_fu_1586_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln215_6_fu_1594_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln215_2_fu_1598_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_101_fu_1689_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln215_4_fu_1697_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln215_1_fu_1701_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1012_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_1_fu_1723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_112_fu_1739_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_1_fu_1753_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_1_fu_1727_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_1_fu_1749_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_4_fu_1771_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_77_fu_1757_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sh_amt_5_fu_1803_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_112_fu_1813_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln281_1_fu_1777_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_113_fu_1835_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln283_1_fu_1787_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_1_fu_1809_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln278_1_fu_1765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_1_fu_1781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_1_fu_1857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_1_fu_1863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_1_fu_1877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_fu_1791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_1_fu_1883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_1_fu_1889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_1_fu_1797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_4_fu_1895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_1_fu_1829_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_fu_1869_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_4_fu_1901_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_1_fu_1913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_1_fu_1823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_1_fu_1919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_1_fu_1925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln297_1_fu_1851_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln285_1_fu_1909_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln295_1_fu_1931_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln285_1_fu_1947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_5_fu_1953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_1_fu_1843_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln278_1_fu_1939_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_5_fu_1959_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_35_fu_1731_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln461_1_fu_1967_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_fu_1992_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln215_8_fu_2000_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln215_3_fu_2004_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln177_fu_2055_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln177_1_fu_2073_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_302_fu_2059_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln177_fu_2069_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln177_1_fu_2097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln177_fu_2091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_303_fu_2077_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln177_1_fu_2087_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln179_fu_2121_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_305_fu_2125_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln179_fu_2135_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln177_1_fu_2151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln177_fu_2155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln177_1_fu_2160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_fu_2174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_fu_2178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_1_fu_2183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln184_fu_2197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_297_fu_2201_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln184_fu_2211_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln184_1_fu_2221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_fu_2215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln184_fu_2227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln185_fu_2238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln184_fu_2233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_min_fu_2244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln186_fu_2257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln186_1_fu_2275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_299_fu_2261_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln186_fu_2271_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln186_1_fu_2298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_fu_2292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_300_fu_2278_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln186_1_fu_2288_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln186_3_fu_2316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_2_fu_2310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln186_fu_2304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln186_1_fu_2322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln186_fu_2328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln186_1_fu_2334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln475_fu_2369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_23_fu_2381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_9_fu_2385_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_V_fu_2407_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_38_fu_2438_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln209_fu_2434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_27_fu_2444_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_10_fu_2450_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln1309_fu_2454_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_103_fu_2466_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_fu_2460_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_37_fu_2427_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_39_fu_2476_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln849_fu_2484_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln849_fu_2495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln849_fu_2500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_45_fu_2527_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_2_fu_2541_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_2_fu_2515_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_2_fu_2537_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_6_fu_2563_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_116_fu_2597_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_81_fu_2549_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln281_2_fu_2569_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln286_2_fu_2613_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_2_fu_2623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_2_fu_2579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_2_fu_2629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_6_fu_2641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln286_fu_2619_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln284_2_fu_2655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_2_fu_2607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_2_fu_2661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_fu_2676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_2_fu_2673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_2cast_fu_2691_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln297_2_fu_2695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln295_2_fu_2700_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln285_2_fu_2713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_7_fu_2718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_2_fu_2683_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln278_2_fu_2706_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln278_2_fu_2731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_2_fu_2736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_7_fu_2723_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln282_2_fu_2741_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln461_2_fu_2748_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2771_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_1557_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2779_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2787_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_2_fu_1619_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2795_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1004_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp6_stage0_00001 : BOOLEAN;
    signal grp_fu_1016_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_block_pp4_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_fu_1080_ce : STD_LOGIC;
    signal grp_fu_1083_ce : STD_LOGIC;
    signal grp_fu_1086_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_block_pp4_stage1_subdone : BOOLEAN;
    signal ap_block_pp4_stage2_subdone : BOOLEAN;
    signal ap_block_pp4_stage3_subdone : BOOLEAN;
    signal ap_block_state62_pp4_stage4_iter0 : BOOLEAN;
    signal ap_block_state71_pp4_stage4_iter1 : BOOLEAN;
    signal ap_block_pp4_stage4_subdone : BOOLEAN;
    signal ap_block_state63_pp4_stage5_iter0 : BOOLEAN;
    signal ap_block_state72_pp4_stage5_iter1 : BOOLEAN;
    signal ap_block_pp4_stage5_subdone : BOOLEAN;
    signal ap_block_pp4_stage6_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_condition_1623 : BOOLEAN;

    component mysigmoid IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_var : IN STD_LOGIC_VECTOR (31 downto 0);
        scale : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mytanh IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_var : IN STD_LOGIC_VECTOR (31 downto 0);
        scale : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_faddfsub_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fadd_32ns_32nwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fadd_32ns_32nThq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fdiv_32ns_32nGfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_sitofp_32ns_3KfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fptrunc_64ns_Aem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fpext_32ns_64Bew IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kws_fcmp_32ns_32nHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kws_mac_muladd_8sUhA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component kws_mac_muladd_8sVhK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component grucell_x_V_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component grucell_state_1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component grucell_zz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dw_layer1_mask_taIfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component dw_layer1_one_halJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;



begin
    x_V_2_U : component grucell_x_V_2
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_V_2_address0,
        ce0 => x_V_2_ce0,
        we0 => x_V_2_we0,
        d0 => in_stream_V_V_dout,
        q0 => x_V_2_q0);

    state_1_V_U : component grucell_state_1_V
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_1_V_address0,
        ce0 => state_1_V_ce0,
        q0 => state_1_V_q0,
        address1 => state_1_V_address1,
        ce1 => state_1_V_ce1,
        we1 => state_1_V_we1,
        d1 => state_1_V_d1,
        q1 => state_1_V_q1);

    zz_U : component grucell_zz
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => zz_address0,
        ce0 => zz_ce0,
        we0 => zz_we0,
        d0 => tmp_272_reg_3183,
        q0 => zz_q0);

    rr_U : component grucell_zz
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rr_address0,
        ce0 => rr_ce0,
        we0 => rr_we0,
        d0 => tmp_279_reg_3188,
        q0 => rr_q0);

    hh_U : component grucell_zz
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hh_address0,
        ce0 => hh_ce0,
        we0 => hh_we0,
        d0 => tmp_287_reg_3328,
        q0 => hh_q0);

    state_tmp_U : component grucell_zz
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_tmp_address0,
        ce0 => state_tmp_ce0,
        we0 => state_tmp_we0,
        d0 => reg_1175,
        q0 => state_tmp_q0);

    mask_table2_U : component dw_layer1_mask_taIfE
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table2_address0,
        ce0 => mask_table2_ce0,
        q0 => mask_table2_q0);

    one_half_table3_U : component dw_layer1_one_halJfO
    generic map (
        DataWidth => 53,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_table3_address0,
        ce0 => one_half_table3_ce0,
        q0 => one_half_table3_q0);

    grp_mysigmoid_fu_986 : component mysigmoid
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mysigmoid_fu_986_ap_start,
        ap_done => grp_mysigmoid_fu_986_ap_done,
        ap_idle => grp_mysigmoid_fu_986_ap_idle,
        ap_ready => grp_mysigmoid_fu_986_ap_ready,
        in_var => reg_1167,
        scale => reg_1099,
        ap_return => grp_mysigmoid_fu_986_ap_return);

    grp_mysigmoid_fu_992 : component mysigmoid
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mysigmoid_fu_992_ap_start,
        ap_done => grp_mysigmoid_fu_992_ap_done,
        ap_idle => grp_mysigmoid_fu_992_ap_idle,
        ap_ready => grp_mysigmoid_fu_992_ap_ready,
        in_var => reg_1175,
        scale => reg_1106,
        ap_return => grp_mysigmoid_fu_992_ap_return);

    grp_mytanh_fu_998 : component mytanh
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mytanh_fu_998_ap_start,
        ap_done => grp_mytanh_fu_998_ap_done,
        ap_idle => grp_mytanh_fu_998_ap_idle,
        ap_ready => grp_mytanh_fu_998_ap_ready,
        in_var => reg_1167,
        scale => reg_1112,
        ap_return => grp_mytanh_fu_998_ap_return);

    kws_faddfsub_32nscud_U271 : component kws_faddfsub_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1004_p0,
        din1 => grp_fu_1004_p1,
        opcode => grp_fu_1004_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_1004_p2);

    kws_fadd_32ns_32nwdI_U272 : component kws_fadd_32ns_32nwdI
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1008_p0,
        din1 => grp_fu_1008_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1008_p2);

    kws_fadd_32ns_32nThq_U273 : component kws_fadd_32ns_32nThq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1068_p1,
        din1 => grp_fu_1016_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1012_p2);

    kws_fmul_32ns_32neOg_U274 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1016_p0,
        din1 => grp_fu_1016_p1,
        ce => grp_fu_1016_ce,
        dout => grp_fu_1016_p2);

    kws_fmul_32ns_32neOg_U275 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1021_p0,
        din1 => grp_fu_1021_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1021_p2);

    kws_fmul_32ns_32neOg_U276 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1026_p0,
        din1 => grp_fu_1026_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1026_p2);

    kws_fmul_32ns_32neOg_U277 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_118_reg_2819,
        din1 => tmp_scale_gru1,
        ce => ap_const_logic_1,
        dout => grp_fu_1031_p2);

    kws_fmul_32ns_32neOg_U278 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_118_reg_2819,
        din1 => tmp_scale_gru2,
        ce => ap_const_logic_1,
        dout => grp_fu_1036_p2);

    kws_fmul_32ns_32neOg_U279 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_118_reg_2819,
        din1 => tmp_scale_gru3,
        ce => ap_const_logic_1,
        dout => grp_fu_1041_p2);

    kws_fmul_32ns_32neOg_U280 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_118_reg_2819,
        din1 => tmp_scale_gru4,
        ce => ap_const_logic_1,
        dout => grp_fu_1046_p2);

    kws_fmul_32ns_32neOg_U281 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_118_reg_2819,
        din1 => tmp_scale_gru6,
        ce => ap_const_logic_1,
        dout => grp_fu_1051_p2);

    kws_fmul_32ns_32neOg_U282 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_118_reg_2819,
        din1 => tmp_scale_gru7,
        ce => ap_const_logic_1,
        dout => grp_fu_1056_p2);

    kws_fdiv_32ns_32nGfk_U283 : component kws_fdiv_32ns_32nGfk
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_42FE0000,
        din1 => select_ln186_reg_3423,
        ce => ap_const_logic_1,
        dout => grp_fu_1063_p2);

    kws_sitofp_32ns_3KfY_U284 : component kws_sitofp_32ns_3KfY
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1068_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1068_p1);

    kws_sitofp_32ns_3KfY_U285 : component kws_sitofp_32ns_3KfY
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1072_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1072_p1);

    kws_fptrunc_64ns_Aem_U286 : component kws_fptrunc_64ns_Aem
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1080_p0,
        ce => grp_fu_1080_ce,
        dout => grp_fu_1080_p1);

    kws_fpext_32ns_64Bew_U287 : component kws_fpext_32ns_64Bew
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_1099,
        ce => grp_fu_1083_ce,
        dout => grp_fu_1083_p1);

    kws_fcmp_32ns_32nHfu_U288 : component kws_fcmp_32ns_32nHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1086_p0,
        din1 => grp_fu_1086_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_1086_opcode,
        dout => grp_fu_1086_p2);

    kws_fcmp_32ns_32nHfu_U289 : component kws_fcmp_32ns_32nHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_1175,
        din1 => ap_phi_mux_tmp_min_0_phi_fu_945_p4,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_1091_p2);

    kws_mac_muladd_8sUhA_U290 : component kws_mac_muladd_8sUhA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => reg_1138,
        din1 => grp_fu_2771_p1,
        din2 => tmp_ze_V_reg_769,
        dout => grp_fu_2771_p3);

    kws_mac_muladd_8sUhA_U291 : component kws_mac_muladd_8sUhA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_2779_p0,
        din1 => reg_1146,
        din2 => tmp_re_V_reg_781,
        dout => grp_fu_2779_p3);

    kws_mac_muladd_8sVhK_U292 : component kws_mac_muladd_8sVhK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => reg_1138,
        din1 => grp_fu_2787_p1,
        din2 => p_0322_0_reg_828,
        dout => grp_fu_2787_p3);

    kws_mac_muladd_8sVhK_U293 : component kws_mac_muladd_8sVhK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_2795_p0,
        din1 => reg_1146,
        din2 => p_0406_0_reg_839,
        dout => grp_fu_2795_p3);

    kws_mac_muladd_8sUhA_U294 : component kws_mac_muladd_8sUhA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => reg_1184,
        din1 => reg_1142,
        din2 => tmp_he_V_reg_872,
        dout => grp_fu_2803_p3);

    kws_mac_muladd_8sVhK_U295 : component kws_mac_muladd_8sVhK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => reg_1184,
        din1 => reg_1142,
        din2 => p_0510_0_reg_907,
        dout => grp_fu_2811_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state26) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln111_fu_1475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state26)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif (((icmp_ln111_fu_1475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state31) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state31)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state58) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln145_fu_1646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage7) and (ap_const_boolean_0 = ap_block_pp4_stage7_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage8) and (ap_const_boolean_0 = ap_block_pp4_stage8_subdone)))) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((icmp_ln145_fu_1646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state76) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state76)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state76);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state102) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln145_fu_1646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state102)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state102);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter10 <= ap_enable_reg_pp6_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter11 <= ap_enable_reg_pp6_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter12 <= ap_enable_reg_pp6_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter13 <= ap_enable_reg_pp6_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter14 <= ap_enable_reg_pp6_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter15 <= ap_enable_reg_pp6_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter16 <= ap_enable_reg_pp6_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter17 <= ap_enable_reg_pp6_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter18 <= ap_enable_reg_pp6_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter19 <= ap_enable_reg_pp6_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter20 <= ap_enable_reg_pp6_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter21 <= ap_enable_reg_pp6_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter22 <= ap_enable_reg_pp6_iter21;
                elsif (((icmp_ln145_fu_1646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                    ap_enable_reg_pp6_iter22 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter4 <= ap_enable_reg_pp6_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter6 <= ap_enable_reg_pp6_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter7 <= ap_enable_reg_pp6_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter8 <= ap_enable_reg_pp6_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter9 <= ap_enable_reg_pp6_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state145) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state144)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state145)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state145);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter10 <= ap_enable_reg_pp7_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter11 <= ap_enable_reg_pp7_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter12 <= ap_enable_reg_pp7_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter13 <= ap_enable_reg_pp7_iter12;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state144)) then 
                    ap_enable_reg_pp7_iter13 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter5 <= ap_enable_reg_pp7_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter6 <= ap_enable_reg_pp7_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter7 <= ap_enable_reg_pp7_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter8 <= ap_enable_reg_pp7_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter9 <= ap_enable_reg_pp7_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_mysigmoid_fu_986_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mysigmoid_fu_986_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                    grp_mysigmoid_fu_986_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mysigmoid_fu_986_ap_ready = ap_const_logic_1)) then 
                    grp_mysigmoid_fu_986_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mysigmoid_fu_992_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mysigmoid_fu_992_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                    grp_mysigmoid_fu_992_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mysigmoid_fu_992_ap_ready = ap_const_logic_1)) then 
                    grp_mysigmoid_fu_992_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mytanh_fu_998_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mytanh_fu_998_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
                    grp_mytanh_fu_998_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mytanh_fu_998_ap_ready = ap_const_logic_1)) then 
                    grp_mytanh_fu_998_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    gru_output_flag_new_1_reg_975_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1623)) then
                if ((icmp_ln201_reg_3433 = ap_const_lv1_0)) then 
                    gru_output_flag_new_1_reg_975 <= add_ln173_reg_3214;
                elsif ((icmp_ln201_reg_3433 = ap_const_lv1_1)) then 
                    gru_output_flag_new_1_reg_975 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    h_0_reg_964_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln197_fu_2352_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                h_0_reg_964 <= h_fu_2358_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state144)) then 
                h_0_reg_964 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i1_0_reg_758_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i1_0_reg_758 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                i1_0_reg_758 <= i_42_reg_3000;
            end if; 
        end if;
    end process;

    i3_0_reg_861_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_fu_1475_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i3_0_reg_861 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                i3_0_reg_861 <= i_43_reg_3197;
            end if; 
        end if;
    end process;

    i6_0_reg_953_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_1646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                i6_0_reg_953 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_fu_2038_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) then 
                i6_0_reg_953 <= i_fu_2044_p2;
            end if; 
        end if;
    end process;

    i_0_reg_747_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_reg_747 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln100_fu_1209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_0_reg_747 <= i_41_fu_1215_p2;
            end if; 
        end if;
    end process;

    j2_0_reg_817_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln118_fu_1495_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j2_0_reg_817 <= j_17_fu_1501_p2;
            elsif (((icmp_ln111_fu_1475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                j2_0_reg_817 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j5_0_reg_918_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                j5_0_reg_918 <= ap_const_lv7_40;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln159_fu_1981_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
                j5_0_reg_918 <= j_18_fu_2014_p2;
            end if; 
        end if;
    end process;

    j_0_reg_735_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln93_reg_2922 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_reg_735 <= j_reg_2926;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_735 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k4_0_reg_896_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln150_reg_3220 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                k4_0_reg_896 <= k_1_reg_3224;
            elsif (((icmp_ln145_fu_1646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                k4_0_reg_896 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_reg_850_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                k_0_reg_850 <= ap_const_lv7_40;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln132_fu_1575_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                k_0_reg_850 <= k_fu_1609_p2;
            end if; 
        end if;
    end process;

    p_0174_0_reg_793_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln118_reg_3019_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
                p_0174_0_reg_793 <= tmp_zw_V_fu_1565_p2;
            elsif (((icmp_ln111_fu_1475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                p_0174_0_reg_793 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0322_0_reg_828_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                p_0322_0_reg_828 <= tmp_ze_V_reg_769;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln132_reg_3109_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
                p_0322_0_reg_828 <= grp_fu_2787_p3;
            end if; 
        end if;
    end process;

    p_0326_0_reg_805_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln118_reg_3019_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
                p_0326_0_reg_805 <= tmp_rw_V_fu_1570_p2;
            elsif (((icmp_ln111_fu_1475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                p_0326_0_reg_805 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0387_0_reg_884_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage7_11001) and (icmp_ln150_reg_3220_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage7) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
                p_0387_0_reg_884 <= tmp_hw_V_fu_1973_p3;
            elsif (((icmp_ln145_fu_1646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                p_0387_0_reg_884 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0406_0_reg_839_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                p_0406_0_reg_839 <= tmp_re_V_reg_781;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln132_reg_3109_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
                p_0406_0_reg_839 <= grp_fu_2795_p3;
            end if; 
        end if;
    end process;

    p_0510_0_reg_907_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                p_0510_0_reg_907 <= tmp_he_V_reg_872;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln159_reg_3289_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
                p_0510_0_reg_907 <= grp_fu_2811_p3;
            end if; 
        end if;
    end process;

    phi_ln187_reg_929_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_1646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                phi_ln187_reg_929 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333_pp6_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter22 = ap_const_logic_1))) then 
                phi_ln187_reg_929 <= tmp_min_7_fu_2166_p3;
            end if; 
        end if;
    end process;

    reg_1118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (icmp_ln150_reg_3220 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then 
                reg_1118 <= state_1_V_q1;
            elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln118_reg_3019 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln100_reg_2931 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)))) then 
                reg_1118 <= state_1_V_q0;
            end if; 
        end if;
    end process;

    tmp_he_V_reg_872_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage7_11001) and (icmp_ln150_reg_3220_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage7) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1))) then 
                tmp_he_V_reg_872 <= tmp_hu_V_reg_3279;
            elsif (((icmp_ln145_fu_1646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                tmp_he_V_reg_872 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;

    tmp_min_0_reg_941_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_1646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                tmp_min_0_reg_941 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333_pp6_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter22 = ap_const_logic_1))) then 
                tmp_min_0_reg_941 <= tmp_min_9_fu_2189_p3;
            end if; 
        end if;
    end process;

    tmp_re_V_reg_781_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln118_reg_3019_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
                tmp_re_V_reg_781 <= grp_fu_2779_p3;
            elsif (((icmp_ln111_fu_1475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                tmp_re_V_reg_781 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;

    tmp_ze_V_reg_769_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln118_reg_3019_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
                tmp_ze_V_reg_769 <= grp_fu_2771_p3;
            elsif (((icmp_ln111_fu_1475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                tmp_ze_V_reg_769 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_1646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                add_ln173_reg_3214 <= add_ln173_fu_1666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp7_stage0_11001)) then
                and_ln284_2_reg_3550 <= and_ln284_2_fu_2635_p2;
                and_ln295_2_reg_3560 <= and_ln295_2_fu_2667_p2;
                bitcast_ln849_reg_3498 <= bitcast_ln849_fu_2491_p1;
                icmp_ln278_2_reg_3529 <= icmp_ln278_2_fu_2557_p2;
                icmp_ln282_2_reg_3535 <= icmp_ln282_2_fu_2573_p2;
                icmp_ln285_2_reg_3540 <= icmp_ln285_2_fu_2585_p2;
                icmp_ln849_2_reg_3478 <= icmp_ln849_2_fu_2401_p2;
                icmp_ln849_2_reg_3478_pp7_iter8_reg <= icmp_ln849_2_reg_3478;
                icmp_ln849_reg_3472 <= icmp_ln849_fu_2395_p2;
                icmp_ln849_reg_3472_pp7_iter8_reg <= icmp_ln849_reg_3472;
                outprepare_V_reg_3565 <= outprepare_V_fu_2754_p3;
                outprepare_tmp_reg_3508 <= grp_fu_1080_p1;
                p_Result_36_reg_3461 <= bitcast_ln475_fu_2369_p1(31 downto 31);
                p_Result_36_reg_3461_pp7_iter7_reg <= p_Result_36_reg_3461;
                p_Result_40_reg_3518 <= reg_V_2_fu_2512_p1(31 downto 31);
                reg_V_2_reg_3513 <= reg_V_2_fu_2512_p1;
                select_ln285_6_reg_3555 <= select_ln285_6_fu_2647_p3;
                sh_amt_7_reg_3545 <= sh_amt_7_fu_2591_p2;
                trunc_ln283_reg_3523 <= trunc_ln283_fu_2545_p1;
                trunc_ln368_reg_3493 <= trunc_ln368_fu_2423_p1;
                x_assign_reg_3467 <= grp_fu_1083_p1;
                x_assign_reg_3467_pp7_iter8_reg <= x_assign_reg_3467;
                    zext_ln199_reg_3446_pp7_iter10_reg(6 downto 0) <= zext_ln199_reg_3446_pp7_iter9_reg(6 downto 0);
                    zext_ln199_reg_3446_pp7_iter11_reg(6 downto 0) <= zext_ln199_reg_3446_pp7_iter10_reg(6 downto 0);
                    zext_ln199_reg_3446_pp7_iter12_reg(6 downto 0) <= zext_ln199_reg_3446_pp7_iter11_reg(6 downto 0);
                    zext_ln199_reg_3446_pp7_iter2_reg(6 downto 0) <= zext_ln199_reg_3446_pp7_iter1_reg(6 downto 0);
                    zext_ln199_reg_3446_pp7_iter3_reg(6 downto 0) <= zext_ln199_reg_3446_pp7_iter2_reg(6 downto 0);
                    zext_ln199_reg_3446_pp7_iter4_reg(6 downto 0) <= zext_ln199_reg_3446_pp7_iter3_reg(6 downto 0);
                    zext_ln199_reg_3446_pp7_iter5_reg(6 downto 0) <= zext_ln199_reg_3446_pp7_iter4_reg(6 downto 0);
                    zext_ln199_reg_3446_pp7_iter6_reg(6 downto 0) <= zext_ln199_reg_3446_pp7_iter5_reg(6 downto 0);
                    zext_ln199_reg_3446_pp7_iter7_reg(6 downto 0) <= zext_ln199_reg_3446_pp7_iter6_reg(6 downto 0);
                    zext_ln199_reg_3446_pp7_iter8_reg(6 downto 0) <= zext_ln199_reg_3446_pp7_iter7_reg(6 downto 0);
                    zext_ln199_reg_3446_pp7_iter9_reg(6 downto 0) <= zext_ln199_reg_3446_pp7_iter8_reg(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln100_reg_2931_pp1_iter11_reg = ap_const_lv1_0))) then
                and_ln284_reg_2976 <= and_ln284_fu_1362_p2;
                and_ln295_reg_2986 <= and_ln295_fu_1394_p2;
                icmp_ln278_reg_2961 <= icmp_ln278_fu_1268_p2;
                icmp_ln285_reg_2966 <= icmp_ln285_fu_1296_p2;
                p_Result_34_reg_2951 <= reg_V_fu_1226_p1(31 downto 31);
                reg_V_reg_2946 <= reg_V_fu_1226_p1;
                select_ln285_reg_2981 <= select_ln285_fu_1374_p3;
                sh_amt_3_reg_2971 <= sh_amt_3_fu_1302_p2;
                    tmp_71_reg_2956(22 downto 0) <= tmp_71_fu_1260_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                bias_r_V_load_reg_3163 <= bias_r_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state160)) then
                gru_output_flag <= gru_output_flag_new_1_reg_975;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                gru_output_flag_load_reg_2917 <= gru_output_flag;
                tmp_scale3_reg_2887 <= grp_fu_1031_p2;
                tmp_scale4_reg_2892 <= grp_fu_1036_p2;
                tmp_scale5_reg_2897 <= grp_fu_1041_p2;
                tmp_scale6_reg_2902 <= grp_fu_1046_p2;
                tmp_scale8_reg_2907 <= grp_fu_1051_p2;
                tmp_scale9_reg_2912 <= grp_fu_1056_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333_pp6_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter11 = ap_const_logic_1))) then
                hh_load_reg_3370 <= hh_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                i_42_reg_3000 <= i_42_fu_1481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                i_43_reg_3197 <= i_43_fu_1652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln100_reg_2931 <= icmp_ln100_fu_1209_p2;
                icmp_ln100_reg_2931_pp1_iter1_reg <= icmp_ln100_reg_2931;
                state_1_V_addr_reg_2940_pp1_iter1_reg <= state_1_V_addr_reg_2940;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln100_reg_2931_pp1_iter10_reg <= icmp_ln100_reg_2931_pp1_iter9_reg;
                icmp_ln100_reg_2931_pp1_iter11_reg <= icmp_ln100_reg_2931_pp1_iter10_reg;
                icmp_ln100_reg_2931_pp1_iter12_reg <= icmp_ln100_reg_2931_pp1_iter11_reg;
                icmp_ln100_reg_2931_pp1_iter13_reg <= icmp_ln100_reg_2931_pp1_iter12_reg;
                icmp_ln100_reg_2931_pp1_iter2_reg <= icmp_ln100_reg_2931_pp1_iter1_reg;
                icmp_ln100_reg_2931_pp1_iter3_reg <= icmp_ln100_reg_2931_pp1_iter2_reg;
                icmp_ln100_reg_2931_pp1_iter4_reg <= icmp_ln100_reg_2931_pp1_iter3_reg;
                icmp_ln100_reg_2931_pp1_iter5_reg <= icmp_ln100_reg_2931_pp1_iter4_reg;
                icmp_ln100_reg_2931_pp1_iter6_reg <= icmp_ln100_reg_2931_pp1_iter5_reg;
                icmp_ln100_reg_2931_pp1_iter7_reg <= icmp_ln100_reg_2931_pp1_iter6_reg;
                icmp_ln100_reg_2931_pp1_iter8_reg <= icmp_ln100_reg_2931_pp1_iter7_reg;
                icmp_ln100_reg_2931_pp1_iter9_reg <= icmp_ln100_reg_2931_pp1_iter8_reg;
                state_1_V_addr_reg_2940_pp1_iter10_reg <= state_1_V_addr_reg_2940_pp1_iter9_reg;
                state_1_V_addr_reg_2940_pp1_iter11_reg <= state_1_V_addr_reg_2940_pp1_iter10_reg;
                state_1_V_addr_reg_2940_pp1_iter12_reg <= state_1_V_addr_reg_2940_pp1_iter11_reg;
                state_1_V_addr_reg_2940_pp1_iter13_reg <= state_1_V_addr_reg_2940_pp1_iter12_reg;
                state_1_V_addr_reg_2940_pp1_iter2_reg <= state_1_V_addr_reg_2940_pp1_iter1_reg;
                state_1_V_addr_reg_2940_pp1_iter3_reg <= state_1_V_addr_reg_2940_pp1_iter2_reg;
                state_1_V_addr_reg_2940_pp1_iter4_reg <= state_1_V_addr_reg_2940_pp1_iter3_reg;
                state_1_V_addr_reg_2940_pp1_iter5_reg <= state_1_V_addr_reg_2940_pp1_iter4_reg;
                state_1_V_addr_reg_2940_pp1_iter6_reg <= state_1_V_addr_reg_2940_pp1_iter5_reg;
                state_1_V_addr_reg_2940_pp1_iter7_reg <= state_1_V_addr_reg_2940_pp1_iter6_reg;
                state_1_V_addr_reg_2940_pp1_iter8_reg <= state_1_V_addr_reg_2940_pp1_iter7_reg;
                state_1_V_addr_reg_2940_pp1_iter9_reg <= state_1_V_addr_reg_2940_pp1_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln118_reg_3019 <= icmp_ln118_fu_1495_p2;
                icmp_ln118_reg_3019_pp2_iter1_reg <= icmp_ln118_reg_3019;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln118_reg_3019_pp2_iter2_reg <= icmp_ln118_reg_3019_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln132_reg_3109 <= icmp_ln132_fu_1575_p2;
                icmp_ln132_reg_3109_pp3_iter1_reg <= icmp_ln132_reg_3109;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln150_reg_3220 <= icmp_ln150_fu_1671_p2;
                icmp_ln150_reg_3220_pp4_iter1_reg <= icmp_ln150_reg_3220;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln159_reg_3289 <= icmp_ln159_fu_1981_p2;
                icmp_ln159_reg_3289_pp5_iter1_reg <= icmp_ln159_reg_3289;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln173_reg_3333 <= icmp_ln173_fu_2038_p2;
                icmp_ln173_reg_3333_pp6_iter1_reg <= icmp_ln173_reg_3333;
                    zext_ln175_reg_3342_pp6_iter1_reg(6 downto 0) <= zext_ln175_reg_3342(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp6_stage0_11001)) then
                icmp_ln173_reg_3333_pp6_iter10_reg <= icmp_ln173_reg_3333_pp6_iter9_reg;
                icmp_ln173_reg_3333_pp6_iter11_reg <= icmp_ln173_reg_3333_pp6_iter10_reg;
                icmp_ln173_reg_3333_pp6_iter12_reg <= icmp_ln173_reg_3333_pp6_iter11_reg;
                icmp_ln173_reg_3333_pp6_iter13_reg <= icmp_ln173_reg_3333_pp6_iter12_reg;
                icmp_ln173_reg_3333_pp6_iter14_reg <= icmp_ln173_reg_3333_pp6_iter13_reg;
                icmp_ln173_reg_3333_pp6_iter15_reg <= icmp_ln173_reg_3333_pp6_iter14_reg;
                icmp_ln173_reg_3333_pp6_iter16_reg <= icmp_ln173_reg_3333_pp6_iter15_reg;
                icmp_ln173_reg_3333_pp6_iter17_reg <= icmp_ln173_reg_3333_pp6_iter16_reg;
                icmp_ln173_reg_3333_pp6_iter18_reg <= icmp_ln173_reg_3333_pp6_iter17_reg;
                icmp_ln173_reg_3333_pp6_iter19_reg <= icmp_ln173_reg_3333_pp6_iter18_reg;
                icmp_ln173_reg_3333_pp6_iter20_reg <= icmp_ln173_reg_3333_pp6_iter19_reg;
                icmp_ln173_reg_3333_pp6_iter21_reg <= icmp_ln173_reg_3333_pp6_iter20_reg;
                icmp_ln173_reg_3333_pp6_iter2_reg <= icmp_ln173_reg_3333_pp6_iter1_reg;
                icmp_ln173_reg_3333_pp6_iter3_reg <= icmp_ln173_reg_3333_pp6_iter2_reg;
                icmp_ln173_reg_3333_pp6_iter4_reg <= icmp_ln173_reg_3333_pp6_iter3_reg;
                icmp_ln173_reg_3333_pp6_iter5_reg <= icmp_ln173_reg_3333_pp6_iter4_reg;
                icmp_ln173_reg_3333_pp6_iter6_reg <= icmp_ln173_reg_3333_pp6_iter5_reg;
                icmp_ln173_reg_3333_pp6_iter7_reg <= icmp_ln173_reg_3333_pp6_iter6_reg;
                icmp_ln173_reg_3333_pp6_iter8_reg <= icmp_ln173_reg_3333_pp6_iter7_reg;
                icmp_ln173_reg_3333_pp6_iter9_reg <= icmp_ln173_reg_3333_pp6_iter8_reg;
                reg_1175_pp6_iter21_reg <= reg_1175;
                    zext_ln175_reg_3342_pp6_iter10_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter9_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter11_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter10_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter12_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter11_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter13_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter12_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter14_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter13_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter15_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter14_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter16_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter15_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter17_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter16_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter18_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter17_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter19_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter18_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter20_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter19_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter2_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter1_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter3_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter2_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter4_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter3_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter5_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter4_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter6_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter5_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter7_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter6_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter8_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter7_reg(6 downto 0);
                    zext_ln175_reg_3342_pp6_iter9_reg(6 downto 0) <= zext_ln175_reg_3342_pp6_iter8_reg(6 downto 0);
                zz_load_reg_3359_pp6_iter7_reg <= zz_load_reg_3359;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333_pp6_iter20_reg = ap_const_lv1_0))) then
                icmp_ln177_2_reg_3381 <= icmp_ln177_2_fu_2109_p2;
                icmp_ln177_3_reg_3386 <= icmp_ln177_3_fu_2115_p2;
                icmp_ln179_1_reg_3396 <= icmp_ln179_1_fu_2145_p2;
                icmp_ln179_reg_3391 <= icmp_ln179_fu_2139_p2;
                or_ln177_reg_3375 <= or_ln177_fu_2103_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state144)) then
                icmp_ln201_reg_3433 <= icmp_ln201_fu_2347_p2;
                shrink_reg_3428 <= grp_fu_1063_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln93_reg_2922 <= icmp_ln93_fu_1192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_reg_2926 <= j_fu_1198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then
                k_1_reg_3224 <= k_1_fu_1677_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln118_reg_3019_pp2_iter1_reg = ap_const_lv1_0))) then
                mul_ln68_1_reg_3084 <= mul_ln68_1_fu_1547_p2;
                mul_ln68_reg_3079 <= mul_ln68_fu_1538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1)))) then
                reg_1099 <= grp_fu_1016_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333_pp6_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter15 = ap_const_logic_1)))) then
                reg_1106 <= grp_fu_1021_p2;
                reg_1112 <= grp_fu_1026_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_boolean_0 = ap_block_pp4_stage6_11001) and (icmp_ln150_reg_3220 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage6) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln100_reg_2931_pp1_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333_pp6_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter7 = ap_const_logic_1)))) then
                reg_1124 <= grp_fu_1068_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (icmp_ln150_reg_3220_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln150_reg_3220 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln100_reg_2931_pp1_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333_pp6_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter11 = ap_const_logic_1)))) then
                reg_1130 <= grp_fu_1016_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln132_reg_3109 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln118_reg_3019_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                reg_1138 <= weights_zu_V_q0;
                reg_1146 <= weights_ru_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln159_reg_3289 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln132_reg_3109 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (icmp_ln150_reg_3220_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln118_reg_3019_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                reg_1142 <= x_V_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state39))) then
                reg_1150 <= grp_fu_1072_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (icmp_ln150_reg_3220_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage7_11001) and (icmp_ln150_reg_3220 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage7) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                reg_1155 <= grp_fu_1068_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43))) then
                reg_1162 <= grp_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state48) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333_pp6_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter11 = ap_const_logic_1)))) then
                reg_1167 <= grp_fu_1004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state48) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333_pp6_iter19_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter20 = ap_const_logic_1)))) then
                reg_1175 <= grp_fu_1008_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln159_reg_3289 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (icmp_ln150_reg_3220_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)))) then
                reg_1184 <= weights_hu_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (icmp_ln150_reg_3220 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                rr_load_reg_3254 <= rr_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state128)) then
                select_ln186_reg_3423 <= select_ln186_fu_2340_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln100_reg_2931_pp1_iter12_reg = ap_const_lv1_0))) then
                select_ln303_reg_2991 <= select_ln303_fu_1468_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln100_fu_1209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                state_1_V_addr_reg_2940 <= zext_ln102_fu_1221_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                state_tmp_load_reg_3456 <= state_tmp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((pw12gru_scale_V_empty_n = ap_const_logic_0) or (keep_stream_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_118_reg_2819 <= pw12gru_scale_V_dout;
                tmp_reg_2832 <= keep_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_const_boolean_0 = ap_block_state55_on_subcall_done))) then
                tmp_272_reg_3183 <= grp_mysigmoid_fu_986_ap_return;
                tmp_279_reg_3188 <= grp_mysigmoid_fu_992_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                tmp_273_reg_3178 <= grp_fu_1072_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state100) and (grp_mytanh_fu_998_ap_done = ap_const_logic_1))) then
                tmp_287_reg_3328 <= grp_mytanh_fu_998_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state126)) then
                tmp_298_reg_3411 <= grp_fu_1086_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln150_reg_3220_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_const_boolean_0 = ap_block_pp4_stage2_11001))) then
                tmp_hu_V_reg_3279 <= grp_fu_2803_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state127)) then
                tmp_min_6_reg_3416 <= tmp_min_6_fu_2248_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (icmp_ln150_reg_3220 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1))) then
                weights_hw_V_load_reg_3259 <= weights_hw_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln118_reg_3019 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                weights_rw_V_load_reg_3074 <= weights_rw_V_q0;
                weights_zw_V_load_reg_3069 <= weights_zw_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_fu_1475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    zext_ln118_reg_3013(6 downto 0) <= zext_ln118_fu_1491_p1(6 downto 0);
                    zext_ln120_reg_3005(6 downto 0) <= zext_ln120_fu_1487_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln118_fu_1495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    zext_ln120_1_reg_3028(6 downto 0) <= zext_ln120_1_fu_1507_p1(6 downto 0);
                    zext_ln215_3_reg_3033(13 downto 0) <= zext_ln215_3_fu_1529_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_1646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    zext_ln150_reg_3208(6 downto 0) <= zext_ln150_fu_1662_p1(6 downto 0);
                    zext_ln152_reg_3202(6 downto 0) <= zext_ln152_fu_1658_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln150_fu_1671_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    zext_ln152_1_reg_3229(6 downto 0) <= zext_ln152_1_fu_1683_p1(6 downto 0);
                    zext_ln215_5_reg_3234(13 downto 0) <= zext_ln215_5_fu_1706_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_fu_2038_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                    zext_ln175_reg_3342(6 downto 0) <= zext_ln175_fu_2050_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln197_fu_2352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                    zext_ln199_reg_3446(6 downto 0) <= zext_ln199_fu_2364_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                    zext_ln199_reg_3446_pp7_iter1_reg(6 downto 0) <= zext_ln199_reg_3446(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333_pp6_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter6 = ap_const_logic_1))) then
                zz_load_reg_3359 <= zz_q0;
            end if;
        end if;
    end process;
    tmp_71_reg_2956(23) <= '1';
    zext_ln120_reg_3005(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln118_reg_3013(13 downto 7) <= "0000000";
    zext_ln120_1_reg_3028(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln215_3_reg_3033(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln152_reg_3202(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_3208(13 downto 7) <= "0000000";
    zext_ln152_1_reg_3229(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln215_5_reg_3234(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter3_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter4_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter5_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter6_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter7_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter8_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter9_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter10_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter11_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter12_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter13_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter14_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter15_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter16_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter17_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter18_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter19_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln175_reg_3342_pp6_iter20_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter3_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter4_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter5_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter6_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter7_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter8_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter9_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter10_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter11_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln199_reg_3446_pp7_iter12_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, keep_stream_V_empty_n, pw12gru_scale_V_empty_n, gru2fc_scale_V_full_n, ap_enable_reg_pp7_iter13, icmp_ln201_reg_3433, ap_CS_fsm_state159, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp6_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp3_iter1, ap_enable_reg_pp5_iter1, ap_CS_fsm_pp4_stage7, icmp_ln93_fu_1192_p2, ap_enable_reg_pp0_iter0, icmp_ln100_fu_1209_p2, ap_enable_reg_pp1_iter0, icmp_ln111_fu_1475_p2, ap_CS_fsm_state25, icmp_ln118_fu_1495_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter3, icmp_ln132_fu_1575_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, ap_CS_fsm_state55, ap_block_state55_on_subcall_done, icmp_ln145_fu_1646_p2, ap_CS_fsm_state57, icmp_ln150_fu_1671_p2, icmp_ln159_fu_1981_p2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter2, ap_CS_fsm_state100, grp_mytanh_fu_998_ap_done, icmp_ln173_fu_2038_p2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter22, icmp_ln197_fu_2352_p2, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter14, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_block_pp4_stage8_subdone, ap_block_pp4_stage7_subdone, ap_block_pp5_stage0_subdone, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter21, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter12, ap_block_pp4_stage1_subdone, ap_block_pp4_stage2_subdone, ap_block_pp4_stage3_subdone, ap_block_pp4_stage4_subdone, ap_block_pp4_stage5_subdone, ap_block_pp4_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((pw12gru_scale_V_empty_n = ap_const_logic_0) or (keep_stream_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln93_fu_1192_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln93_fu_1192_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln100_fu_1209_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln100_fu_1209_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln111_fu_1475_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln118_fu_1495_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln118_fu_1495_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln132_fu_1575_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln132_fu_1575_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_const_boolean_0 = ap_block_state55_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state57 => 
                if (((icmp_ln145_fu_1646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln150_fu_1671_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln150_fu_1671_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp4_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                end if;
            when ap_ST_fsm_pp4_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage2;
                end if;
            when ap_ST_fsm_pp4_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage3;
                end if;
            when ap_ST_fsm_pp4_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage4;
                end if;
            when ap_ST_fsm_pp4_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage5;
                end if;
            when ap_ST_fsm_pp4_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage6;
                end if;
            when ap_ST_fsm_pp4_stage7 => 
                if ((not(((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage7) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage7_subdone))) and (ap_const_boolean_0 = ap_block_pp4_stage7_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage8;
                elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage7) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage7_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage7;
                end if;
            when ap_ST_fsm_pp4_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage8;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln159_fu_1981_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln159_fu_1981_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state100) and (grp_mytanh_fu_998_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln173_fu_2038_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter22 = ap_const_logic_1) and (ap_enable_reg_pp6_iter21 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter22 = ap_const_logic_1) and (ap_enable_reg_pp6_iter21 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln173_fu_2038_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state125;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((icmp_ln197_fu_2352_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp7_iter13 = ap_const_logic_1) and (ap_enable_reg_pp7_iter12 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_enable_reg_pp7_iter13 = ap_const_logic_1) and (ap_enable_reg_pp7_iter12 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((icmp_ln197_fu_2352_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state159;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state159 => 
                if ((not(((gru2fc_scale_V_full_n = ap_const_logic_0) and (icmp_ln201_reg_3433 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state159))) then
                    ap_NS_fsm <= ap_ST_fsm_state160;
                else
                    ap_NS_fsm <= ap_ST_fsm_state159;
                end if;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln173_fu_1666_p2 <= std_logic_vector(unsigned(gru_output_flag_load_reg_2917) + unsigned(ap_const_lv32_40));
    add_ln215_1_fu_1701_p2 <= std_logic_vector(unsigned(zext_ln150_reg_3208) + unsigned(zext_ln215_4_fu_1697_p1));
    add_ln215_2_fu_1598_p2 <= std_logic_vector(unsigned(zext_ln118_reg_3013) + unsigned(zext_ln215_6_fu_1594_p1));
    add_ln215_3_fu_2004_p2 <= std_logic_vector(unsigned(zext_ln150_reg_3208) + unsigned(zext_ln215_8_fu_2000_p1));
    add_ln215_fu_1524_p2 <= std_logic_vector(unsigned(zext_ln118_reg_3013) + unsigned(zext_ln215_fu_1520_p1));
    and_ln177_1_fu_2160_p2 <= (grp_fu_1086_p2 and and_ln177_fu_2155_p2);
    and_ln177_fu_2155_p2 <= (or_ln177_reg_3375 and or_ln177_1_fu_2151_p2);
    and_ln179_1_fu_2183_p2 <= (grp_fu_1091_p2 and and_ln179_fu_2178_p2);
    and_ln179_fu_2178_p2 <= (or_ln179_fu_2174_p2 and or_ln177_reg_3375);
    and_ln184_fu_2233_p2 <= (tmp_298_reg_3411 and or_ln184_fu_2227_p2);
    and_ln186_1_fu_2334_p2 <= (grp_fu_1086_p2 and and_ln186_fu_2328_p2);
    and_ln186_fu_2328_p2 <= (or_ln186_fu_2304_p2 and or_ln186_1_fu_2322_p2);
    and_ln282_1_fu_1863_p2 <= (xor_ln278_1_fu_1857_p2 and icmp_ln282_1_fu_1781_p2);
    and_ln282_2_fu_2736_p2 <= (xor_ln278_2_fu_2731_p2 and icmp_ln282_2_reg_3535);
    and_ln282_fu_1336_p2 <= (xor_ln278_fu_1330_p2 and icmp_ln282_fu_1284_p2);
    and_ln284_1_fu_1889_p2 <= (xor_ln282_1_fu_1883_p2 and icmp_ln284_1_fu_1791_p2);
    and_ln284_2_fu_2635_p2 <= (xor_ln282_2_fu_2629_p2 and icmp_ln284_2_fu_2579_p2);
    and_ln284_fu_1362_p2 <= (xor_ln282_fu_1356_p2 and icmp_ln284_fu_1290_p2);
    and_ln285_3_fu_1449_p2 <= (xor_ln285_fu_1444_p2 and and_ln284_reg_2976);
    and_ln285_4_fu_1895_p2 <= (icmp_ln285_1_fu_1797_p2 and and_ln284_1_fu_1889_p2);
    and_ln285_5_fu_1953_p2 <= (xor_ln285_1_fu_1947_p2 and and_ln284_1_fu_1889_p2);
    and_ln285_6_fu_2641_p2 <= (icmp_ln285_2_fu_2585_p2 and and_ln284_2_fu_2635_p2);
    and_ln285_7_fu_2718_p2 <= (xor_ln285_2_fu_2713_p2 and and_ln284_2_reg_3550);
    and_ln285_fu_1368_p2 <= (icmp_ln285_fu_1296_p2 and and_ln284_fu_1362_p2);
    and_ln295_1_fu_1925_p2 <= (xor_ln284_1_fu_1919_p2 and icmp_ln295_1_fu_1823_p2);
    and_ln295_2_fu_2667_p2 <= (xor_ln284_2_fu_2661_p2 and icmp_ln295_2_fu_2607_p2);
    and_ln295_fu_1394_p2 <= (xor_ln284_fu_1388_p2 and icmp_ln295_fu_1318_p2);
    and_ln849_fu_2500_p2 <= (xor_ln849_fu_2495_p2 and icmp_ln849_2_reg_3478_pp7_iter8_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(37);
    ap_CS_fsm_pp4_stage1 <= ap_CS_fsm(38);
    ap_CS_fsm_pp4_stage2 <= ap_CS_fsm(39);
    ap_CS_fsm_pp4_stage3 <= ap_CS_fsm(40);
    ap_CS_fsm_pp4_stage6 <= ap_CS_fsm(43);
    ap_CS_fsm_pp4_stage7 <= ap_CS_fsm(44);
    ap_CS_fsm_pp4_stage8 <= ap_CS_fsm(45);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(47);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(71);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(92);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(69);
    ap_CS_fsm_state101 <= ap_CS_fsm(70);
    ap_CS_fsm_state125 <= ap_CS_fsm(72);
    ap_CS_fsm_state126 <= ap_CS_fsm(73);
    ap_CS_fsm_state127 <= ap_CS_fsm(74);
    ap_CS_fsm_state128 <= ap_CS_fsm(75);
    ap_CS_fsm_state129 <= ap_CS_fsm(76);
    ap_CS_fsm_state144 <= ap_CS_fsm(91);
    ap_CS_fsm_state159 <= ap_CS_fsm(93);
    ap_CS_fsm_state160 <= ap_CS_fsm(94);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(8);
    ap_CS_fsm_state25 <= ap_CS_fsm(9);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(11);
    ap_CS_fsm_state34 <= ap_CS_fsm(13);
    ap_CS_fsm_state35 <= ap_CS_fsm(14);
    ap_CS_fsm_state37 <= ap_CS_fsm(16);
    ap_CS_fsm_state38 <= ap_CS_fsm(17);
    ap_CS_fsm_state39 <= ap_CS_fsm(18);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(19);
    ap_CS_fsm_state41 <= ap_CS_fsm(20);
    ap_CS_fsm_state42 <= ap_CS_fsm(21);
    ap_CS_fsm_state43 <= ap_CS_fsm(22);
    ap_CS_fsm_state44 <= ap_CS_fsm(23);
    ap_CS_fsm_state45 <= ap_CS_fsm(24);
    ap_CS_fsm_state46 <= ap_CS_fsm(25);
    ap_CS_fsm_state47 <= ap_CS_fsm(26);
    ap_CS_fsm_state48 <= ap_CS_fsm(27);
    ap_CS_fsm_state49 <= ap_CS_fsm(28);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(32);
    ap_CS_fsm_state54 <= ap_CS_fsm(33);
    ap_CS_fsm_state55 <= ap_CS_fsm(34);
    ap_CS_fsm_state56 <= ap_CS_fsm(35);
    ap_CS_fsm_state57 <= ap_CS_fsm(36);
    ap_CS_fsm_state75 <= ap_CS_fsm(46);
    ap_CS_fsm_state79 <= ap_CS_fsm(48);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state80 <= ap_CS_fsm(49);
    ap_CS_fsm_state83 <= ap_CS_fsm(52);
    ap_CS_fsm_state84 <= ap_CS_fsm(53);
    ap_CS_fsm_state85 <= ap_CS_fsm(54);
    ap_CS_fsm_state86 <= ap_CS_fsm(55);
    ap_CS_fsm_state87 <= ap_CS_fsm(56);
    ap_CS_fsm_state88 <= ap_CS_fsm(57);
    ap_CS_fsm_state89 <= ap_CS_fsm(58);
    ap_CS_fsm_state90 <= ap_CS_fsm(59);
    ap_CS_fsm_state91 <= ap_CS_fsm(60);
    ap_CS_fsm_state92 <= ap_CS_fsm(61);
    ap_CS_fsm_state93 <= ap_CS_fsm(62);
    ap_CS_fsm_state94 <= ap_CS_fsm(63);
    ap_CS_fsm_state98 <= ap_CS_fsm(67);
    ap_CS_fsm_state99 <= ap_CS_fsm(68);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln93_reg_2922)
    begin
                ap_block_pp0_stage0_11001 <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (icmp_ln93_reg_2922 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln93_reg_2922)
    begin
                ap_block_pp0_stage0_subdone <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (icmp_ln93_reg_2922 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp7_stage0_01001_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp7_iter13, icmp_ln201_reg_3433)
    begin
                ap_block_pp7_stage0_01001 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (icmp_ln201_reg_3433 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter13 = ap_const_logic_1));
    end process;


    ap_block_pp7_stage0_11001_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp7_iter13, icmp_ln201_reg_3433)
    begin
                ap_block_pp7_stage0_11001 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (icmp_ln201_reg_3433 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter13 = ap_const_logic_1));
    end process;


    ap_block_pp7_stage0_subdone_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp7_iter13, icmp_ln201_reg_3433)
    begin
                ap_block_pp7_stage0_subdone <= ((out_stream_V_V_full_n = ap_const_logic_0) and (icmp_ln201_reg_3433 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter13 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, keep_stream_V_empty_n, pw12gru_scale_V_empty_n)
    begin
                ap_block_state1 <= ((pw12gru_scale_V_empty_n = ap_const_logic_0) or (keep_stream_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state102_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp6_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp6_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp6_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp6_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp6_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp6_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp6_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp6_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp6_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp6_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp6_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp6_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp6_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state118_pp6_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state119_pp6_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp6_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp6_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state122_pp6_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state123_pp6_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state124_pp6_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state145_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state146_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state147_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state148_pp7_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state149_pp7_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state150_pp7_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state151_pp7_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state152_pp7_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state153_pp7_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state154_pp7_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state155_pp7_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state156_pp7_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state157_pp7_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state158_pp7_stage0_iter13_assign_proc : process(out_stream_V_V_full_n, icmp_ln201_reg_3433)
    begin
                ap_block_state158_pp7_stage0_iter13 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (icmp_ln201_reg_3433 = ap_const_lv1_1));
    end process;


    ap_block_state159_assign_proc : process(gru2fc_scale_V_full_n, icmp_ln201_reg_3433)
    begin
                ap_block_state159 <= ((gru2fc_scale_V_full_n = ap_const_logic_0) and (icmp_ln201_reg_3433 = ap_const_lv1_1));
    end process;

        ap_block_state15_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state55_on_subcall_done_assign_proc : process(grp_mysigmoid_fu_986_ap_done, grp_mysigmoid_fu_992_ap_done)
    begin
                ap_block_state55_on_subcall_done <= ((grp_mysigmoid_fu_992_ap_done = ap_const_logic_0) or (grp_mysigmoid_fu_986_ap_done = ap_const_logic_0));
    end process;

        ap_block_state58_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp4_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp4_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp4_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp4_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp4_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp4_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp4_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp4_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp4_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp4_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp4_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp4_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp4_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp4_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp4_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter1_assign_proc : process(in_stream_V_V_empty_n, icmp_ln93_reg_2922)
    begin
                ap_block_state7_pp0_stage0_iter1 <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (icmp_ln93_reg_2922 = ap_const_lv1_0));
    end process;

        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1623_assign_proc : process(gru2fc_scale_V_full_n, icmp_ln201_reg_3433, ap_CS_fsm_state159)
    begin
                ap_condition_1623 <= (not(((gru2fc_scale_V_full_n = ap_const_logic_0) and (icmp_ln201_reg_3433 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state159));
    end process;


    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln93_fu_1192_p2)
    begin
        if ((icmp_ln93_fu_1192_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(icmp_ln100_fu_1209_p2)
    begin
        if ((icmp_ln100_fu_1209_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state26_assign_proc : process(icmp_ln118_fu_1495_p2)
    begin
        if ((icmp_ln118_fu_1495_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state31_assign_proc : process(icmp_ln132_fu_1575_p2)
    begin
        if ((icmp_ln132_fu_1575_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state58_assign_proc : process(icmp_ln150_fu_1671_p2)
    begin
        if ((icmp_ln150_fu_1671_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state58 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state58 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state76_assign_proc : process(icmp_ln159_fu_1981_p2)
    begin
        if ((icmp_ln159_fu_1981_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state76 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state76 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state102_assign_proc : process(icmp_ln173_fu_2038_p2)
    begin
        if ((icmp_ln173_fu_2038_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state102 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state102 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state145_assign_proc : process(icmp_ln197_fu_2352_p2)
    begin
        if ((icmp_ln197_fu_2352_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state145 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state145 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state160)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state160) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter14)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter15, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter7, ap_enable_reg_pp6_iter11, ap_enable_reg_pp6_iter20, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter6, ap_enable_reg_pp6_iter22, ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter4, ap_enable_reg_pp6_iter5, ap_enable_reg_pp6_iter8, ap_enable_reg_pp6_iter9, ap_enable_reg_pp6_iter10, ap_enable_reg_pp6_iter12, ap_enable_reg_pp6_iter13, ap_enable_reg_pp6_iter14, ap_enable_reg_pp6_iter16, ap_enable_reg_pp6_iter17, ap_enable_reg_pp6_iter18, ap_enable_reg_pp6_iter19, ap_enable_reg_pp6_iter21)
    begin
        if (((ap_enable_reg_pp6_iter20 = ap_const_logic_0) and (ap_enable_reg_pp6_iter11 = ap_const_logic_0) and (ap_enable_reg_pp6_iter7 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter15 = ap_const_logic_0) and (ap_enable_reg_pp6_iter21 = ap_const_logic_0) and (ap_enable_reg_pp6_iter19 = ap_const_logic_0) and (ap_enable_reg_pp6_iter18 = ap_const_logic_0) and (ap_enable_reg_pp6_iter17 = ap_const_logic_0) and (ap_enable_reg_pp6_iter16 = ap_const_logic_0) and (ap_enable_reg_pp6_iter14 = ap_const_logic_0) and (ap_enable_reg_pp6_iter13 = ap_const_logic_0) and (ap_enable_reg_pp6_iter12 = ap_const_logic_0) and (ap_enable_reg_pp6_iter10 = ap_const_logic_0) and (ap_enable_reg_pp6_iter9 = ap_const_logic_0) and (ap_enable_reg_pp6_iter8 = ap_const_logic_0) and (ap_enable_reg_pp6_iter5 = ap_const_logic_0) and (ap_enable_reg_pp6_iter4 = ap_const_logic_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter22 = ap_const_logic_0) and (ap_enable_reg_pp6_iter6 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter13, ap_enable_reg_pp7_iter5, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter3, ap_enable_reg_pp7_iter4, ap_enable_reg_pp7_iter6, ap_enable_reg_pp7_iter7, ap_enable_reg_pp7_iter8, ap_enable_reg_pp7_iter9, ap_enable_reg_pp7_iter10, ap_enable_reg_pp7_iter11, ap_enable_reg_pp7_iter12)
    begin
        if (((ap_enable_reg_pp7_iter5 = ap_const_logic_0) and (ap_enable_reg_pp7_iter13 = ap_const_logic_0) and (ap_enable_reg_pp7_iter12 = ap_const_logic_0) and (ap_enable_reg_pp7_iter11 = ap_const_logic_0) and (ap_enable_reg_pp7_iter10 = ap_const_logic_0) and (ap_enable_reg_pp7_iter9 = ap_const_logic_0) and (ap_enable_reg_pp7_iter8 = ap_const_logic_0) and (ap_enable_reg_pp7_iter7 = ap_const_logic_0) and (ap_enable_reg_pp7_iter6 = ap_const_logic_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0) and (ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_739_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln93_reg_2922, j_0_reg_735, j_reg_2926)
    begin
        if (((icmp_ln93_reg_2922 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_739_p4 <= j_reg_2926;
        else 
            ap_phi_mux_j_0_phi_fu_739_p4 <= j_0_reg_735;
        end if; 
    end process;


    ap_phi_mux_k4_0_phi_fu_900_p4_assign_proc : process(k4_0_reg_896, icmp_ln150_reg_3220, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, k_1_reg_3224, ap_block_pp4_stage0)
    begin
        if (((icmp_ln150_reg_3220 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_k4_0_phi_fu_900_p4 <= k_1_reg_3224;
        else 
            ap_phi_mux_k4_0_phi_fu_900_p4 <= k4_0_reg_896;
        end if; 
    end process;


    ap_phi_mux_p_0387_0_phi_fu_888_p4_assign_proc : process(p_0387_0_reg_884, ap_enable_reg_pp4_iter1, icmp_ln150_reg_3220_pp4_iter1_reg, ap_CS_fsm_pp4_stage7, tmp_hw_V_fu_1973_p3, ap_block_pp4_stage7)
    begin
        if (((icmp_ln150_reg_3220_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage7) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage7))) then 
            ap_phi_mux_p_0387_0_phi_fu_888_p4 <= tmp_hw_V_fu_1973_p3;
        else 
            ap_phi_mux_p_0387_0_phi_fu_888_p4 <= p_0387_0_reg_884;
        end if; 
    end process;


    ap_phi_mux_phi_ln187_phi_fu_933_p4_assign_proc : process(phi_ln187_reg_929, icmp_ln173_reg_3333_pp6_iter21_reg, tmp_min_7_fu_2166_p3, ap_enable_reg_pp6_iter22, ap_block_pp6_stage0)
    begin
        if (((icmp_ln173_reg_3333_pp6_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            ap_phi_mux_phi_ln187_phi_fu_933_p4 <= tmp_min_7_fu_2166_p3;
        else 
            ap_phi_mux_phi_ln187_phi_fu_933_p4 <= phi_ln187_reg_929;
        end if; 
    end process;


    ap_phi_mux_tmp_min_0_phi_fu_945_p4_assign_proc : process(tmp_min_0_reg_941, icmp_ln173_reg_3333_pp6_iter21_reg, ap_enable_reg_pp6_iter22, tmp_min_9_fu_2189_p3, ap_block_pp6_stage0)
    begin
        if (((icmp_ln173_reg_3333_pp6_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            ap_phi_mux_tmp_min_0_phi_fu_945_p4 <= tmp_min_9_fu_2189_p3;
        else 
            ap_phi_mux_tmp_min_0_phi_fu_945_p4 <= tmp_min_0_reg_941;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state160)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_h_V_address0 <= zext_ln152_reg_3202(6 - 1 downto 0);

    bias_h_V_ce0_assign_proc : process(ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            bias_h_V_ce0 <= ap_const_logic_1;
        else 
            bias_h_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_r_V_address0 <= zext_ln120_reg_3005(6 - 1 downto 0);

    bias_r_V_ce0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            bias_r_V_ce0 <= ap_const_logic_1;
        else 
            bias_r_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_z_V_address0 <= zext_ln120_reg_3005(6 - 1 downto 0);

    bias_z_V_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            bias_z_V_ce0 <= ap_const_logic_1;
        else 
            bias_z_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln177_1_fu_2073_p1 <= ap_phi_mux_phi_ln187_phi_fu_933_p4;
    bitcast_ln177_fu_2055_p1 <= reg_1175;
    bitcast_ln179_fu_2121_p1 <= ap_phi_mux_tmp_min_0_phi_fu_945_p4;
    bitcast_ln184_fu_2197_p1 <= tmp_min_0_reg_941;
    bitcast_ln186_1_fu_2275_p1 <= tmp_min_6_reg_3416;
    bitcast_ln186_fu_2257_p1 <= phi_ln187_reg_929;
    bitcast_ln475_fu_2369_p1 <= reg_1099;
    bitcast_ln849_fu_2491_p1 <= select_ln849_fu_2484_p3;
    exp_V_1_fu_1749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_112_fu_1739_p4),9));
    exp_V_2_fu_2537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_45_fu_2527_p4),9));
    exp_V_fu_1252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_1242_p4),9));

    grp_fu_1004_opcode_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state89, ap_enable_reg_pp6_iter7, icmp_ln173_reg_3333_pp6_iter6_reg, ap_CS_fsm_state49, ap_CS_fsm_state94, ap_block_pp6_stage0_00001)
    begin
        if (((icmp_ln173_reg_3333_pp6_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_00001) and (ap_enable_reg_pp6_iter7 = ap_const_logic_1))) then 
            grp_fu_1004_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            grp_fu_1004_opcode <= ap_const_lv2_0;
        else 
            grp_fu_1004_opcode <= "XX";
        end if; 
    end process;


    grp_fu_1004_p0_assign_proc : process(reg_1099, ap_CS_fsm_state44, ap_CS_fsm_state89, ap_enable_reg_pp6_iter7, reg_1155, reg_1167, ap_block_pp6_stage0, ap_CS_fsm_state49, ap_CS_fsm_state94)
    begin
        if (((ap_enable_reg_pp6_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1004_p0 <= reg_1099;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            grp_fu_1004_p0 <= reg_1167;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            grp_fu_1004_p0 <= reg_1155;
        else 
            grp_fu_1004_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1004_p1_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state89, ap_enable_reg_pp6_iter7, reg_1130, zz_load_reg_3359, ap_block_pp6_stage0, ap_CS_fsm_state49, ap_CS_fsm_state94)
    begin
        if (((ap_enable_reg_pp6_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1004_p1 <= zz_load_reg_3359;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            grp_fu_1004_p1 <= reg_1130;
        else 
            grp_fu_1004_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1008_p0_assign_proc : process(reg_1106, ap_CS_fsm_state44, reg_1175, tmp_273_reg_3178, ap_enable_reg_pp6_iter16, ap_block_pp6_stage0, ap_CS_fsm_state49)
    begin
        if (((ap_enable_reg_pp6_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1008_p0 <= reg_1106;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_1008_p0 <= reg_1175;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_1008_p0 <= tmp_273_reg_3178;
        else 
            grp_fu_1008_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1008_p1_assign_proc : process(reg_1112, ap_CS_fsm_state44, reg_1162, ap_enable_reg_pp6_iter16, ap_block_pp6_stage0, ap_CS_fsm_state49)
    begin
        if (((ap_enable_reg_pp6_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1008_p1 <= reg_1112;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            grp_fu_1008_p1 <= reg_1162;
        else 
            grp_fu_1008_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1016_ce_assign_proc : process(ap_CS_fsm_state5, ap_block_pp7_stage0_11001, ap_block_pp6_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp6_stage0, ap_CS_fsm_pp4_stage6, ap_block_pp4_stage6_11001, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp4_stage3, ap_block_pp4_stage3_11001, ap_CS_fsm_state88, ap_CS_fsm_state93, ap_CS_fsm_state40, ap_CS_fsm_pp4_stage7, ap_block_pp4_stage7_11001, ap_CS_fsm_state85, ap_CS_fsm_state2, ap_CS_fsm_pp4_stage2, ap_block_pp4_stage2_11001, ap_CS_fsm_pp7_stage0, ap_CS_fsm_pp4_stage8, ap_CS_fsm_state45, ap_CS_fsm_state90, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_block_pp4_stage8_11001, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state45) or ((ap_const_boolean_0 = ap_block_pp4_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage7)) or ((ap_const_boolean_0 = ap_block_pp4_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage3)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage6)) or ((ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage8)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_const_boolean_0 = ap_block_pp4_stage2_11001)))) then 
            grp_fu_1016_ce <= ap_const_logic_1;
        else 
            grp_fu_1016_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1016_p0_assign_proc : process(ap_block_pp7_stage0, ap_enable_reg_pp4_iter0, grp_fu_1068_p1, reg_1124, ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, reg_1155, ap_CS_fsm_state40, ap_CS_fsm_state85, tmp_118_reg_2819, ap_CS_fsm_state2, zz_load_reg_3359_pp6_iter7_reg, state_tmp_load_reg_3456, ap_enable_reg_pp1_iter8, ap_enable_reg_pp6_iter8, ap_enable_reg_pp7_iter2, ap_block_pp4_stage0, ap_block_pp6_stage0, ap_block_pp1_stage0, ap_CS_fsm_state45, ap_block_pp4_stage6, ap_CS_fsm_state90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            grp_fu_1016_p0 <= state_tmp_load_reg_3456;
        elsif (((ap_enable_reg_pp6_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1016_p0 <= zz_load_reg_3359_pp6_iter7_reg;
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            grp_fu_1016_p0 <= reg_1155;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp4_stage6) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage6))) then 
            grp_fu_1016_p0 <= grp_fu_1068_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state45) or ((ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            grp_fu_1016_p0 <= reg_1124;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_1016_p0 <= tmp_118_reg_2819;
        else 
            grp_fu_1016_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1016_p1_assign_proc : process(zu_weights_scale, tmp_scale_gru5, ap_block_pp7_stage0, grp_fu_1016_p2, ap_enable_reg_pp4_iter0, reg_1124, ap_CS_fsm_pp4_stage6, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_CS_fsm_state40, ap_CS_fsm_state85, tmp_reg_2832, ap_CS_fsm_state2, tmp_scale3_reg_2887, tmp_scale4_reg_2892, tmp_scale8_reg_2907, rr_load_reg_3254, shrink_reg_3428, ap_enable_reg_pp1_iter8, ap_enable_reg_pp6_iter8, ap_enable_reg_pp7_iter2, ap_block_pp4_stage0, ap_block_pp6_stage0, ap_block_pp1_stage0, ap_CS_fsm_state45, ap_block_pp4_stage6, ap_CS_fsm_state90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            grp_fu_1016_p1 <= shrink_reg_3428;
        elsif (((ap_enable_reg_pp6_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1016_p1 <= reg_1124;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_1016_p1 <= tmp_scale8_reg_2907;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_1016_p1 <= tmp_scale_gru5;
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            grp_fu_1016_p1 <= grp_fu_1016_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp4_stage6) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage6))) then 
            grp_fu_1016_p1 <= rr_load_reg_3254;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_1016_p1 <= tmp_scale4_reg_2892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_1016_p1 <= tmp_scale3_reg_2887;
        elsif (((ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_1016_p1 <= tmp_reg_2832;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_1016_p1 <= zu_weights_scale;
        else 
            grp_fu_1016_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1021_p0_assign_proc : process(reg_1150, ap_CS_fsm_state40, reg_1167, tmp_118_reg_2819, ap_CS_fsm_state2, ap_enable_reg_pp6_iter12, ap_block_pp6_stage0, ap_CS_fsm_state45)
    begin
        if (((ap_enable_reg_pp6_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1021_p0 <= reg_1167;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_fu_1021_p0 <= reg_1150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_1021_p0 <= tmp_118_reg_2819;
        else 
            grp_fu_1021_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1021_p1_assign_proc : process(ru_weights_scale, ap_CS_fsm_state40, ap_CS_fsm_state2, tmp_scale5_reg_2897, tmp_scale6_reg_2902, hh_load_reg_3370, ap_enable_reg_pp6_iter12, ap_block_pp6_stage0, ap_CS_fsm_state45)
    begin
        if (((ap_enable_reg_pp6_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1021_p1 <= hh_load_reg_3370;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_1021_p1 <= tmp_scale6_reg_2902;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_1021_p1 <= tmp_scale5_reg_2897;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_1021_p1 <= ru_weights_scale;
        else 
            grp_fu_1021_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1026_p0_assign_proc : process(reg_1130, tmp_118_reg_2819, ap_CS_fsm_state2, ap_enable_reg_pp6_iter12, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1026_p0 <= reg_1130;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_1026_p0 <= tmp_118_reg_2819;
        else 
            grp_fu_1026_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1026_p1_assign_proc : process(hu_weights_scale, ap_CS_fsm_state2, tmp_scale9_reg_2912, ap_enable_reg_pp6_iter12, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1026_p1 <= tmp_scale9_reg_2912;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_1026_p1 <= hu_weights_scale;
        else 
            grp_fu_1026_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1068_p0_assign_proc : process(state_1_V_q1, p_0174_0_reg_793, p_0387_0_reg_884, reg_1118, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, ap_CS_fsm_state39, ap_CS_fsm_state84, ap_CS_fsm_pp4_stage7, sext_ln138_fu_1627_p1, ap_CS_fsm_state35, sext_ln138_1_fu_1637_p1, sext_ln1428_fu_1711_p1, ap_CS_fsm_pp4_stage2, sext_ln163_fu_2028_p1, ap_CS_fsm_state80, sext_ln163_1_fu_2033_p1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp6_iter2, ap_phi_mux_p_0387_0_phi_fu_888_p4, ap_block_pp4_stage7, ap_block_pp6_stage0, ap_block_pp1_stage0, ap_CS_fsm_state34, ap_block_pp4_stage1, ap_block_pp4_stage2, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_1068_p0 <= sext_ln163_1_fu_2033_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_fu_1068_p0 <= sext_ln163_fu_2028_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_1068_p0 <= p_0387_0_reg_884;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp4_stage7) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage7))) then 
            grp_fu_1068_p0 <= ap_phi_mux_p_0387_0_phi_fu_888_p4;
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage2) and (ap_const_boolean_0 = ap_block_pp4_stage2))) then 
            grp_fu_1068_p0 <= sext_ln1428_fu_1711_p1;
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            grp_fu_1068_p0 <= state_1_V_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_1068_p0 <= sext_ln138_1_fu_1637_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_1068_p0 <= sext_ln138_fu_1627_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_1068_p0 <= p_0174_0_reg_793;
        elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0)))) then 
            grp_fu_1068_p0 <= reg_1118;
        else 
            grp_fu_1068_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1072_p0_assign_proc : process(p_0326_0_reg_805, ap_CS_fsm_state39, ap_CS_fsm_state35, sext_ln140_fu_1632_p1, sext_ln140_1_fu_1642_p1, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_1072_p0 <= sext_ln140_1_fu_1642_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_1072_p0 <= sext_ln140_fu_1632_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_1072_p0 <= p_0326_0_reg_805;
        else 
            grp_fu_1072_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1080_ce_assign_proc : process(ap_block_pp7_stage0_11001, ap_CS_fsm_pp7_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            grp_fu_1080_ce <= ap_const_logic_1;
        else 
            grp_fu_1080_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1080_p0 <= 
        x_assign_reg_3467_pp7_iter8_reg when (and_ln849_fu_2500_p2(0) = '1') else 
        bitcast_ln849_reg_3498;

    grp_fu_1083_ce_assign_proc : process(ap_block_pp7_stage0_11001, ap_CS_fsm_pp7_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            grp_fu_1083_ce <= ap_const_logic_1;
        else 
            grp_fu_1083_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1086_opcode_assign_proc : process(icmp_ln173_reg_3333_pp6_iter20_reg, ap_CS_fsm_state127, ap_enable_reg_pp6_iter21, ap_CS_fsm_state125, ap_block_pp6_stage0_00001)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            grp_fu_1086_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state127) or ((icmp_ln173_reg_3333_pp6_iter20_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_00001) and (ap_enable_reg_pp6_iter21 = ap_const_logic_1)))) then 
            grp_fu_1086_opcode <= ap_const_lv5_2;
        else 
            grp_fu_1086_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_1086_p0_assign_proc : process(phi_ln187_reg_929, tmp_min_0_reg_941, reg_1175, ap_CS_fsm_state127, ap_enable_reg_pp6_iter21, ap_block_pp6_stage0, ap_CS_fsm_state125)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
            grp_fu_1086_p0 <= phi_ln187_reg_929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            grp_fu_1086_p0 <= tmp_min_0_reg_941;
        elsif (((ap_enable_reg_pp6_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1086_p0 <= reg_1175;
        else 
            grp_fu_1086_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1086_p1_assign_proc : process(tmp_min_6_fu_2248_p3, ap_CS_fsm_state127, ap_enable_reg_pp6_iter21, ap_phi_mux_phi_ln187_phi_fu_933_p4, ap_block_pp6_stage0, ap_CS_fsm_state125)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
            grp_fu_1086_p1 <= tmp_min_6_fu_2248_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            grp_fu_1086_p1 <= ap_const_lv32_0;
        elsif (((ap_enable_reg_pp6_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_1086_p1 <= ap_phi_mux_phi_ln187_phi_fu_933_p4;
        else 
            grp_fu_1086_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_2771_p1 <= rhs_V_fu_1557_p1(8 - 1 downto 0);
    grp_fu_2779_p0 <= rhs_V_fu_1557_p1(8 - 1 downto 0);
    grp_fu_2787_p1 <= rhs_V_2_fu_1619_p1(8 - 1 downto 0);
    grp_fu_2795_p0 <= rhs_V_2_fu_1619_p1(8 - 1 downto 0);
    grp_mysigmoid_fu_986_ap_start <= grp_mysigmoid_fu_986_ap_start_reg;
    grp_mysigmoid_fu_992_ap_start <= grp_mysigmoid_fu_992_ap_start_reg;
    grp_mytanh_fu_998_ap_start <= grp_mytanh_fu_998_ap_start_reg;

    gru2fc_scale_V_blk_n_assign_proc : process(gru2fc_scale_V_full_n, icmp_ln201_reg_3433, ap_CS_fsm_state159)
    begin
        if (((icmp_ln201_reg_3433 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state159))) then 
            gru2fc_scale_V_blk_n <= gru2fc_scale_V_full_n;
        else 
            gru2fc_scale_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gru2fc_scale_V_din <= ap_const_lv32_43000000;

    gru2fc_scale_V_write_assign_proc : process(gru2fc_scale_V_full_n, icmp_ln201_reg_3433, ap_CS_fsm_state159)
    begin
        if ((not(((gru2fc_scale_V_full_n = ap_const_logic_0) and (icmp_ln201_reg_3433 = ap_const_lv1_1))) and (icmp_ln201_reg_3433 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state159))) then 
            gru2fc_scale_V_write <= ap_const_logic_1;
        else 
            gru2fc_scale_V_write <= ap_const_logic_0;
        end if; 
    end process;

    h_fu_2358_p2 <= std_logic_vector(unsigned(h_0_reg_964) + unsigned(ap_const_lv7_1));

    hh_address0_assign_proc : process(zext_ln152_reg_3202, zext_ln175_reg_3342_pp6_iter9_reg, ap_enable_reg_pp6_iter10, ap_CS_fsm_state101, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            hh_address0 <= zext_ln175_reg_3342_pp6_iter9_reg(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            hh_address0 <= zext_ln152_reg_3202(6 - 1 downto 0);
        else 
            hh_address0 <= "XXXXXX";
        end if; 
    end process;


    hh_ce0_assign_proc : process(ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter10, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter10 = ap_const_logic_1)))) then 
            hh_ce0 <= ap_const_logic_1;
        else 
            hh_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hh_we0_assign_proc : process(ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            hh_we0 <= ap_const_logic_1;
        else 
            hh_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_41_fu_1215_p2 <= std_logic_vector(unsigned(i_0_reg_747) + unsigned(ap_const_lv7_1));
    i_42_fu_1481_p2 <= std_logic_vector(unsigned(i1_0_reg_758) + unsigned(ap_const_lv7_1));
    i_43_fu_1652_p2 <= std_logic_vector(unsigned(i3_0_reg_861) + unsigned(ap_const_lv7_1));
    i_fu_2044_p2 <= std_logic_vector(unsigned(i6_0_reg_953) + unsigned(ap_const_lv7_1));
    icmp_ln100_fu_1209_p2 <= "1" when (i_0_reg_747 = ap_const_lv7_40) else "0";
    icmp_ln111_fu_1475_p2 <= "1" when (i1_0_reg_758 = ap_const_lv7_40) else "0";
    icmp_ln118_fu_1495_p2 <= "1" when (j2_0_reg_817 = ap_const_lv7_40) else "0";
    icmp_ln132_fu_1575_p2 <= "1" when (k_0_reg_850 = ap_const_lv7_60) else "0";
    icmp_ln145_fu_1646_p2 <= "1" when (i3_0_reg_861 = ap_const_lv7_40) else "0";
    icmp_ln150_fu_1671_p2 <= "1" when (ap_phi_mux_k4_0_phi_fu_900_p4 = ap_const_lv7_40) else "0";
    icmp_ln159_fu_1981_p2 <= "1" when (j5_0_reg_918 = ap_const_lv7_60) else "0";
    icmp_ln173_fu_2038_p2 <= "1" when (i6_0_reg_953 = ap_const_lv7_40) else "0";
    icmp_ln177_1_fu_2097_p2 <= "1" when (trunc_ln177_fu_2069_p1 = ap_const_lv23_0) else "0";
    icmp_ln177_2_fu_2109_p2 <= "0" when (tmp_303_fu_2077_p4 = ap_const_lv8_FF) else "1";
    icmp_ln177_3_fu_2115_p2 <= "1" when (trunc_ln177_1_fu_2087_p1 = ap_const_lv23_0) else "0";
    icmp_ln177_fu_2091_p2 <= "0" when (tmp_302_fu_2059_p4 = ap_const_lv8_FF) else "1";
    icmp_ln179_1_fu_2145_p2 <= "1" when (trunc_ln179_fu_2135_p1 = ap_const_lv23_0) else "0";
    icmp_ln179_fu_2139_p2 <= "0" when (tmp_305_fu_2125_p4 = ap_const_lv8_FF) else "1";
    icmp_ln184_1_fu_2221_p2 <= "1" when (trunc_ln184_fu_2211_p1 = ap_const_lv23_0) else "0";
    icmp_ln184_fu_2215_p2 <= "0" when (tmp_297_fu_2201_p4 = ap_const_lv8_FF) else "1";
    icmp_ln186_1_fu_2298_p2 <= "1" when (trunc_ln186_fu_2271_p1 = ap_const_lv23_0) else "0";
    icmp_ln186_2_fu_2310_p2 <= "0" when (tmp_300_fu_2278_p4 = ap_const_lv8_FF) else "1";
    icmp_ln186_3_fu_2316_p2 <= "1" when (trunc_ln186_1_fu_2288_p1 = ap_const_lv23_0) else "0";
    icmp_ln186_fu_2292_p2 <= "0" when (tmp_299_fu_2261_p4 = ap_const_lv8_FF) else "1";
    icmp_ln197_fu_2352_p2 <= "1" when (h_0_reg_964 = ap_const_lv7_40) else "0";
    icmp_ln201_fu_2347_p2 <= "1" when (add_ln173_reg_3214 = ap_const_lv32_C40) else "0";
    icmp_ln278_1_fu_1765_p2 <= "1" when (trunc_ln262_1_fu_1727_p1 = ap_const_lv31_0) else "0";
    icmp_ln278_2_fu_2557_p2 <= "1" when (trunc_ln262_2_fu_2515_p1 = ap_const_lv31_0) else "0";
    icmp_ln278_fu_1268_p2 <= "1" when (trunc_ln262_fu_1230_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_1_fu_1781_p2 <= "1" when (p_Result_s_112_fu_1739_p4 = ap_const_lv8_96) else "0";
    icmp_ln282_2_fu_2573_p2 <= "1" when (p_Result_45_fu_2527_p4 = ap_const_lv8_96) else "0";
    icmp_ln282_fu_1284_p2 <= "1" when (p_Result_s_fu_1242_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_1_fu_1791_p2 <= "1" when (signed(sh_amt_4_fu_1771_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln284_2_fu_2579_p2 <= "1" when (signed(sh_amt_6_fu_2563_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln284_fu_1290_p2 <= "1" when (signed(sh_amt_fu_1274_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_1_fu_1797_p2 <= "1" when (signed(sh_amt_4_fu_1771_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln285_2_fu_2585_p2 <= "1" when (signed(sh_amt_6_fu_2563_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln285_fu_1296_p2 <= "1" when (signed(sh_amt_fu_1274_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_1_fu_1823_p2 <= "1" when (signed(tmp_112_fu_1813_p4) < signed(ap_const_lv4_1)) else "0";
    icmp_ln295_2_fu_2607_p2 <= "1" when (signed(tmp_116_fu_2597_p4) < signed(ap_const_lv6_1)) else "0";
    icmp_ln295_fu_1318_p2 <= "1" when (signed(tmp_109_fu_1308_p4) < signed(ap_const_lv4_1)) else "0";
    icmp_ln849_2_fu_2401_p2 <= "1" when (unsigned(tmp_V_9_fu_2385_p4) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln849_fu_2395_p2 <= "1" when (unsigned(tmp_V_9_fu_2385_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    icmp_ln93_fu_1192_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_739_p4 = ap_const_lv7_60) else "0";

    in_stream_V_V_blk_n_assign_proc : process(in_stream_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln93_reg_2922)
    begin
        if (((icmp_ln93_reg_2922 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_V_V_blk_n <= in_stream_V_V_empty_n;
        else 
            in_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln93_reg_2922, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln93_reg_2922 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_V_V_read <= ap_const_logic_1;
        else 
            in_stream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    index_V_fu_2407_p4 <= p_Val2_23_fu_2381_p1(57 downto 52);
    j_17_fu_1501_p2 <= std_logic_vector(unsigned(j2_0_reg_817) + unsigned(ap_const_lv7_1));
    j_18_fu_2014_p2 <= std_logic_vector(unsigned(j5_0_reg_918) + unsigned(ap_const_lv7_1));
    j_fu_1198_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_0_phi_fu_739_p4) + unsigned(ap_const_lv7_1));
    k_1_fu_1677_p2 <= std_logic_vector(unsigned(ap_phi_mux_k4_0_phi_fu_900_p4) + unsigned(ap_const_lv7_1));
    k_fu_1609_p2 <= std_logic_vector(unsigned(k_0_reg_850) + unsigned(ap_const_lv7_1));

    keep_stream_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, keep_stream_V_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            keep_stream_V_blk_n <= keep_stream_V_empty_n;
        else 
            keep_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    keep_stream_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, keep_stream_V_empty_n, pw12gru_scale_V_empty_n)
    begin
        if ((not(((pw12gru_scale_V_empty_n = ap_const_logic_0) or (keep_stream_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            keep_stream_V_read <= ap_const_logic_1;
        else 
            keep_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln286_1_fu_1829_p2 <= std_logic_vector(shift_right(unsigned(tmp_77_fu_1757_p3),to_integer(unsigned('0' & sext_ln281_1_fu_1777_p1(24-1 downto 0)))));
    lshr_ln286_2_fu_2613_p2 <= std_logic_vector(shift_right(unsigned(tmp_81_fu_2549_p3),to_integer(unsigned('0' & sext_ln281_2_fu_2569_p1(24-1 downto 0)))));
    lshr_ln286_fu_1324_p2 <= std_logic_vector(shift_right(unsigned(tmp_71_fu_1260_p3),to_integer(unsigned('0' & sext_ln281_fu_1280_p1(24-1 downto 0)))));
    mask_table2_address0 <= zext_ln498_fu_2417_p1(6 - 1 downto 0);

    mask_table2_ce0_assign_proc : process(ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter7 = ap_const_logic_1))) then 
            mask_table2_ce0 <= ap_const_logic_1;
        else 
            mask_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln68_1_fu_1547_p0 <= reg_1118;
    mul_ln68_1_fu_1547_p1 <= weights_rw_V_load_reg_3074;
    mul_ln68_1_fu_1547_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln68_1_fu_1547_p0) * signed(mul_ln68_1_fu_1547_p1))), 32));
    mul_ln68_fu_1538_p0 <= reg_1118;
    mul_ln68_fu_1538_p1 <= weights_zw_V_load_reg_3069;
    mul_ln68_fu_1538_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln68_fu_1538_p0) * signed(mul_ln68_fu_1538_p1))), 32));
    one_half_table3_address0 <= zext_ln498_fu_2417_p1(6 - 1 downto 0);

    one_half_table3_ce0_assign_proc : process(ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter7 = ap_const_logic_1))) then 
            one_half_table3_ce0 <= ap_const_logic_1;
        else 
            one_half_table3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln177_1_fu_2151_p2 <= (icmp_ln177_3_reg_3386 or icmp_ln177_2_reg_3381);
    or_ln177_fu_2103_p2 <= (icmp_ln177_fu_2091_p2 or icmp_ln177_1_fu_2097_p2);
    or_ln179_fu_2174_p2 <= (icmp_ln179_reg_3391 or icmp_ln179_1_reg_3396);
    or_ln184_fu_2227_p2 <= (icmp_ln184_fu_2215_p2 or icmp_ln184_1_fu_2221_p2);
    or_ln186_1_fu_2322_p2 <= (icmp_ln186_3_fu_2316_p2 or icmp_ln186_2_fu_2310_p2);
    or_ln186_fu_2304_p2 <= (icmp_ln186_fu_2292_p2 or icmp_ln186_1_fu_2298_p2);
    or_ln282_1_fu_1877_p2 <= (icmp_ln282_1_fu_1781_p2 or icmp_ln278_1_fu_1765_p2);
    or_ln282_2_fu_2623_p2 <= (icmp_ln282_2_fu_2573_p2 or icmp_ln278_2_fu_2557_p2);
    or_ln282_fu_1350_p2 <= (icmp_ln282_fu_1284_p2 or icmp_ln278_fu_1268_p2);
    or_ln284_1_fu_1913_p2 <= (or_ln282_1_fu_1877_p2 or icmp_ln284_1_fu_1791_p2);
    or_ln284_2_fu_2655_p2 <= (or_ln282_2_fu_2623_p2 or icmp_ln284_2_fu_2579_p2);
    or_ln284_fu_1382_p2 <= (or_ln282_fu_1350_p2 or icmp_ln284_fu_1290_p2);

    out_stream_V_V_blk_n_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp7_iter13, ap_block_pp7_stage0, icmp_ln201_reg_3433)
    begin
        if (((icmp_ln201_reg_3433 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter13 = ap_const_logic_1))) then 
            out_stream_V_V_blk_n <= out_stream_V_V_full_n;
        else 
            out_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_V_din <= outprepare_V_reg_3565;

    out_stream_V_V_write_assign_proc : process(ap_enable_reg_pp7_iter13, icmp_ln201_reg_3433, ap_block_pp7_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln201_reg_3433 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter13 = ap_const_logic_1))) then 
            out_stream_V_V_write <= ap_const_logic_1;
        else 
            out_stream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    outprepare_V_fu_2754_p3 <= 
        sub_ln461_2_fu_2748_p2 when (p_Result_40_reg_3518(0) = '1') else 
        select_ln282_2_fu_2741_p3;
    p_Result_35_fu_1731_p3 <= reg_V_1_fu_1723_p1(31 downto 31);
    p_Result_37_fu_2427_p3 <= (p_Result_36_reg_3461_pp7_iter7_reg & ap_const_lv63_0);
    p_Result_38_fu_2438_p3 <= (p_Result_36_reg_3461_pp7_iter7_reg & trunc_ln368_reg_3493);
    p_Result_39_fu_2476_p3 <= (tmp_103_fu_2466_p4 & xs_sig_V_fu_2460_p2);
    p_Result_45_fu_2527_p4 <= reg_V_2_fu_2512_p1(30 downto 23);
    p_Result_s_112_fu_1739_p4 <= reg_V_1_fu_1723_p1(30 downto 23);
    p_Result_s_fu_1242_p4 <= reg_V_fu_1226_p1(30 downto 23);
    p_Val2_23_fu_2381_p1 <= grp_fu_1083_p1;
    p_Val2_27_fu_2444_p2 <= std_logic_vector(unsigned(p_Result_38_fu_2438_p3) + unsigned(zext_ln209_fu_2434_p1));

    pw12gru_scale_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, pw12gru_scale_V_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            pw12gru_scale_V_blk_n <= pw12gru_scale_V_empty_n;
        else 
            pw12gru_scale_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pw12gru_scale_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, keep_stream_V_empty_n, pw12gru_scale_V_empty_n)
    begin
        if ((not(((pw12gru_scale_V_empty_n = ap_const_logic_0) or (keep_stream_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pw12gru_scale_V_read <= ap_const_logic_1;
        else 
            pw12gru_scale_V_read <= ap_const_logic_0;
        end if; 
    end process;

    reg_V_1_fu_1723_p1 <= grp_fu_1012_p2;
    reg_V_2_fu_2512_p1 <= outprepare_tmp_reg_3508;
    reg_V_fu_1226_p1 <= reg_1130;
        rhs_V_2_fu_1619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_1142),16));

        rhs_V_fu_1557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_1142),16));


    rr_address0_assign_proc : process(ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage0, zext_ln120_reg_3005, zext_ln152_1_fu_1683_p1, ap_CS_fsm_state56, ap_block_pp4_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            rr_address0 <= zext_ln152_1_fu_1683_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            rr_address0 <= zext_ln120_reg_3005(6 - 1 downto 0);
        else 
            rr_address0 <= "XXXXXX";
        end if; 
    end process;


    rr_ce0_assign_proc : process(ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then 
            rr_ce0 <= ap_const_logic_1;
        else 
            rr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rr_we0_assign_proc : process(ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            rr_we0 <= ap_const_logic_1;
        else 
            rr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln186_fu_2340_p3 <= 
        phi_ln187_reg_929 when (and_ln186_1_fu_2334_p2(0) = '1') else 
        tmp_min_6_reg_3416;
    select_ln278_1_fu_1939_p3 <= 
        ap_const_lv32_0 when (icmp_ln278_1_fu_1765_p2(0) = '1') else 
        select_ln295_1_fu_1931_p3;
    select_ln278_2_fu_2706_p3 <= 
        ap_const_lv8_0 when (icmp_ln278_2_reg_3529(0) = '1') else 
        select_ln295_2_fu_2700_p3;
    select_ln278_fu_1437_p3 <= 
        ap_const_lv32_0 when (icmp_ln278_reg_2961(0) = '1') else 
        select_ln295_fu_1430_p3;
    select_ln282_1_fu_1869_p3 <= 
        tmp_77_fu_1757_p3 when (and_ln282_1_fu_1863_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln282_2_fu_2741_p3 <= 
        trunc_ln283_reg_3523 when (and_ln282_2_fu_2736_p2(0) = '1') else 
        select_ln285_7_fu_2723_p3;
    select_ln282_fu_1342_p3 <= 
        tmp_71_fu_1260_p3 when (and_ln282_fu_1336_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln285_3_fu_1454_p3 <= 
        select_ln288_fu_1413_p3 when (and_ln285_3_fu_1449_p2(0) = '1') else 
        select_ln278_fu_1437_p3;
    select_ln285_4_fu_1901_p3 <= 
        lshr_ln286_1_fu_1829_p2 when (and_ln285_4_fu_1895_p2(0) = '1') else 
        select_ln282_1_fu_1869_p3;
    select_ln285_5_fu_1959_p3 <= 
        select_ln288_1_fu_1843_p3 when (and_ln285_5_fu_1953_p2(0) = '1') else 
        select_ln278_1_fu_1939_p3;
    select_ln285_6_fu_2647_p3 <= 
        trunc_ln286_fu_2619_p1 when (and_ln285_6_fu_2641_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln285_7_fu_2723_p3 <= 
        select_ln288_2_fu_2683_p3 when (and_ln285_7_fu_2718_p2(0) = '1') else 
        select_ln278_2_fu_2706_p3;
    select_ln285_fu_1374_p3 <= 
        lshr_ln286_fu_1324_p2 when (and_ln285_fu_1368_p2(0) = '1') else 
        select_ln282_fu_1342_p3;
    select_ln288_1_fu_1843_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_113_fu_1835_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln288_2_fu_2683_p3 <= 
        ap_const_lv8_FF when (tmp_117_fu_2676_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln288_fu_1413_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_110_fu_1406_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln295_1_fu_1931_p3 <= 
        shl_ln297_1_fu_1851_p2 when (and_ln295_1_fu_1925_p2(0) = '1') else 
        zext_ln285_1_fu_1909_p1;
    select_ln295_2_fu_2700_p3 <= 
        shl_ln297_2_fu_2695_p2 when (and_ln295_2_reg_3560(0) = '1') else 
        select_ln285_6_reg_3555;
    select_ln295_fu_1430_p3 <= 
        shl_ln297_fu_1421_p2 when (and_ln295_reg_2986(0) = '1') else 
        zext_ln285_fu_1427_p1;
    select_ln303_fu_1468_p3 <= 
        sub_ln461_fu_1462_p2 when (p_Result_34_reg_2951(0) = '1') else 
        select_ln285_3_fu_1454_p3;
    select_ln849_fu_2484_p3 <= 
        p_Result_37_fu_2427_p3 when (icmp_ln849_reg_3472(0) = '1') else 
        p_Result_39_fu_2476_p3;
        sext_ln138_1_fu_1637_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_z_V_q0),32));

        sext_ln138_fu_1627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0322_0_reg_828),32));

        sext_ln140_1_fu_1642_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_r_V_load_reg_3163),32));

        sext_ln140_fu_1632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0406_0_reg_839),32));

        sext_ln1428_fu_1711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_hw_V_load_reg_3259),32));

        sext_ln163_1_fu_2033_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_h_V_q0),32));

        sext_ln163_fu_2028_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0510_0_reg_907),32));

        sext_ln281_1_fu_1777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_4_fu_1771_p2),24));

        sext_ln281_2_fu_2569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_6_fu_2563_p2),24));

        sext_ln281_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_1274_p2),24));

        sext_ln294_1_fu_1809_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_5_fu_1803_p2),32));

        sext_ln294_2_fu_2673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_7_reg_3545),32));

    sext_ln294_2cast_fu_2691_p1 <= sext_ln294_2_fu_2673_p1(8 - 1 downto 0);
        sext_ln294_fu_1403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_reg_2971),32));

        sext_ln68_7_fu_2761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(outprepare_V_reg_3565),32));

    sh_amt_3_fu_1302_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_fu_1274_p2));
    sh_amt_4_fu_1771_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_1_fu_1749_p1));
    sh_amt_5_fu_1803_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_4_fu_1771_p2));
    sh_amt_6_fu_2563_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_2_fu_2537_p1));
    sh_amt_7_fu_2591_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_6_fu_2563_p2));
    sh_amt_fu_1274_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_1252_p1));
    shl_ln297_1_fu_1851_p2 <= std_logic_vector(shift_left(unsigned(zext_ln283_1_fu_1787_p1),to_integer(unsigned('0' & sext_ln294_1_fu_1809_p1(31-1 downto 0)))));
    shl_ln297_2_fu_2695_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln283_reg_3523),to_integer(unsigned('0' & sext_ln294_2cast_fu_2691_p1(8-1 downto 0)))));
    shl_ln297_fu_1421_p2 <= std_logic_vector(shift_left(unsigned(zext_ln283_fu_1400_p1),to_integer(unsigned('0' & sext_ln294_fu_1403_p1(31-1 downto 0)))));

    state_1_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, zext_ln120_1_fu_1507_p1, ap_enable_reg_pp6_iter0, zext_ln175_fu_2050_p1, ap_block_pp6_stage0, zext_ln102_fu_1221_p1, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            state_1_V_address0 <= zext_ln175_fu_2050_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            state_1_V_address0 <= zext_ln120_1_fu_1507_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            state_1_V_address0 <= zext_ln102_fu_1221_p1(6 - 1 downto 0);
        else 
            state_1_V_address0 <= "XXXXXX";
        end if; 
    end process;


    state_1_V_address1_assign_proc : process(ap_enable_reg_pp7_iter13, ap_block_pp7_stage0, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage0, state_1_V_addr_reg_2940_pp1_iter13_reg, zext_ln152_1_fu_1683_p1, zext_ln199_reg_3446_pp7_iter12_reg, ap_enable_reg_pp1_iter14, ap_block_pp4_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter13 = ap_const_logic_1))) then 
            state_1_V_address1 <= zext_ln199_reg_3446_pp7_iter12_reg(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            state_1_V_address1 <= zext_ln152_1_fu_1683_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            state_1_V_address1 <= state_1_V_addr_reg_2940_pp1_iter13_reg;
        else 
            state_1_V_address1 <= "XXXXXX";
        end if; 
    end process;


    state_1_V_ce0_assign_proc : process(ap_block_pp6_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp6_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1)))) then 
            state_1_V_ce0 <= ap_const_logic_1;
        else 
            state_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_1_V_ce1_assign_proc : process(ap_enable_reg_pp7_iter13, ap_block_pp7_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp1_iter14)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter13 = ap_const_logic_1)))) then 
            state_1_V_ce1 <= ap_const_logic_1;
        else 
            state_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_1_V_d1_assign_proc : process(ap_enable_reg_pp7_iter13, ap_block_pp7_stage0, select_ln303_reg_2991, ap_enable_reg_pp1_iter14, ap_block_pp1_stage0, sext_ln68_7_fu_2761_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter13 = ap_const_logic_1))) then 
            state_1_V_d1 <= sext_ln68_7_fu_2761_p1;
        elsif (((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            state_1_V_d1 <= select_ln303_reg_2991;
        else 
            state_1_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_1_V_we1_assign_proc : process(ap_enable_reg_pp7_iter13, ap_block_pp7_stage0_11001, ap_block_pp1_stage0_11001, icmp_ln100_reg_2931_pp1_iter13_reg, ap_enable_reg_pp1_iter14)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln100_reg_2931_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter13 = ap_const_logic_1)))) then 
            state_1_V_we1 <= ap_const_logic_1;
        else 
            state_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    state_tmp_address0_assign_proc : process(ap_block_pp7_stage0, zext_ln175_reg_3342_pp6_iter20_reg, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, zext_ln199_fu_2364_p1, ap_enable_reg_pp6_iter21, ap_block_pp6_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            state_tmp_address0 <= zext_ln199_fu_2364_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp6_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            state_tmp_address0 <= zext_ln175_reg_3342_pp6_iter20_reg(6 - 1 downto 0);
        else 
            state_tmp_address0 <= "XXXXXX";
        end if; 
    end process;


    state_tmp_ce0_assign_proc : process(ap_block_pp7_stage0_11001, ap_block_pp6_stage0_11001, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_enable_reg_pp6_iter21)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter21 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then 
            state_tmp_ce0 <= ap_const_logic_1;
        else 
            state_tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_tmp_we0_assign_proc : process(ap_block_pp6_stage0_11001, icmp_ln173_reg_3333_pp6_iter20_reg, ap_enable_reg_pp6_iter21)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln173_reg_3333_pp6_iter20_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter21 = ap_const_logic_1))) then 
            state_tmp_we0 <= ap_const_logic_1;
        else 
            state_tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln461_1_fu_1967_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln285_5_fu_1959_p3));
    sub_ln461_2_fu_2748_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln282_2_fu_2741_p3));
    sub_ln461_fu_1462_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln285_3_fu_1454_p3));
    tmp_100_fu_1512_p3 <= (j2_0_reg_817 & ap_const_lv6_0);
    tmp_101_fu_1689_p3 <= (ap_phi_mux_k4_0_phi_fu_900_p4 & ap_const_lv6_0);
    tmp_102_fu_1586_p3 <= (k_0_reg_850 & ap_const_lv6_0);
    tmp_103_fu_2466_p4 <= p_Val2_27_fu_2444_p2(63 downto 52);
    tmp_104_fu_1992_p3 <= (j5_0_reg_918 & ap_const_lv6_0);
    tmp_109_fu_1308_p4 <= sh_amt_3_fu_1302_p2(8 downto 5);
    tmp_110_fu_1406_p3 <= reg_V_reg_2946(31 downto 31);
    tmp_112_fu_1813_p4 <= sh_amt_5_fu_1803_p2(8 downto 5);
    tmp_113_fu_1835_p3 <= reg_V_1_fu_1723_p1(31 downto 31);
    tmp_116_fu_2597_p4 <= sh_amt_7_fu_2591_p2(8 downto 3);
    tmp_117_fu_2676_p3 <= reg_V_2_reg_3513(31 downto 31);
    tmp_297_fu_2201_p4 <= bitcast_ln184_fu_2197_p1(30 downto 23);
    tmp_299_fu_2261_p4 <= bitcast_ln186_fu_2257_p1(30 downto 23);
    tmp_300_fu_2278_p4 <= bitcast_ln186_1_fu_2275_p1(30 downto 23);
    tmp_302_fu_2059_p4 <= bitcast_ln177_fu_2055_p1(30 downto 23);
    tmp_303_fu_2077_p4 <= bitcast_ln177_1_fu_2073_p1(30 downto 23);
    tmp_305_fu_2125_p4 <= bitcast_ln179_fu_2121_p1(30 downto 23);
    tmp_71_fu_1260_p3 <= (ap_const_lv1_1 & trunc_ln270_fu_1256_p1);
    tmp_77_fu_1757_p3 <= (ap_const_lv1_1 & trunc_ln270_1_fu_1753_p1);
    tmp_81_fu_2549_p3 <= (ap_const_lv1_1 & trunc_ln270_2_fu_2541_p1);
    tmp_V_10_fu_2450_p1 <= p_Val2_27_fu_2444_p2(52 - 1 downto 0);
    tmp_V_9_fu_2385_p4 <= p_Val2_23_fu_2381_p1(62 downto 52);
    tmp_hw_V_fu_1973_p3 <= 
        sub_ln461_1_fu_1967_p2 when (p_Result_35_fu_1731_p3(0) = '1') else 
        select_ln285_5_fu_1959_p3;
    tmp_min_6_fu_2248_p3 <= 
        tmp_min_fu_2244_p1 when (and_ln184_fu_2233_p2(0) = '1') else 
        tmp_min_0_reg_941;
    tmp_min_7_fu_2166_p3 <= 
        reg_1175_pp6_iter21_reg when (and_ln177_1_fu_2160_p2(0) = '1') else 
        phi_ln187_reg_929;
    tmp_min_9_fu_2189_p3 <= 
        reg_1175_pp6_iter21_reg when (and_ln179_1_fu_2183_p2(0) = '1') else 
        tmp_min_0_reg_941;
    tmp_min_fu_2244_p1 <= xor_ln185_fu_2238_p2;
    tmp_rw_V_fu_1570_p2 <= std_logic_vector(unsigned(mul_ln68_1_reg_3084) + unsigned(p_0326_0_reg_805));
    tmp_zw_V_fu_1565_p2 <= std_logic_vector(unsigned(mul_ln68_reg_3079) + unsigned(p_0174_0_reg_793));
    trunc_ln177_1_fu_2087_p1 <= bitcast_ln177_1_fu_2073_p1(23 - 1 downto 0);
    trunc_ln177_fu_2069_p1 <= bitcast_ln177_fu_2055_p1(23 - 1 downto 0);
    trunc_ln179_fu_2135_p1 <= bitcast_ln179_fu_2121_p1(23 - 1 downto 0);
    trunc_ln184_fu_2211_p1 <= bitcast_ln184_fu_2197_p1(23 - 1 downto 0);
    trunc_ln186_1_fu_2288_p1 <= bitcast_ln186_1_fu_2275_p1(23 - 1 downto 0);
    trunc_ln186_fu_2271_p1 <= bitcast_ln186_fu_2257_p1(23 - 1 downto 0);
    trunc_ln262_1_fu_1727_p1 <= reg_V_1_fu_1723_p1(31 - 1 downto 0);
    trunc_ln262_2_fu_2515_p1 <= reg_V_2_fu_2512_p1(31 - 1 downto 0);
    trunc_ln262_fu_1230_p1 <= reg_V_fu_1226_p1(31 - 1 downto 0);
    trunc_ln270_1_fu_1753_p1 <= reg_V_1_fu_1723_p1(23 - 1 downto 0);
    trunc_ln270_2_fu_2541_p1 <= reg_V_2_fu_2512_p1(23 - 1 downto 0);
    trunc_ln270_fu_1256_p1 <= reg_V_fu_1226_p1(23 - 1 downto 0);
    trunc_ln283_fu_2545_p1 <= reg_V_2_fu_2512_p1(8 - 1 downto 0);
    trunc_ln286_fu_2619_p1 <= lshr_ln286_2_fu_2613_p2(8 - 1 downto 0);
    trunc_ln368_fu_2423_p1 <= p_Val2_23_fu_2381_p1(63 - 1 downto 0);

    weights_hu_V_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp5_stage0, zext_ln215_5_reg_3234, ap_enable_reg_pp5_iter0, ap_block_pp4_stage0, zext_ln215_9_fu_2009_p1, ap_block_pp5_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            weights_hu_V_address0 <= zext_ln215_9_fu_2009_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            weights_hu_V_address0 <= zext_ln215_5_reg_3234(13 - 1 downto 0);
        else 
            weights_hu_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    weights_hu_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            weights_hu_V_ce0 <= ap_const_logic_1;
        else 
            weights_hu_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_hw_V_address0 <= zext_ln215_5_fu_1706_p1(12 - 1 downto 0);

    weights_hw_V_ce0_assign_proc : process(ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then 
            weights_hw_V_ce0 <= ap_const_logic_1;
        else 
            weights_hw_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_ru_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, zext_ln215_3_reg_3033, ap_enable_reg_pp3_iter0, ap_block_pp2_stage0, zext_ln215_7_fu_1603_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            weights_ru_V_address0 <= zext_ln215_7_fu_1603_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            weights_ru_V_address0 <= zext_ln215_3_reg_3033(13 - 1 downto 0);
        else 
            weights_ru_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    weights_ru_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            weights_ru_V_ce0 <= ap_const_logic_1;
        else 
            weights_ru_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_rw_V_address0 <= zext_ln215_3_fu_1529_p1(12 - 1 downto 0);

    weights_rw_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            weights_rw_V_ce0 <= ap_const_logic_1;
        else 
            weights_rw_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_zu_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, zext_ln215_3_reg_3033, ap_enable_reg_pp3_iter0, ap_block_pp2_stage0, zext_ln215_7_fu_1603_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            weights_zu_V_address0 <= zext_ln215_7_fu_1603_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            weights_zu_V_address0 <= zext_ln215_3_reg_3033(13 - 1 downto 0);
        else 
            weights_zu_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    weights_zu_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            weights_zu_V_ce0 <= ap_const_logic_1;
        else 
            weights_zu_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_zw_V_address0 <= zext_ln215_3_fu_1529_p1(12 - 1 downto 0);

    weights_zw_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            weights_zw_V_ce0 <= ap_const_logic_1;
        else 
            weights_zw_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_V_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp5_stage0, zext_ln120_1_reg_3028, ap_enable_reg_pp3_iter0, zext_ln152_1_reg_3229, ap_enable_reg_pp5_iter0, ap_block_pp4_stage0, zext_ln96_fu_1204_p1, ap_block_pp2_stage0, ap_block_pp3_stage0, zext_ln134_fu_1581_p1, ap_block_pp5_stage0, zext_ln161_fu_1987_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            x_V_2_address0 <= zext_ln161_fu_1987_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            x_V_2_address0 <= zext_ln152_1_reg_3229(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            x_V_2_address0 <= zext_ln134_fu_1581_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            x_V_2_address0 <= zext_ln120_1_reg_3028(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_2_address0 <= zext_ln96_fu_1204_p1(7 - 1 downto 0);
        else 
            x_V_2_address0 <= "XXXXXXX";
        end if; 
    end process;


    x_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_block_pp0_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp5_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            x_V_2_ce0 <= ap_const_logic_1;
        else 
            x_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_V_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln93_reg_2922, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln93_reg_2922 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_2_we0 <= ap_const_logic_1;
        else 
            x_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1309_fu_2454_p2 <= (mask_table2_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    xor_ln185_fu_2238_p2 <= (bitcast_ln184_fu_2197_p1 xor ap_const_lv32_80000000);
    xor_ln278_1_fu_1857_p2 <= (icmp_ln278_1_fu_1765_p2 xor ap_const_lv1_1);
    xor_ln278_2_fu_2731_p2 <= (icmp_ln278_2_reg_3529 xor ap_const_lv1_1);
    xor_ln278_fu_1330_p2 <= (icmp_ln278_fu_1268_p2 xor ap_const_lv1_1);
    xor_ln282_1_fu_1883_p2 <= (or_ln282_1_fu_1877_p2 xor ap_const_lv1_1);
    xor_ln282_2_fu_2629_p2 <= (or_ln282_2_fu_2623_p2 xor ap_const_lv1_1);
    xor_ln282_fu_1356_p2 <= (or_ln282_fu_1350_p2 xor ap_const_lv1_1);
    xor_ln284_1_fu_1919_p2 <= (or_ln284_1_fu_1913_p2 xor ap_const_lv1_1);
    xor_ln284_2_fu_2661_p2 <= (or_ln284_2_fu_2655_p2 xor ap_const_lv1_1);
    xor_ln284_fu_1388_p2 <= (or_ln284_fu_1382_p2 xor ap_const_lv1_1);
    xor_ln285_1_fu_1947_p2 <= (icmp_ln285_1_fu_1797_p2 xor ap_const_lv1_1);
    xor_ln285_2_fu_2713_p2 <= (icmp_ln285_2_reg_3540 xor ap_const_lv1_1);
    xor_ln285_fu_1444_p2 <= (icmp_ln285_reg_2966 xor ap_const_lv1_1);
    xor_ln849_fu_2495_p2 <= (icmp_ln849_reg_3472_pp7_iter8_reg xor ap_const_lv1_1);
    xs_sig_V_fu_2460_p2 <= (xor_ln1309_fu_2454_p2 and tmp_V_10_fu_2450_p1);
    zext_ln102_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_747),64));
    zext_ln118_fu_1491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_758),14));
    zext_ln120_1_fu_1507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_817),64));
    zext_ln120_fu_1487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_758),64));
    zext_ln134_fu_1581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_850),64));
    zext_ln150_fu_1662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_861),14));
    zext_ln152_1_fu_1683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k4_0_phi_fu_900_p4),64));
    zext_ln152_fu_1658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_861),64));
    zext_ln161_fu_1987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_0_reg_918),64));
    zext_ln175_fu_2050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_0_reg_953),64));
    zext_ln199_fu_2364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_0_reg_964),64));
    zext_ln209_fu_2434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_table3_q0),64));
    zext_ln215_3_fu_1529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_1524_p2),64));
    zext_ln215_4_fu_1697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_1689_p3),14));
    zext_ln215_5_fu_1706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_1701_p2),64));
    zext_ln215_6_fu_1594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_1586_p3),14));
    zext_ln215_7_fu_1603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_2_fu_1598_p2),64));
    zext_ln215_8_fu_2000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_104_fu_1992_p3),14));
    zext_ln215_9_fu_2009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_3_fu_2004_p2),64));
    zext_ln215_fu_1520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_1512_p3),14));
    zext_ln283_1_fu_1787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_1757_p3),32));
    zext_ln283_fu_1400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_reg_2956),32));
    zext_ln285_1_fu_1909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln285_4_fu_1901_p3),32));
    zext_ln285_fu_1427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln285_reg_2981),32));
    zext_ln498_fu_2417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_2407_p4),64));
    zext_ln96_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_735),64));

    zz_address0_assign_proc : process(zext_ln120_reg_3005, zext_ln175_reg_3342_pp6_iter4_reg, ap_enable_reg_pp6_iter5, ap_CS_fsm_state56, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            zz_address0 <= zext_ln175_reg_3342_pp6_iter4_reg(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            zz_address0 <= zext_ln120_reg_3005(6 - 1 downto 0);
        else 
            zz_address0 <= "XXXXXX";
        end if; 
    end process;


    zz_ce0_assign_proc : process(ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter5, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter5 = ap_const_logic_1)))) then 
            zz_ce0 <= ap_const_logic_1;
        else 
            zz_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    zz_we0_assign_proc : process(ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            zz_we0 <= ap_const_logic_1;
        else 
            zz_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
