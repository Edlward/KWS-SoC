-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dw_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_stream_V_V_empty_n : IN STD_LOGIC;
    in_stream_V_V_read : OUT STD_LOGIC;
    out_stream_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_V_V_full_n : IN STD_LOGIC;
    out_stream_V_V_write : OUT STD_LOGIC;
    dw_weights_scale : IN STD_LOGIC_VECTOR (31 downto 0);
    data2dw1_scale_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data2dw1_scale_V_empty_n : IN STD_LOGIC;
    data2dw1_scale_V_read : OUT STD_LOGIC;
    dw12pw1_scale_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    dw12pw1_scale_V_full_n : IN STD_LOGIC;
    dw12pw1_scale_V_write : OUT STD_LOGIC;
    dw_weight1_V_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    dw_weight1_V_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    dw_weight1_V_1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of dw_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_42FE0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111111100000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table2_ce0 : STD_LOGIC;
    signal mask_table2_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_table3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table3_ce0 : STD_LOGIC;
    signal one_half_table3_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal in_stream_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln37_reg_1142 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp4_iter18 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal icmp_ln75_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data2dw1_scale_V_blk_n : STD_LOGIC;
    signal dw12pw1_scale_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal w_0_reg_329 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_352 : STD_LOGIC_VECTOR (4 downto 0);
    signal kw_0_reg_363 : STD_LOGIC_VECTOR (1 downto 0);
    signal ow2_0_reg_374 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0129_0_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0137_0_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal ow3_0_reg_409 : STD_LOGIC_VECTOR (3 downto 0);
    signal ow4_0_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_state45_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state46_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state47_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state48_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state49_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_state50_pp4_stage0_iter5 : BOOLEAN;
    signal ap_block_state51_pp4_stage0_iter6 : BOOLEAN;
    signal ap_block_state52_pp4_stage0_iter7 : BOOLEAN;
    signal ap_block_state53_pp4_stage0_iter8 : BOOLEAN;
    signal ap_block_state54_pp4_stage0_iter9 : BOOLEAN;
    signal ap_block_state55_pp4_stage0_iter10 : BOOLEAN;
    signal ap_block_state56_pp4_stage0_iter11 : BOOLEAN;
    signal ap_block_state57_pp4_stage0_iter12 : BOOLEAN;
    signal ap_block_state58_pp4_stage0_iter13 : BOOLEAN;
    signal ap_block_state59_pp4_stage0_iter14 : BOOLEAN;
    signal ap_block_state60_pp4_stage0_iter15 : BOOLEAN;
    signal ap_block_state61_pp4_stage0_iter16 : BOOLEAN;
    signal ap_block_state62_pp4_stage0_iter17 : BOOLEAN;
    signal ap_block_state63_pp4_stage0_iter18 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp4_iter6 : STD_LOGIC := '0';
    signal icmp_ln75_reg_1252_pp4_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_enable_reg_pp4_iter10 : STD_LOGIC := '0';
    signal icmp_ln75_reg_1252_pp4_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_139_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln37_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w_fu_469_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_1146 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ow_fu_486_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln49_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_1177 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state7_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln49_reg_1177_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln49_fu_540_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln49_1_fu_566_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln49_1_reg_1186 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln49_2_fu_597_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln49_2_reg_1191 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln49_2_reg_1191_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y_V_addr_4_reg_1201 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_V_addr_4_reg_1201_pp2_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ow_1_fu_621_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_V_3_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_V_3_load_reg_1212 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal icmp_ln56_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1217 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state11_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ow_2_fu_639_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal select_ln59_fu_656_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal tmp_max_V_fu_670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln67_fu_706_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln67_reg_1241 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shrink_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal icmp_ln75_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal icmp_ln75_reg_1252_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1252_pp4_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ow_3_fu_720_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal y_V_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal p_Result_75_reg_1271 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_75_reg_1271_pp4_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_1277 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_1277_pp4_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln849_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_reg_1282 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_reg_1282_pp4_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_4_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_4_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_4_reg_1288_pp4_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_fu_785_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_reg_1303 : STD_LOGIC_VECTOR (62 downto 0);
    signal bitcast_ln849_fu_853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln849_reg_1308 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outprepare_tmp_reg_1318 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_fu_874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_1323 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_79_reg_1328 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln283_fu_907_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln283_reg_1333 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln278_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_1339 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_1345 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_1350 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_12_fu_953_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_12_reg_1355 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_1360 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_1009_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln285_reg_1365 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln295_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_1370 : STD_LOGIC_VECTOR (0 downto 0);
    signal outprepare_V_fu_1116_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal outprepare_V_reg_1375 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state11 : STD_LOGIC;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state45 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter17 : STD_LOGIC := '0';
    signal x_V_3_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_V_3_1_ce0 : STD_LOGIC;
    signal x_V_3_1_we0 : STD_LOGIC;
    signal y_V_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_V_2_ce0 : STD_LOGIC;
    signal y_V_2_we0 : STD_LOGIC;
    signal y_V_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_V_2_ce1 : STD_LOGIC;
    signal y_V_2_we1 : STD_LOGIC;
    signal y_V_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_w_0_phi_fu_333_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ow_0_reg_341 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln43_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_phi_mux_kw_0_phi_fu_367_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln40_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_fu_779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal grp_fu_1123_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_444_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln7_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_4_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_fu_515_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln50_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kw_fu_546_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln7_5_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_2_fu_584_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln7_3_fu_590_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln7_1_fu_527_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln49_fu_574_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln49_fu_558_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln52_fu_605_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_1_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_678_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_min_V_fu_686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_fu_692_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln895_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln475_fu_731_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_19_fu_747_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_V_fu_769_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_77_fu_800_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln209_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_41_fu_806_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_20_fu_812_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln1309_fu_816_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_118_fu_828_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_fu_822_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_76_fu_789_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_78_fu_838_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln849_fu_846_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln849_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln849_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_889_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_fu_903_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_fu_877_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_899_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_fu_925_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_137_fu_959_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_112_fu_911_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln281_fu_931_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln286_fu_975_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln286_fu_981_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln284_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_138_fu_1038_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_fu_1035_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294cast_fu_1053_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln297_fu_1057_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln295_fu_1062_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln285_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_12_fu_1080_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_1045_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln278_fu_1068_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln278_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_12_fu_1085_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln282_fu_1103_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln461_fu_1110_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_431_ce : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_440_ce : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_444_ce : STD_LOGIC;
    signal grp_fu_447_ce : STD_LOGIC;
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component kws_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fdiv_32ns_32nGfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_sitofp_32ns_3KfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fptrunc_64ns_Aem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fpext_32ns_64Bew IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kws_mac_muladd_8sLf8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dw_layer1_mask_taIfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component dw_layer1_one_halJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;


    component dw_layer1_x_V_3_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dw_layer1_y_V_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mask_table2_U : component dw_layer1_mask_taIfE
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table2_address0,
        ce0 => mask_table2_ce0,
        q0 => mask_table2_q0);

    one_half_table3_U : component dw_layer1_one_halJfO
    generic map (
        DataWidth => 53,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_table3_address0,
        ce0 => one_half_table3_ce0,
        q0 => one_half_table3_q0);

    x_V_3_1_U : component dw_layer1_x_V_3_1
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_V_3_1_address0,
        ce0 => x_V_3_1_ce0,
        we0 => x_V_3_1_we0,
        d0 => in_stream_V_V_dout,
        q0 => x_V_3_1_q0);

    y_V_2_U : component dw_layer1_y_V_2
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_V_2_address0,
        ce0 => y_V_2_ce0,
        we0 => y_V_2_we0,
        d0 => ap_const_lv32_0,
        q0 => y_V_2_q0,
        address1 => y_V_2_address1,
        ce1 => y_V_2_ce1,
        we1 => y_V_2_we1,
        d1 => grp_fu_1123_p3,
        q1 => y_V_2_q1);

    kws_fmul_32ns_32neOg_U203 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_431_p0,
        din1 => grp_fu_431_p1,
        ce => grp_fu_431_ce,
        dout => grp_fu_431_p2);

    kws_fdiv_32ns_32nGfk_U204 : component kws_fdiv_32ns_32nGfk
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_42FE0000,
        din1 => reg_450,
        ce => ap_const_logic_1,
        dout => grp_fu_435_p2);

    kws_sitofp_32ns_3KfY_U205 : component kws_sitofp_32ns_3KfY
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_440_p0,
        ce => grp_fu_440_ce,
        dout => grp_fu_440_p1);

    kws_fptrunc_64ns_Aem_U206 : component kws_fptrunc_64ns_Aem
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_444_p0,
        ce => grp_fu_444_ce,
        dout => grp_fu_444_p1);

    kws_fpext_32ns_64Bew_U207 : component kws_fpext_32ns_64Bew
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_456,
        ce => grp_fu_447_ce,
        dout => grp_fu_447_p1);

    kws_mac_muladd_8sLf8_U208 : component kws_mac_muladd_8sLf8
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => x_V_3_load_reg_1212,
        din1 => select_ln49_2_reg_1191_pp2_iter1_reg,
        din2 => y_V_2_q0,
        dout => grp_fu_1123_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((data2dw1_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((data2dw1_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state7)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state11))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state45) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((dw12pw1_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state45)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state45);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter10 <= ap_enable_reg_pp4_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter11 <= ap_enable_reg_pp4_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter12 <= ap_enable_reg_pp4_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter13 <= ap_enable_reg_pp4_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter14 <= ap_enable_reg_pp4_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter15 <= ap_enable_reg_pp4_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter16 <= ap_enable_reg_pp4_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter17 <= ap_enable_reg_pp4_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter18 <= ap_enable_reg_pp4_iter17;
                elsif (((dw12pw1_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                    ap_enable_reg_pp4_iter18 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter9 <= ap_enable_reg_pp4_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_fu_534_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_352 <= add_ln49_fu_540_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_352 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    kw_0_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_reg_1177 = ap_const_lv1_0))) then 
                kw_0_reg_363 <= select_ln49_1_reg_1186;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                kw_0_reg_363 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ow2_0_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_fu_534_p2 = ap_const_lv1_0))) then 
                ow2_0_reg_374 <= ow_1_fu_621_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ow2_0_reg_374 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ow3_0_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                ow3_0_reg_409 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln56_fu_633_p2 = ap_const_lv1_0))) then 
                ow3_0_reg_409 <= ow_2_fu_639_p2;
            end if; 
        end if;
    end process;

    ow4_0_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_fu_714_p2 = ap_const_lv1_0))) then 
                ow4_0_reg_420 <= ow_3_fu_720_p2;
            elsif (((dw12pw1_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                ow4_0_reg_420 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ow_0_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ow_0_reg_341 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln43_fu_480_p2 = ap_const_lv1_0))) then 
                ow_0_reg_341 <= ow_fu_486_p2;
            end if; 
        end if;
    end process;

    p_0129_0_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_0129_0_reg_385 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln56_reg_1217 = ap_const_lv1_0))) then 
                p_0129_0_reg_385 <= select_ln59_fu_656_p3;
            end if; 
        end if;
    end process;

    p_0137_0_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_0137_0_reg_397 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln56_reg_1217 = ap_const_lv1_0))) then 
                p_0137_0_reg_397 <= tmp_max_V_fu_670_p3;
            end if; 
        end if;
    end process;

    w_0_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_1142 = ap_const_lv1_0))) then 
                w_0_reg_329 <= w_reg_1146;
            elsif ((not(((data2dw1_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_0_reg_329 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_reg_1252_pp4_iter15_reg = ap_const_lv1_0))) then
                and_ln284_reg_1360 <= and_ln284_fu_997_p2;
                and_ln295_reg_1370 <= and_ln295_fu_1029_p2;
                icmp_ln278_reg_1339 <= icmp_ln278_fu_919_p2;
                icmp_ln282_reg_1345 <= icmp_ln282_fu_935_p2;
                icmp_ln285_reg_1350 <= icmp_ln285_fu_947_p2;
                p_Result_79_reg_1328 <= reg_V_fu_874_p1(31 downto 31);
                reg_V_reg_1323 <= reg_V_fu_874_p1;
                select_ln285_reg_1365 <= select_ln285_fu_1009_p3;
                sh_amt_12_reg_1355 <= sh_amt_12_fu_953_p2;
                trunc_ln283_reg_1333 <= trunc_ln283_fu_907_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_reg_1252_pp4_iter12_reg = ap_const_lv1_0))) then
                bitcast_ln849_reg_1308 <= bitcast_ln849_fu_853_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln37_reg_1142 <= icmp_ln37_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln49_reg_1177 <= icmp_ln49_fu_534_p2;
                icmp_ln49_reg_1177_pp2_iter1_reg <= icmp_ln49_reg_1177;
                select_ln49_2_reg_1191_pp2_iter1_reg <= select_ln49_2_reg_1191;
                y_V_addr_4_reg_1201_pp2_iter1_reg <= y_V_addr_4_reg_1201;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln56_reg_1217 <= icmp_ln56_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                icmp_ln75_reg_1252 <= icmp_ln75_fu_714_p2;
                icmp_ln75_reg_1252_pp4_iter1_reg <= icmp_ln75_reg_1252;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                icmp_ln75_reg_1252_pp4_iter10_reg <= icmp_ln75_reg_1252_pp4_iter9_reg;
                icmp_ln75_reg_1252_pp4_iter11_reg <= icmp_ln75_reg_1252_pp4_iter10_reg;
                icmp_ln75_reg_1252_pp4_iter12_reg <= icmp_ln75_reg_1252_pp4_iter11_reg;
                icmp_ln75_reg_1252_pp4_iter13_reg <= icmp_ln75_reg_1252_pp4_iter12_reg;
                icmp_ln75_reg_1252_pp4_iter14_reg <= icmp_ln75_reg_1252_pp4_iter13_reg;
                icmp_ln75_reg_1252_pp4_iter15_reg <= icmp_ln75_reg_1252_pp4_iter14_reg;
                icmp_ln75_reg_1252_pp4_iter16_reg <= icmp_ln75_reg_1252_pp4_iter15_reg;
                icmp_ln75_reg_1252_pp4_iter17_reg <= icmp_ln75_reg_1252_pp4_iter16_reg;
                icmp_ln75_reg_1252_pp4_iter2_reg <= icmp_ln75_reg_1252_pp4_iter1_reg;
                icmp_ln75_reg_1252_pp4_iter3_reg <= icmp_ln75_reg_1252_pp4_iter2_reg;
                icmp_ln75_reg_1252_pp4_iter4_reg <= icmp_ln75_reg_1252_pp4_iter3_reg;
                icmp_ln75_reg_1252_pp4_iter5_reg <= icmp_ln75_reg_1252_pp4_iter4_reg;
                icmp_ln75_reg_1252_pp4_iter6_reg <= icmp_ln75_reg_1252_pp4_iter5_reg;
                icmp_ln75_reg_1252_pp4_iter7_reg <= icmp_ln75_reg_1252_pp4_iter6_reg;
                icmp_ln75_reg_1252_pp4_iter8_reg <= icmp_ln75_reg_1252_pp4_iter7_reg;
                icmp_ln75_reg_1252_pp4_iter9_reg <= icmp_ln75_reg_1252_pp4_iter8_reg;
                icmp_ln849_4_reg_1288_pp4_iter13_reg <= icmp_ln849_4_reg_1288;
                icmp_ln849_reg_1282_pp4_iter13_reg <= icmp_ln849_reg_1282;
                p_Result_75_reg_1271_pp4_iter12_reg <= p_Result_75_reg_1271;
                x_assign_reg_1277_pp4_iter13_reg <= x_assign_reg_1277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_reg_1252_pp4_iter11_reg = ap_const_lv1_0))) then
                icmp_ln849_4_reg_1288 <= icmp_ln849_4_fu_763_p2;
                icmp_ln849_reg_1282 <= icmp_ln849_fu_757_p2;
                trunc_ln368_reg_1303 <= trunc_ln368_fu_785_p1;
                x_assign_reg_1277 <= grp_fu_447_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_reg_1252_pp4_iter16_reg = ap_const_lv1_0))) then
                outprepare_V_reg_1375 <= outprepare_V_fu_1116_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_reg_1252_pp4_iter14_reg = ap_const_lv1_0))) then
                outprepare_tmp_reg_1318 <= grp_fu_444_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_reg_1252_pp4_iter10_reg = ap_const_lv1_0))) then
                p_Result_75_reg_1271 <= bitcast_ln475_fu_731_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_enable_reg_pp4_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_reg_1252_pp4_iter5_reg = ap_const_lv1_0)))) then
                reg_450 <= grp_fu_440_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_enable_reg_pp4_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_reg_1252_pp4_iter9_reg = ap_const_lv1_0)))) then
                reg_456 <= grp_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_fu_534_p2 = ap_const_lv1_0))) then
                select_ln49_1_reg_1186 <= select_ln49_1_fu_566_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_fu_534_p2 = ap_const_lv1_0))) then
                select_ln49_2_reg_1191 <= select_ln49_2_fu_597_p3;
                y_V_addr_4_reg_1201 <= zext_ln53_fu_616_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                select_ln67_reg_1241 <= select_ln67_fu_706_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                shrink_reg_1246 <= grp_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data2dw1_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_139_reg_1137 <= data2dw1_scale_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_reg_1146 <= w_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_reg_1177 = ap_const_lv1_0))) then
                x_V_3_load_reg_1212 <= x_V_3_1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data2dw1_scale_V_empty_n, dw12pw1_scale_V_full_n, ap_enable_reg_pp4_iter18, ap_CS_fsm_state44, icmp_ln37_fu_463_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, icmp_ln49_fu_534_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, icmp_ln56_fu_633_p2, ap_enable_reg_pp3_iter0, icmp_ln75_fu_714_p2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_block_pp0_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter17, icmp_ln43_fu_480_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((data2dw1_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln37_fu_463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln37_fu_463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln43_fu_480_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln49_fu_534_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln49_fu_534_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln56_fu_633_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln56_fu_633_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((dw12pw1_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln75_fu_714_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp4_iter17 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter18 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln75_fu_714_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp4_iter17 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter18 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln49_fu_540_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_352) + unsigned(ap_const_lv5_1));
    add_ln52_fu_605_p2 <= std_logic_vector(unsigned(zext_ln49_fu_574_p1) + unsigned(select_ln49_fu_558_p3));
    and_ln282_fu_1098_p2 <= (xor_ln278_fu_1093_p2 and icmp_ln282_reg_1345);
    and_ln284_fu_997_p2 <= (xor_ln282_fu_991_p2 and icmp_ln284_fu_941_p2);
    and_ln285_12_fu_1080_p2 <= (xor_ln285_fu_1075_p2 and and_ln284_reg_1360);
    and_ln285_fu_1003_p2 <= (icmp_ln285_fu_947_p2 and and_ln284_fu_997_p2);
    and_ln295_fu_1029_p2 <= (xor_ln284_fu_1023_p2 and icmp_ln295_fu_969_p2);
    and_ln849_fu_862_p2 <= (xor_ln849_fu_857_p2 and icmp_ln849_4_reg_1288_pp4_iter13_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(40);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(11);
    ap_CS_fsm_state17 <= ap_CS_fsm(12);
    ap_CS_fsm_state18 <= ap_CS_fsm(13);
    ap_CS_fsm_state19 <= ap_CS_fsm(14);
    ap_CS_fsm_state20 <= ap_CS_fsm(15);
    ap_CS_fsm_state35 <= ap_CS_fsm(30);
    ap_CS_fsm_state36 <= ap_CS_fsm(31);
    ap_CS_fsm_state37 <= ap_CS_fsm(32);
    ap_CS_fsm_state38 <= ap_CS_fsm(33);
    ap_CS_fsm_state39 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state40 <= ap_CS_fsm(35);
    ap_CS_fsm_state41 <= ap_CS_fsm(36);
    ap_CS_fsm_state42 <= ap_CS_fsm(37);
    ap_CS_fsm_state43 <= ap_CS_fsm(38);
    ap_CS_fsm_state44 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state64 <= ap_CS_fsm(41);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln37_reg_1142)
    begin
                ap_block_pp0_stage0_11001 <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln37_reg_1142 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln37_reg_1142)
    begin
                ap_block_pp0_stage0_subdone <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln37_reg_1142 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_01001_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp4_iter18, icmp_ln75_reg_1252_pp4_iter17_reg)
    begin
                ap_block_pp4_stage0_01001 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp4_iter18 = ap_const_logic_1) and (icmp_ln75_reg_1252_pp4_iter17_reg = ap_const_lv1_0));
    end process;


    ap_block_pp4_stage0_11001_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp4_iter18, icmp_ln75_reg_1252_pp4_iter17_reg)
    begin
                ap_block_pp4_stage0_11001 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp4_iter18 = ap_const_logic_1) and (icmp_ln75_reg_1252_pp4_iter17_reg = ap_const_lv1_0));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp4_iter18, icmp_ln75_reg_1252_pp4_iter17_reg)
    begin
                ap_block_pp4_stage0_subdone <= ((out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp4_iter18 = ap_const_logic_1) and (icmp_ln75_reg_1252_pp4_iter17_reg = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, data2dw1_scale_V_empty_n)
    begin
                ap_block_state1 <= ((data2dw1_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state11_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_stream_V_V_empty_n, icmp_ln37_reg_1142)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (icmp_ln37_reg_1142 = ap_const_lv1_0));
    end process;

        ap_block_state45_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp4_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp4_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp4_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp4_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp4_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp4_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp4_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp4_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp4_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp4_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp4_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp4_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp4_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state63_pp4_stage0_iter18_assign_proc : process(out_stream_V_V_full_n, icmp_ln75_reg_1252_pp4_iter17_reg)
    begin
                ap_block_state63_pp4_stage0_iter18 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (icmp_ln75_reg_1252_pp4_iter17_reg = ap_const_lv1_0));
    end process;

        ap_block_state7_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln37_fu_463_p2)
    begin
        if ((icmp_ln37_fu_463_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state7_assign_proc : process(icmp_ln49_fu_534_p2)
    begin
        if ((icmp_ln49_fu_534_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state11_assign_proc : process(icmp_ln56_fu_633_p2)
    begin
        if ((icmp_ln56_fu_633_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state45_assign_proc : process(icmp_ln75_fu_714_p2)
    begin
        if ((icmp_ln75_fu_714_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state45 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state64) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter18, ap_enable_reg_pp4_iter6, ap_enable_reg_pp4_iter10, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter4, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter7, ap_enable_reg_pp4_iter8, ap_enable_reg_pp4_iter9, ap_enable_reg_pp4_iter11, ap_enable_reg_pp4_iter12, ap_enable_reg_pp4_iter13, ap_enable_reg_pp4_iter14, ap_enable_reg_pp4_iter15, ap_enable_reg_pp4_iter16, ap_enable_reg_pp4_iter17)
    begin
        if (((ap_enable_reg_pp4_iter17 = ap_const_logic_0) and (ap_enable_reg_pp4_iter16 = ap_const_logic_0) and (ap_enable_reg_pp4_iter15 = ap_const_logic_0) and (ap_enable_reg_pp4_iter14 = ap_const_logic_0) and (ap_enable_reg_pp4_iter13 = ap_const_logic_0) and (ap_enable_reg_pp4_iter12 = ap_const_logic_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_0) and (ap_enable_reg_pp4_iter9 = ap_const_logic_0) and (ap_enable_reg_pp4_iter8 = ap_const_logic_0) and (ap_enable_reg_pp4_iter7 = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter10 = ap_const_logic_0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_enable_reg_pp4_iter18 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_kw_0_phi_fu_367_p4_assign_proc : process(kw_0_reg_363, icmp_ln49_reg_1177, ap_CS_fsm_pp2_stage0, select_ln49_1_reg_1186, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_reg_1177 = ap_const_lv1_0))) then 
            ap_phi_mux_kw_0_phi_fu_367_p4 <= select_ln49_1_reg_1186;
        else 
            ap_phi_mux_kw_0_phi_fu_367_p4 <= kw_0_reg_363;
        end if; 
    end process;


    ap_phi_mux_w_0_phi_fu_333_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln37_reg_1142, w_0_reg_329, w_reg_1146)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_1142 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_w_0_phi_fu_333_p4 <= w_reg_1146;
        else 
            ap_phi_mux_w_0_phi_fu_333_p4 <= w_0_reg_329;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln475_fu_731_p1 <= reg_456;
    bitcast_ln849_fu_853_p1 <= select_ln849_fu_846_p3;

    data2dw1_scale_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, data2dw1_scale_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2dw1_scale_V_blk_n <= data2dw1_scale_V_empty_n;
        else 
            data2dw1_scale_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data2dw1_scale_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, data2dw1_scale_V_empty_n)
    begin
        if ((not(((data2dw1_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data2dw1_scale_V_read <= ap_const_logic_1;
        else 
            data2dw1_scale_V_read <= ap_const_logic_0;
        end if; 
    end process;


    dw12pw1_scale_V_blk_n_assign_proc : process(dw12pw1_scale_V_full_n, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            dw12pw1_scale_V_blk_n <= dw12pw1_scale_V_full_n;
        else 
            dw12pw1_scale_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dw12pw1_scale_V_din <= reg_456;

    dw12pw1_scale_V_write_assign_proc : process(dw12pw1_scale_V_full_n, ap_CS_fsm_state44)
    begin
        if (((dw12pw1_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            dw12pw1_scale_V_write <= ap_const_logic_1;
        else 
            dw12pw1_scale_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exp_V_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_889_p4),9));

    grp_fu_431_ce_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_state39, ap_CS_fsm_state43, ap_CS_fsm_pp4_stage0, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            grp_fu_431_ce <= ap_const_logic_1;
        else 
            grp_fu_431_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_431_p0_assign_proc : process(ap_block_pp4_stage0, reg_450, reg_456, shrink_reg_1246, ap_enable_reg_pp4_iter7, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if (((ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            grp_fu_431_p0 <= reg_450;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_431_p0 <= reg_456;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_431_p0 <= shrink_reg_1246;
        else 
            grp_fu_431_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_431_p1_assign_proc : process(dw_weights_scale, ap_block_pp4_stage0, tmp_139_reg_1137, shrink_reg_1246, ap_enable_reg_pp4_iter7, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if (((ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            grp_fu_431_p1 <= shrink_reg_1246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_431_p1 <= tmp_139_reg_1137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_431_p1 <= dw_weights_scale;
        else 
            grp_fu_431_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_440_ce_assign_proc : process(ap_CS_fsm_state19, ap_block_pp4_stage0_11001, ap_CS_fsm_pp4_stage0, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            grp_fu_440_ce <= ap_const_logic_1;
        else 
            grp_fu_440_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_440_p0_assign_proc : process(ap_block_pp4_stage0, select_ln67_reg_1241, ap_CS_fsm_pp4_stage0, y_V_2_q0, ap_enable_reg_pp4_iter1, ap_CS_fsm_state14)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            grp_fu_440_p0 <= y_V_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_440_p0 <= select_ln67_reg_1241;
        else 
            grp_fu_440_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_444_ce_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_pp4_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            grp_fu_444_ce <= ap_const_logic_1;
        else 
            grp_fu_444_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_444_p0 <= 
        x_assign_reg_1277_pp4_iter13_reg when (and_ln849_fu_862_p2(0) = '1') else 
        bitcast_ln849_reg_1308;

    grp_fu_447_ce_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_pp4_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            grp_fu_447_ce <= ap_const_logic_1;
        else 
            grp_fu_447_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln278_fu_919_p2 <= "1" when (trunc_ln262_fu_877_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_fu_935_p2 <= "1" when (p_Result_s_fu_889_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_fu_941_p2 <= "1" when (signed(sh_amt_fu_925_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_fu_947_p2 <= "1" when (signed(sh_amt_fu_925_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_fu_969_p2 <= "1" when (signed(tmp_137_fu_959_p4) < signed(ap_const_lv6_1)) else "0";
    icmp_ln37_fu_463_p2 <= "1" when (ap_phi_mux_w_0_phi_fu_333_p4 = ap_const_lv4_A) else "0";
    icmp_ln43_fu_480_p2 <= "1" when (ow_0_reg_341 = ap_const_lv4_8) else "0";
    icmp_ln49_fu_534_p2 <= "1" when (indvar_flatten_reg_352 = ap_const_lv5_18) else "0";
    icmp_ln50_fu_552_p2 <= "1" when (ow2_0_reg_374 = ap_const_lv4_8) else "0";
    icmp_ln56_fu_633_p2 <= "1" when (ow3_0_reg_409 = ap_const_lv4_8) else "0";
    icmp_ln75_fu_714_p2 <= "1" when (ow4_0_reg_420 = ap_const_lv4_8) else "0";
    icmp_ln7_4_fu_521_p2 <= "1" when (ap_phi_mux_kw_0_phi_fu_367_p4 = ap_const_lv2_1) else "0";
    icmp_ln7_5_fu_578_p2 <= "1" when (kw_fu_546_p2 = ap_const_lv2_0) else "0";
    icmp_ln7_fu_509_p2 <= "1" when (ap_phi_mux_kw_0_phi_fu_367_p4 = ap_const_lv2_0) else "0";
    icmp_ln849_4_fu_763_p2 <= "1" when (unsigned(tmp_V_19_fu_747_p4) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln849_fu_757_p2 <= "1" when (unsigned(tmp_V_19_fu_747_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    icmp_ln887_fu_664_p2 <= "1" when (signed(y_V_2_q1) < signed(p_0137_0_reg_397)) else "0";
    icmp_ln895_1_fu_650_p2 <= "1" when (signed(y_V_2_q1) > signed(p_0129_0_reg_385)) else "0";
    icmp_ln895_fu_700_p2 <= "1" when (signed(p_0129_0_reg_385) > signed(select_ln65_fu_692_p3)) else "0";

    in_stream_V_V_blk_n_assign_proc : process(in_stream_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln37_reg_1142)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_1142 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_stream_V_V_blk_n <= in_stream_V_V_empty_n;
        else 
            in_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln37_reg_1142, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_1142 = ap_const_lv1_0))) then 
            in_stream_V_V_read <= ap_const_logic_1;
        else 
            in_stream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    index_V_fu_769_p4 <= p_Val2_s_fu_743_p1(57 downto 52);
    kw_fu_546_p2 <= std_logic_vector(unsigned(ap_phi_mux_kw_0_phi_fu_367_p4) + unsigned(ap_const_lv2_1));
    lshr_ln286_fu_975_p2 <= std_logic_vector(shift_right(unsigned(tmp_112_fu_911_p3),to_integer(unsigned('0' & sext_ln281_fu_931_p1(24-1 downto 0)))));
    mask_table2_address0 <= zext_ln498_fu_779_p1(6 - 1 downto 0);

    mask_table2_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter12)
    begin
        if (((ap_enable_reg_pp4_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            mask_table2_ce0 <= ap_const_logic_1;
        else 
            mask_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    one_half_table3_address0 <= zext_ln498_fu_779_p1(6 - 1 downto 0);

    one_half_table3_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter12)
    begin
        if (((ap_enable_reg_pp4_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            one_half_table3_ce0 <= ap_const_logic_1;
        else 
            one_half_table3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln282_fu_985_p2 <= (icmp_ln282_fu_935_p2 or icmp_ln278_fu_919_p2);
    or_ln284_fu_1017_p2 <= (or_ln282_fu_985_p2 or icmp_ln284_fu_941_p2);

    out_stream_V_V_blk_n_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp4_iter18, ap_block_pp4_stage0, icmp_ln75_reg_1252_pp4_iter17_reg)
    begin
        if (((ap_enable_reg_pp4_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (icmp_ln75_reg_1252_pp4_iter17_reg = ap_const_lv1_0))) then 
            out_stream_V_V_blk_n <= out_stream_V_V_full_n;
        else 
            out_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_V_din <= outprepare_V_reg_1375;

    out_stream_V_V_write_assign_proc : process(ap_enable_reg_pp4_iter18, icmp_ln75_reg_1252_pp4_iter17_reg, ap_block_pp4_stage0_11001)
    begin
        if (((ap_enable_reg_pp4_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln75_reg_1252_pp4_iter17_reg = ap_const_lv1_0))) then 
            out_stream_V_V_write <= ap_const_logic_1;
        else 
            out_stream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    outprepare_V_fu_1116_p3 <= 
        sub_ln461_fu_1110_p2 when (p_Result_79_reg_1328(0) = '1') else 
        select_ln282_fu_1103_p3;
    ow_1_fu_621_p2 <= std_logic_vector(unsigned(select_ln49_fu_558_p3) + unsigned(ap_const_lv4_1));
    ow_2_fu_639_p2 <= std_logic_vector(unsigned(ow3_0_reg_409) + unsigned(ap_const_lv4_1));
    ow_3_fu_720_p2 <= std_logic_vector(unsigned(ow4_0_reg_420) + unsigned(ap_const_lv4_1));
    ow_fu_486_p2 <= std_logic_vector(unsigned(ow_0_reg_341) + unsigned(ap_const_lv4_1));
    p_Result_76_fu_789_p3 <= (p_Result_75_reg_1271_pp4_iter12_reg & ap_const_lv63_0);
    p_Result_77_fu_800_p3 <= (p_Result_75_reg_1271_pp4_iter12_reg & trunc_ln368_reg_1303);
    p_Result_78_fu_838_p3 <= (tmp_118_fu_828_p4 & xs_sig_V_fu_822_p2);
    p_Result_s_fu_889_p4 <= reg_V_fu_874_p1(30 downto 23);
    p_Val2_41_fu_806_p2 <= std_logic_vector(unsigned(p_Result_77_fu_800_p3) + unsigned(zext_ln209_fu_796_p1));
    p_Val2_s_fu_743_p1 <= grp_fu_447_p1;
    reg_V_fu_874_p1 <= outprepare_tmp_reg_1318;
    select_ln278_fu_1068_p3 <= 
        ap_const_lv8_0 when (icmp_ln278_reg_1339(0) = '1') else 
        select_ln295_fu_1062_p3;
    select_ln282_fu_1103_p3 <= 
        trunc_ln283_reg_1333 when (and_ln282_fu_1098_p2(0) = '1') else 
        select_ln285_12_fu_1085_p3;
    select_ln285_12_fu_1085_p3 <= 
        select_ln288_fu_1045_p3 when (and_ln285_12_fu_1080_p2(0) = '1') else 
        select_ln278_fu_1068_p3;
    select_ln285_fu_1009_p3 <= 
        trunc_ln286_fu_981_p1 when (and_ln285_fu_1003_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln288_fu_1045_p3 <= 
        ap_const_lv8_FF when (tmp_138_fu_1038_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln295_fu_1062_p3 <= 
        shl_ln297_fu_1057_p2 when (and_ln295_reg_1370(0) = '1') else 
        select_ln285_reg_1365;
    select_ln49_1_fu_566_p3 <= 
        kw_fu_546_p2 when (icmp_ln50_fu_552_p2(0) = '1') else 
        ap_phi_mux_kw_0_phi_fu_367_p4;
    select_ln49_2_fu_597_p3 <= 
        select_ln7_3_fu_590_p3 when (icmp_ln50_fu_552_p2(0) = '1') else 
        select_ln7_1_fu_527_p3;
    select_ln49_fu_558_p3 <= 
        ap_const_lv4_0 when (icmp_ln50_fu_552_p2(0) = '1') else 
        ow2_0_reg_374;
    select_ln59_fu_656_p3 <= 
        y_V_2_q1 when (icmp_ln895_1_fu_650_p2(0) = '1') else 
        p_0129_0_reg_385;
    select_ln65_fu_692_p3 <= 
        tmp_min_V_fu_686_p2 when (tmp_fu_678_p3(0) = '1') else 
        p_0137_0_reg_397;
    select_ln67_fu_706_p3 <= 
        p_0129_0_reg_385 when (icmp_ln895_fu_700_p2(0) = '1') else 
        select_ln65_fu_692_p3;
    select_ln7_1_fu_527_p3 <= 
        dw_weight1_V_1 when (icmp_ln7_4_fu_521_p2(0) = '1') else 
        select_ln7_fu_515_p3;
    select_ln7_2_fu_584_p3 <= 
        dw_weight1_V_0 when (icmp_ln7_5_fu_578_p2(0) = '1') else 
        dw_weight1_V_2;
    select_ln7_3_fu_590_p3 <= 
        dw_weight1_V_1 when (icmp_ln7_fu_509_p2(0) = '1') else 
        select_ln7_2_fu_584_p3;
    select_ln7_fu_515_p3 <= 
        dw_weight1_V_0 when (icmp_ln7_fu_509_p2(0) = '1') else 
        dw_weight1_V_2;
    select_ln849_fu_846_p3 <= 
        p_Result_76_fu_789_p3 when (icmp_ln849_reg_1282(0) = '1') else 
        p_Result_78_fu_838_p3;
        sext_ln281_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_925_p2),24));

        sext_ln294_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_12_reg_1355),32));

    sext_ln294cast_fu_1053_p1 <= sext_ln294_fu_1035_p1(8 - 1 downto 0);
    sh_amt_12_fu_953_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_fu_925_p2));
    sh_amt_fu_925_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_899_p1));
    shl_ln297_fu_1057_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln283_reg_1333),to_integer(unsigned('0' & sext_ln294cast_fu_1053_p1(8-1 downto 0)))));
    sub_ln461_fu_1110_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln282_fu_1103_p3));
    tmp_112_fu_911_p3 <= (ap_const_lv1_1 & trunc_ln270_fu_903_p1);
    tmp_118_fu_828_p4 <= p_Val2_41_fu_806_p2(63 downto 52);
    tmp_137_fu_959_p4 <= sh_amt_12_fu_953_p2(8 downto 3);
    tmp_138_fu_1038_p3 <= reg_V_reg_1323(31 downto 31);
    tmp_V_19_fu_747_p4 <= p_Val2_s_fu_743_p1(62 downto 52);
    tmp_V_20_fu_812_p1 <= p_Val2_41_fu_806_p2(52 - 1 downto 0);
    tmp_fu_678_p3 <= p_0137_0_reg_397(31 downto 31);
    tmp_max_V_fu_670_p3 <= 
        y_V_2_q1 when (icmp_ln887_fu_664_p2(0) = '1') else 
        p_0137_0_reg_397;
    tmp_min_V_fu_686_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_0137_0_reg_397));
    trunc_ln262_fu_877_p1 <= reg_V_fu_874_p1(31 - 1 downto 0);
    trunc_ln270_fu_903_p1 <= reg_V_fu_874_p1(23 - 1 downto 0);
    trunc_ln283_fu_907_p1 <= reg_V_fu_874_p1(8 - 1 downto 0);
    trunc_ln286_fu_981_p1 <= lshr_ln286_fu_975_p2(8 - 1 downto 0);
    trunc_ln368_fu_785_p1 <= p_Val2_s_fu_743_p1(63 - 1 downto 0);
    w_fu_469_p2 <= std_logic_vector(unsigned(ap_phi_mux_w_0_phi_fu_333_p4) + unsigned(ap_const_lv4_1));

    x_V_3_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, zext_ln40_fu_475_p1, zext_ln52_fu_611_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            x_V_3_1_address0 <= zext_ln52_fu_611_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            x_V_3_1_address0 <= zext_ln40_fu_475_p1(4 - 1 downto 0);
        else 
            x_V_3_1_address0 <= "XXXX";
        end if; 
    end process;


    x_V_3_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            x_V_3_1_ce0 <= ap_const_logic_1;
        else 
            x_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_V_3_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln37_reg_1142, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_1142 = ap_const_lv1_0))) then 
            x_V_3_1_we0 <= ap_const_logic_1;
        else 
            x_V_3_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1309_fu_816_p2 <= (mask_table2_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    xor_ln278_fu_1093_p2 <= (icmp_ln278_reg_1339 xor ap_const_lv1_1);
    xor_ln282_fu_991_p2 <= (or_ln282_fu_985_p2 xor ap_const_lv1_1);
    xor_ln284_fu_1023_p2 <= (or_ln284_fu_1017_p2 xor ap_const_lv1_1);
    xor_ln285_fu_1075_p2 <= (icmp_ln285_reg_1350 xor ap_const_lv1_1);
    xor_ln849_fu_857_p2 <= (icmp_ln849_reg_1282_pp4_iter13_reg xor ap_const_lv1_1);
    xs_sig_V_fu_822_p2 <= (xor_ln1309_fu_816_p2 and tmp_V_20_fu_812_p1);

    y_V_2_address0_assign_proc : process(ap_block_pp4_stage0, ap_CS_fsm_state5, ap_CS_fsm_pp2_stage0, y_V_addr_4_reg_1201, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp2_stage0, zext_ln45_fu_492_p1, zext_ln77_fu_726_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            y_V_2_address0 <= zext_ln77_fu_726_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            y_V_2_address0 <= y_V_addr_4_reg_1201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_V_2_address0 <= zext_ln45_fu_492_p1(3 - 1 downto 0);
        else 
            y_V_2_address0 <= "XXX";
        end if; 
    end process;


    y_V_2_address1_assign_proc : process(y_V_addr_4_reg_1201_pp2_iter1_reg, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, ap_block_pp3_stage0, zext_ln59_fu_645_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            y_V_2_address1 <= zext_ln59_fu_645_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            y_V_2_address1 <= y_V_addr_4_reg_1201_pp2_iter1_reg;
        else 
            y_V_2_address1 <= "XXX";
        end if; 
    end process;


    y_V_2_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_state5, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            y_V_2_ce0 <= ap_const_logic_1;
        else 
            y_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_V_2_ce1_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            y_V_2_ce1 <= ap_const_logic_1;
        else 
            y_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_V_2_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln43_fu_480_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln43_fu_480_p2 = ap_const_lv1_0))) then 
            y_V_2_we0 <= ap_const_logic_1;
        else 
            y_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_V_2_we1_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln49_reg_1177_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln49_reg_1177_pp2_iter1_reg = ap_const_lv1_0))) then 
            y_V_2_we1 <= ap_const_logic_1;
        else 
            y_V_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln209_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_table3_q0),64));
    zext_ln40_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_0_reg_329),64));
    zext_ln45_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ow_0_reg_341),64));
    zext_ln498_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_769_p4),64));
    zext_ln49_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln49_1_fu_566_p3),4));
    zext_ln52_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_fu_605_p2),64));
    zext_ln53_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln49_fu_558_p3),64));
    zext_ln59_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ow3_0_reg_409),64));
    zext_ln77_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ow4_0_reg_420),64));
end behav;
