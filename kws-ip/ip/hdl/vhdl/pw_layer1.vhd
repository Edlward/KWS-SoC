-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pw_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_stream_V_V_empty_n : IN STD_LOGIC;
    in_stream_V_V_read : OUT STD_LOGIC;
    out_stream_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_V_V_full_n : IN STD_LOGIC;
    out_stream_V_V_write : OUT STD_LOGIC;
    pw_weights_scale : IN STD_LOGIC_VECTOR (31 downto 0);
    dw12pw1_scale_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    dw12pw1_scale_V_empty_n : IN STD_LOGIC;
    dw12pw1_scale_V_read : OUT STD_LOGIC;
    pw12gru_scale_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    pw12gru_scale_V_full_n : IN STD_LOGIC;
    pw12gru_scale_V_write : OUT STD_LOGIC;
    tmp_scalepw : IN STD_LOGIC_VECTOR (31 downto 0);
    pw_weight1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pw_weight1_V_ce0 : OUT STD_LOGIC;
    pw_weight1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bn_bias1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bn_bias1_V_ce0 : OUT STD_LOGIC;
    bn_bias1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of pw_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (53 downto 0) := "000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (53 downto 0) := "000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (53 downto 0) := "000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (53 downto 0) := "000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (53 downto 0) := "000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (53 downto 0) := "000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (53 downto 0) := "000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (53 downto 0) := "000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (53 downto 0) := "000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (53 downto 0) := "001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (53 downto 0) := "010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (53 downto 0) := "100000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_40C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000110000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_42FE0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111111100000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table2_ce0 : STD_LOGIC;
    signal mask_table2_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_table3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table3_ce0 : STD_LOGIC;
    signal one_half_table3_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal in_stream_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln47_reg_2119 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp5_iter14 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln97_reg_2385 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2385_pp5_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dw12pw1_scale_V_blk_n : STD_LOGIC;
    signal pw12gru_scale_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal w_0_reg_470 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_482 : STD_LOGIC_VECTOR (6 downto 0);
    signal iw_0_reg_493 : STD_LOGIC_VECTOR (3 downto 0);
    signal om_0_reg_504 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten12_reg_515 : STD_LOGIC_VECTOR (6 downto 0);
    signal iw4_0_reg_526 : STD_LOGIC_VECTOR (3 downto 0);
    signal om5_0_reg_537 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten24_reg_548 : STD_LOGIC_VECTOR (6 downto 0);
    signal iw6_0_reg_559 : STD_LOGIC_VECTOR (3 downto 0);
    signal om7_0_reg_570 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten36_reg_581 : STD_LOGIC_VECTOR (6 downto 0);
    signal iw8_0_reg_592 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_min_1_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_max_1_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal om9_0_reg_627 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten48_reg_638 : STD_LOGIC_VECTOR (6 downto 0);
    signal iw10_0_reg_649 : STD_LOGIC_VECTOR (3 downto 0);
    signal om11_0_reg_660 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state79_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state80_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state81_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state82_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state83_pp5_stage0_iter4 : BOOLEAN;
    signal ap_block_state84_pp5_stage0_iter5 : BOOLEAN;
    signal ap_block_state85_pp5_stage0_iter6 : BOOLEAN;
    signal ap_block_state86_pp5_stage0_iter7 : BOOLEAN;
    signal ap_block_state87_pp5_stage0_iter8 : BOOLEAN;
    signal ap_block_state88_pp5_stage0_iter9 : BOOLEAN;
    signal ap_block_state89_pp5_stage0_iter10 : BOOLEAN;
    signal ap_block_state90_pp5_stage0_iter11 : BOOLEAN;
    signal ap_block_state91_pp5_stage0_iter12 : BOOLEAN;
    signal ap_block_state92_pp5_stage0_iter13 : BOOLEAN;
    signal ap_block_state93_pp5_stage0_iter14 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_enable_reg_pp5_iter6 : STD_LOGIC := '0';
    signal icmp_ln97_reg_2385_pp5_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_y_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_730 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_state14_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln63_reg_2154 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_2154_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state19_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state22_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state23_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state24_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state25_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state26_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state27_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter9 : BOOLEAN;
    signal ap_block_state29_pp3_stage0_iter10 : BOOLEAN;
    signal ap_block_state30_pp3_stage0_iter11 : BOOLEAN;
    signal ap_block_state31_pp3_stage0_iter12 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter13 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter14 : BOOLEAN;
    signal ap_block_state34_pp3_stage0_iter15 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter16 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal tmp_y_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal icmp_ln70_reg_2208 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_state44_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state45_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state46_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state47_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state48_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_state49_pp4_stage0_iter5 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln77_reg_2284 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_2284_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal y_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal icmp_ln97_reg_2385_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_reg_2080 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln42_fu_744_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln42_reg_2096 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln42_fu_774_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln42_reg_2101 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_1_fu_780_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln42_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_1_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w_fu_818_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_2123 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln54_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_2128 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state11_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln54_fu_835_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln58_fu_853_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln58_reg_2137 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln58_1_fu_861_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln58_1_reg_2142 : STD_LOGIC_VECTOR (3 downto 0);
    signal om_fu_869_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln63_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal icmp_ln63_reg_2154_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln63_fu_920_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln66_fu_938_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln66_reg_2163 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln66_2_fu_946_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln66_2_reg_2169 : STD_LOGIC_VECTOR (3 downto 0);
    signal om_1_fu_954_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_y_V_addr_1_reg_2187 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_y_V_addr_1_reg_2187_pp2_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal x_V_3_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_V_3_load_reg_2198 : STD_LOGIC_VECTOR (7 downto 0);
    signal pw_weight1_V_load_reg_2203 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln70_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal icmp_ln70_reg_2208_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2208_pp3_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_fu_1018_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal select_ln73_fu_1036_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln73_reg_2217 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln73_reg_2217_pp3_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln73_reg_2217_pp3_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln73_1_fu_1044_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln73_1_reg_2222 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln73_1_reg_2222_pp3_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln73_1_reg_2222_pp3_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal om_2_fu_1057_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln544_fu_1101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_reg_2244_pp3_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_686_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_2254 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_2259 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_2264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal grp_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_2269 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln89_2_fu_1106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln89_2_reg_2274 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln89_5_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_5_reg_2279 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal icmp_ln77_reg_2284_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_2284_pp4_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_2284_pp4_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln77_fu_1126_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal select_ln80_fu_1144_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln80_reg_2293 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln80_1_fu_1152_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln80_1_reg_2298 : STD_LOGIC_VECTOR (3 downto 0);
    signal om_3_fu_1160_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_addr_3_reg_2310 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_3_reg_2310_pp4_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal y_addr_3_reg_2310_pp4_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_max_fu_1298_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_max_reg_2316 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_max_reg_2316_pp4_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln81_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln81_reg_2326 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_2_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_2_reg_2332 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_3_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_3_reg_2337 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_fu_1389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_2342 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_1_fu_1395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_1_reg_2347 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_min_3_fu_1416_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal tmp_min_5_fu_1438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_2362 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_min_2_fu_1496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_min_2_reg_2367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal select_ln89_fu_1588_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln89_reg_2374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shrink_reg_2379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal icmp_ln97_fu_1595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal icmp_ln97_reg_2385_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2385_pp5_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2385_pp5_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2385_pp5_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2385_pp5_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2385_pp5_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2385_pp5_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2385_pp5_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2385_pp5_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2385_pp5_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln97_fu_1601_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal select_ln100_fu_1619_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln100_reg_2394 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln100_1_fu_1627_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln100_1_reg_2399 : STD_LOGIC_VECTOR (3 downto 0);
    signal om_4_fu_1635_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_15_reg_2416 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_reg_2416_pp5_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_2422 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_2422_pp5_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln849_fu_1705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_reg_2427 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_reg_2427_pp5_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_1_fu_1711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_1_reg_2433 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_1_reg_2433_pp5_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_fu_1733_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_reg_2448 : STD_LOGIC_VECTOR (62 downto 0);
    signal bitcast_ln849_fu_1801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln849_reg_2453 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outprepare_reg_2463 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_fu_1822_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_2468 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_19_reg_2473 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln283_fu_1855_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln283_reg_2478 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln278_fu_1867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_2484 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_fu_1883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_2490 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_fu_1895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_2495 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_1901_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_2_reg_2500 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_1945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_2505 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_1957_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln285_reg_2510 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln295_fu_1977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_2515 : STD_LOGIC_VECTOR (0 downto 0);
    signal outprepare_int_V_fu_2064_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal outprepare_int_V_reg_2520 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter16 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state44 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state79 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter13 : STD_LOGIC := '0';
    signal tmp_y_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_y_V_ce0 : STD_LOGIC;
    signal tmp_y_V_we0 : STD_LOGIC;
    signal tmp_y_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_y_V_ce1 : STD_LOGIC;
    signal tmp_y_V_we1 : STD_LOGIC;
    signal x_V_3_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_V_3_1_ce0 : STD_LOGIC;
    signal x_V_3_1_we0 : STD_LOGIC;
    signal x_V_3_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_ce0 : STD_LOGIC;
    signal y_we0 : STD_LOGIC;
    signal y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_ce1 : STD_LOGIC;
    signal y_we1 : STD_LOGIC;
    signal phi_ln42_reg_447 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln42_1_reg_459 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_w_0_phi_fu_474_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_iw_0_phi_fu_497_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_iw4_0_phi_fu_530_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_iw6_0_phi_fu_563_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_iw8_0_phi_fu_596_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_tmp_min_1_phi_fu_607_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_max_1_phi_fu_619_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_iw10_0_phi_fu_653_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln42_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln180_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_2_fu_1001_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_1_fu_988_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_fu_1052_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln80_fu_1199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln100_fu_1674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_fu_1727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0_01001 : BOOLEAN;
    signal grp_fu_2071_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_675_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_686_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_692_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_698_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_48_fu_750_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_49_fu_762_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln42_fu_758_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln42_1_fu_770_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln42_2_fu_786_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln42_2_fu_790_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln55_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iw_fu_841_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_51_fu_882_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_50_fu_875_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln180_fu_889_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln180_fu_893_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln180_33_fu_899_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln180_fu_902_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln64_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iw_1_fu_926_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_971_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_964_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_fu_978_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_1_fu_992_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln215_fu_982_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_fu_995_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln71_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iw_2_fu_1024_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_53_fu_1075_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_52_fu_1068_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln544_fu_1082_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln544_fu_1086_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln544_1_fu_1092_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln544_fu_1095_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln89_fu_1110_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln78_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iw_3_fu_1132_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_1173_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_54_fu_1166_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln80_fu_1180_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln80_1_fu_1190_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln80_fu_1184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln80_fu_1193_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln87_1_fu_1204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_1208_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln87_1_fu_1218_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln87_3_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_2_fu_1222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_1_fu_1234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1246_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln89_4_fu_1255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln89_2_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_2_fu_1266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_1_fu_1240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_3_fu_1272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln87_fu_1278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_4_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln89_1_fu_1290_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln81_fu_1306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln81_1_fu_1323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_1309_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln81_fu_1319_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln81_1_fu_1347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_fu_1341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_1327_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln81_1_fu_1337_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln83_fu_1371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_1375_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_fu_1385_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln81_1_fu_1401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_fu_1405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_1_fu_1410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_fu_1427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_1_fu_1432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln87_fu_1445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1449_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln87_fu_1459_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln87_1_fu_1469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_fu_1463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_fu_1475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln88_fu_1486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln87_fu_1481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_min_fu_1492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln89_fu_1505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln89_1_fu_1523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_1509_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln89_1_fu_1519_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln89_1_fu_1546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_fu_1540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1526_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln89_2_fu_1536_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln89_3_fu_1564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_2_fu_1558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln89_fu_1552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln89_1_fu_1570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_fu_1576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_1_fu_1582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_fu_1613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iw_4_fu_1607_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_57_fu_1648_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_56_fu_1641_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln100_fu_1655_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln100_fu_1659_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln100_1_fu_1665_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln100_fu_1668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln475_fu_1679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_1691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_4_fu_1695_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_V_fu_1717_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln209_fu_1744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_17_fu_1748_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_19_fu_1754_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_5_fu_1760_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln1309_fu_1764_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_58_fu_1776_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_fu_1770_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_16_fu_1737_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_18_fu_1786_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln849_fu_1794_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln849_fu_1805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln849_fu_1810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_1837_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_fu_1851_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_fu_1825_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_1847_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_fu_1873_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_fu_1907_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_28_fu_1859_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln281_fu_1879_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln286_fu_1923_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_fu_1933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_1889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_1939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_1951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln286_fu_1929_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln284_fu_1965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_1917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_1971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_1986_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_fu_1983_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294cast_fu_2001_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln297_fu_2005_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln295_fu_2010_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln285_fu_2023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_2_fu_2028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_1993_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln278_fu_2016_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln278_fu_2041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_2046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_2_fu_2033_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln282_fu_2051_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln461_fu_2058_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_675_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_692_ce : STD_LOGIC;
    signal grp_fu_695_ce : STD_LOGIC;
    signal grp_fu_698_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp4_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;

    component kws_fadd_32ns_32nwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fdiv_32ns_32nGfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_sitofp_32s_32OgC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_sitofp_32ns_3KfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fptrunc_64ns_Aem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fpext_32ns_64Bew IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kws_fcmp_32ns_32nHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kws_mac_muladd_8sLf8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dw_layer1_mask_taIfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component dw_layer1_one_halJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;


    component pw_layer1_tmp_y_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pw_layer1_x_V_3_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    mask_table2_U : component dw_layer1_mask_taIfE
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table2_address0,
        ce0 => mask_table2_ce0,
        q0 => mask_table2_q0);

    one_half_table3_U : component dw_layer1_one_halJfO
    generic map (
        DataWidth => 53,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_table3_address0,
        ce0 => one_half_table3_ce0,
        q0 => one_half_table3_q0);

    tmp_y_V_U : component pw_layer1_tmp_y_V
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_y_V_address0,
        ce0 => tmp_y_V_ce0,
        we0 => tmp_y_V_we0,
        d0 => ap_const_lv32_0,
        q0 => tmp_y_V_q0,
        address1 => tmp_y_V_address1,
        ce1 => tmp_y_V_ce1,
        we1 => tmp_y_V_we1,
        d1 => grp_fu_2071_p3,
        q1 => tmp_y_V_q1);

    x_V_3_1_U : component pw_layer1_x_V_3_1
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_V_3_1_address0,
        ce0 => x_V_3_1_ce0,
        we0 => x_V_3_1_we0,
        d0 => x_V_3_1_d0,
        q0 => x_V_3_1_q0);

    y_U : component pw_layer1_tmp_y_V
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_address0,
        ce0 => y_ce0,
        we0 => y_we0,
        d0 => y_d0,
        q0 => y_q0,
        address1 => y_address1,
        ce1 => y_ce1,
        we1 => y_we1,
        d1 => tmp_max_reg_2316,
        q1 => y_q1);

    kws_fadd_32ns_32nwdI_U223 : component kws_fadd_32ns_32nwdI
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_2259,
        din1 => tmp_9_reg_2264,
        ce => ap_const_logic_1,
        dout => grp_fu_671_p2);

    kws_fmul_32ns_32neOg_U224 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_675_p0,
        din1 => grp_fu_675_p1,
        ce => grp_fu_675_ce,
        dout => grp_fu_675_p2);

    kws_fdiv_32ns_32nGfk_U225 : component kws_fdiv_32ns_32nGfk
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_42FE0000,
        din1 => select_ln89_reg_2374,
        ce => ap_const_logic_1,
        dout => grp_fu_681_p2);

    kws_sitofp_32s_32OgC_U226 : component kws_sitofp_32s_32OgC
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_686_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_686_p1);

    kws_sitofp_32ns_3KfY_U227 : component kws_sitofp_32ns_3KfY
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_730,
        ce => ap_const_logic_1,
        dout => grp_fu_689_p1);

    kws_fptrunc_64ns_Aem_U228 : component kws_fptrunc_64ns_Aem
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_692_p0,
        ce => grp_fu_692_ce,
        dout => grp_fu_692_p1);

    kws_fpext_32ns_64Bew_U229 : component kws_fpext_32ns_64Bew
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_721,
        ce => grp_fu_695_ce,
        dout => grp_fu_695_p1);

    kws_fcmp_32ns_32nHfu_U230 : component kws_fcmp_32ns_32nHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_698_p0,
        din1 => grp_fu_698_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_698_opcode,
        dout => grp_fu_698_p2);

    kws_fcmp_32ns_32nHfu_U231 : component kws_fcmp_32ns_32nHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_721,
        din1 => y_q0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_704_p2);

    kws_fcmp_32ns_32nHfu_U232 : component kws_fcmp_32ns_32nHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_max_reg_2316,
        din1 => ap_phi_mux_tmp_max_1_phi_fu_619_p4,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_709_p2);

    kws_fcmp_32ns_32nHfu_U233 : component kws_fcmp_32ns_32nHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_max_reg_2316,
        din1 => ap_phi_mux_tmp_min_1_phi_fu_607_p4,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_714_p2);

    kws_mac_muladd_8sLf8_U234 : component kws_mac_muladd_8sLf8
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => x_V_3_load_reg_2198,
        din1 => pw_weight1_V_load_reg_2203,
        din2 => reg_730,
        dout => grp_fu_2071_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln42_1_fu_806_p2 = ap_const_lv1_1) and (icmp_ln42_fu_800_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln42_1_fu_806_p2 = ap_const_lv1_1) and (icmp_ln42_fu_800_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state14)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state19)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter14 <= ap_enable_reg_pp3_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter15 <= ap_enable_reg_pp3_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter16 <= ap_enable_reg_pp3_iter15;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp3_iter16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state44) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state44)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state44);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state79) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((pw12gru_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state79)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state79);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter10 <= ap_enable_reg_pp5_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter11 <= ap_enable_reg_pp5_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter12 <= ap_enable_reg_pp5_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter13 <= ap_enable_reg_pp5_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter14 <= ap_enable_reg_pp5_iter13;
                elsif (((pw12gru_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                    ap_enable_reg_pp5_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter8 <= ap_enable_reg_pp5_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter9 <= ap_enable_reg_pp5_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten12_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten12_reg_515 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln63_fu_914_p2 = ap_const_lv1_0))) then 
                indvar_flatten12_reg_515 <= add_ln63_fu_920_p2;
            end if; 
        end if;
    end process;

    indvar_flatten24_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar_flatten24_reg_548 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln70_fu_1012_p2 = ap_const_lv1_0))) then 
                indvar_flatten24_reg_548 <= add_ln70_fu_1018_p2;
            end if; 
        end if;
    end process;

    indvar_flatten36_reg_581_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln77_fu_1120_p2 = ap_const_lv1_0))) then 
                indvar_flatten36_reg_581 <= add_ln77_fu_1126_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                indvar_flatten36_reg_581 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten48_reg_638_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln97_fu_1595_p2 = ap_const_lv1_0))) then 
                indvar_flatten48_reg_638 <= add_ln97_fu_1601_p2;
            elsif (((pw12gru_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                indvar_flatten48_reg_638 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten_reg_482 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln54_fu_829_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_482 <= add_ln54_fu_835_p2;
            end if; 
        end if;
    end process;

    iw10_0_reg_649_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln97_reg_2385 = ap_const_lv1_0))) then 
                iw10_0_reg_649 <= select_ln100_1_reg_2399;
            elsif (((pw12gru_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                iw10_0_reg_649 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    iw4_0_reg_526_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                iw4_0_reg_526 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln63_reg_2154 = ap_const_lv1_0))) then 
                iw4_0_reg_526 <= select_ln66_2_reg_2169;
            end if; 
        end if;
    end process;

    iw6_0_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                iw6_0_reg_559 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln70_reg_2208 = ap_const_lv1_0))) then 
                iw6_0_reg_559 <= select_ln73_1_reg_2222;
            end if; 
        end if;
    end process;

    iw8_0_reg_592_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln77_reg_2284 = ap_const_lv1_0))) then 
                iw8_0_reg_592 <= select_ln80_1_reg_2298;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                iw8_0_reg_592 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    iw_0_reg_493_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                iw_0_reg_493 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln54_reg_2128 = ap_const_lv1_0))) then 
                iw_0_reg_493 <= select_ln58_1_reg_2142;
            end if; 
        end if;
    end process;

    om11_0_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln97_fu_1595_p2 = ap_const_lv1_0))) then 
                om11_0_reg_660 <= om_4_fu_1635_p2;
            elsif (((pw12gru_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                om11_0_reg_660 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    om5_0_reg_537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                om5_0_reg_537 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln63_fu_914_p2 = ap_const_lv1_0))) then 
                om5_0_reg_537 <= om_1_fu_954_p2;
            end if; 
        end if;
    end process;

    om7_0_reg_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                om7_0_reg_570 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln70_fu_1012_p2 = ap_const_lv1_0))) then 
                om7_0_reg_570 <= om_2_fu_1057_p2;
            end if; 
        end if;
    end process;

    om9_0_reg_627_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln77_fu_1120_p2 = ap_const_lv1_0))) then 
                om9_0_reg_627 <= om_3_fu_1160_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                om9_0_reg_627 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    om_0_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                om_0_reg_504 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln54_fu_829_p2 = ap_const_lv1_0))) then 
                om_0_reg_504 <= om_fu_869_p2;
            end if; 
        end if;
    end process;

    phi_ln42_1_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln42_fu_800_p2 = ap_const_lv1_0))) then 
                phi_ln42_1_reg_459 <= add_ln42_1_fu_780_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_ln42_1_reg_459 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_ln42_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_800_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln42_1_fu_806_p2 = ap_const_lv1_0))) then 
                phi_ln42_reg_447 <= add_ln42_reg_2096;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                phi_ln42_reg_447 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1) and (icmp_ln70_reg_2208_pp3_iter3_reg = ap_const_lv1_0))) then 
                reg_730 <= tmp_y_V_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln63_reg_2154_pp2_iter1_reg = ap_const_lv1_0))) then 
                reg_730 <= tmp_y_V_q0;
            end if; 
        end if;
    end process;

    reg_736_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (icmp_ln97_reg_2385_pp5_iter1_reg = ap_const_lv1_0))) then 
                reg_736 <= y_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln77_reg_2284_pp4_iter1_reg = ap_const_lv1_0))) then 
                reg_736 <= y_q0;
            end if; 
        end if;
    end process;

    tmp_max_1_reg_615_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1) and (icmp_ln77_reg_2284_pp4_iter4_reg = ap_const_lv1_0))) then 
                tmp_max_1_reg_615 <= tmp_min_3_fu_1416_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                tmp_max_1_reg_615 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_min_1_reg_603_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1) and (icmp_ln77_reg_2284_pp4_iter4_reg = ap_const_lv1_0))) then 
                tmp_min_1_reg_603 <= tmp_min_5_fu_1438_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                tmp_min_1_reg_603 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_0_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_1_fu_806_p2 = ap_const_lv1_1) and (icmp_ln42_fu_800_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                w_0_reg_470 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln47_reg_2119 = ap_const_lv1_0))) then 
                w_0_reg_470 <= w_reg_2123;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln42_reg_2096 <= add_ln42_fu_744_p2;
                    sub_ln42_reg_2101(7 downto 2) <= sub_ln42_fu_774_p2(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln97_reg_2385_pp5_iter11_reg = ap_const_lv1_0))) then
                and_ln284_reg_2505 <= and_ln284_fu_1945_p2;
                and_ln295_reg_2515 <= and_ln295_fu_1977_p2;
                icmp_ln278_reg_2484 <= icmp_ln278_fu_1867_p2;
                icmp_ln282_reg_2490 <= icmp_ln282_fu_1883_p2;
                icmp_ln285_reg_2495 <= icmp_ln285_fu_1895_p2;
                p_Result_19_reg_2473 <= reg_V_fu_1822_p1(31 downto 31);
                reg_V_reg_2468 <= reg_V_fu_1822_p1;
                select_ln285_reg_2510 <= select_ln285_fu_1957_p3;
                sh_amt_2_reg_2500 <= sh_amt_2_fu_1901_p2;
                trunc_ln283_reg_2478 <= trunc_ln283_fu_1855_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln97_reg_2385_pp5_iter8_reg = ap_const_lv1_0))) then
                bitcast_ln849_reg_2453 <= bitcast_ln849_fu_1801_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                bitcast_ln89_2_reg_2274 <= bitcast_ln89_2_fu_1106_p1;
                icmp_ln89_5_reg_2279 <= icmp_ln89_5_fu_1114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln47_reg_2119 <= icmp_ln47_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln54_reg_2128 <= icmp_ln54_fu_829_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln63_reg_2154 <= icmp_ln63_fu_914_p2;
                icmp_ln63_reg_2154_pp2_iter1_reg <= icmp_ln63_reg_2154;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln63_reg_2154_pp2_iter2_reg <= icmp_ln63_reg_2154_pp2_iter1_reg;
                tmp_y_V_addr_1_reg_2187_pp2_iter2_reg <= tmp_y_V_addr_1_reg_2187;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln70_reg_2208 <= icmp_ln70_fu_1012_p2;
                icmp_ln70_reg_2208_pp3_iter1_reg <= icmp_ln70_reg_2208;
                select_ln73_1_reg_2222_pp3_iter1_reg <= select_ln73_1_reg_2222;
                select_ln73_reg_2217_pp3_iter1_reg <= select_ln73_reg_2217;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln70_reg_2208_pp3_iter10_reg <= icmp_ln70_reg_2208_pp3_iter9_reg;
                icmp_ln70_reg_2208_pp3_iter11_reg <= icmp_ln70_reg_2208_pp3_iter10_reg;
                icmp_ln70_reg_2208_pp3_iter12_reg <= icmp_ln70_reg_2208_pp3_iter11_reg;
                icmp_ln70_reg_2208_pp3_iter13_reg <= icmp_ln70_reg_2208_pp3_iter12_reg;
                icmp_ln70_reg_2208_pp3_iter14_reg <= icmp_ln70_reg_2208_pp3_iter13_reg;
                icmp_ln70_reg_2208_pp3_iter15_reg <= icmp_ln70_reg_2208_pp3_iter14_reg;
                icmp_ln70_reg_2208_pp3_iter2_reg <= icmp_ln70_reg_2208_pp3_iter1_reg;
                icmp_ln70_reg_2208_pp3_iter3_reg <= icmp_ln70_reg_2208_pp3_iter2_reg;
                icmp_ln70_reg_2208_pp3_iter4_reg <= icmp_ln70_reg_2208_pp3_iter3_reg;
                icmp_ln70_reg_2208_pp3_iter5_reg <= icmp_ln70_reg_2208_pp3_iter4_reg;
                icmp_ln70_reg_2208_pp3_iter6_reg <= icmp_ln70_reg_2208_pp3_iter5_reg;
                icmp_ln70_reg_2208_pp3_iter7_reg <= icmp_ln70_reg_2208_pp3_iter6_reg;
                icmp_ln70_reg_2208_pp3_iter8_reg <= icmp_ln70_reg_2208_pp3_iter7_reg;
                icmp_ln70_reg_2208_pp3_iter9_reg <= icmp_ln70_reg_2208_pp3_iter8_reg;
                select_ln73_1_reg_2222_pp3_iter2_reg <= select_ln73_1_reg_2222_pp3_iter1_reg;
                select_ln73_reg_2217_pp3_iter2_reg <= select_ln73_reg_2217_pp3_iter1_reg;
                sext_ln544_reg_2244_pp3_iter10_reg <= sext_ln544_reg_2244_pp3_iter9_reg;
                sext_ln544_reg_2244_pp3_iter11_reg <= sext_ln544_reg_2244_pp3_iter10_reg;
                sext_ln544_reg_2244_pp3_iter12_reg <= sext_ln544_reg_2244_pp3_iter11_reg;
                sext_ln544_reg_2244_pp3_iter13_reg <= sext_ln544_reg_2244_pp3_iter12_reg;
                sext_ln544_reg_2244_pp3_iter14_reg <= sext_ln544_reg_2244_pp3_iter13_reg;
                sext_ln544_reg_2244_pp3_iter15_reg <= sext_ln544_reg_2244_pp3_iter14_reg;
                sext_ln544_reg_2244_pp3_iter4_reg <= sext_ln544_reg_2244;
                sext_ln544_reg_2244_pp3_iter5_reg <= sext_ln544_reg_2244_pp3_iter4_reg;
                sext_ln544_reg_2244_pp3_iter6_reg <= sext_ln544_reg_2244_pp3_iter5_reg;
                sext_ln544_reg_2244_pp3_iter7_reg <= sext_ln544_reg_2244_pp3_iter6_reg;
                sext_ln544_reg_2244_pp3_iter8_reg <= sext_ln544_reg_2244_pp3_iter7_reg;
                sext_ln544_reg_2244_pp3_iter9_reg <= sext_ln544_reg_2244_pp3_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln77_reg_2284 <= icmp_ln77_fu_1120_p2;
                icmp_ln77_reg_2284_pp4_iter1_reg <= icmp_ln77_reg_2284;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                icmp_ln77_reg_2284_pp4_iter2_reg <= icmp_ln77_reg_2284_pp4_iter1_reg;
                icmp_ln77_reg_2284_pp4_iter3_reg <= icmp_ln77_reg_2284_pp4_iter2_reg;
                icmp_ln77_reg_2284_pp4_iter4_reg <= icmp_ln77_reg_2284_pp4_iter3_reg;
                tmp_max_reg_2316_pp4_iter4_reg <= tmp_max_reg_2316;
                y_addr_3_reg_2310_pp4_iter2_reg <= y_addr_3_reg_2310;
                y_addr_3_reg_2310_pp4_iter3_reg <= y_addr_3_reg_2310_pp4_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln77_reg_2284_pp4_iter3_reg = ap_const_lv1_0))) then
                icmp_ln81_2_reg_2332 <= icmp_ln81_2_fu_1359_p2;
                icmp_ln81_3_reg_2337 <= icmp_ln81_3_fu_1365_p2;
                icmp_ln83_1_reg_2347 <= icmp_ln83_1_fu_1395_p2;
                icmp_ln83_reg_2342 <= icmp_ln83_fu_1389_p2;
                or_ln81_reg_2326 <= or_ln81_fu_1353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln97_reg_2385_pp5_iter7_reg = ap_const_lv1_0))) then
                icmp_ln849_1_reg_2433 <= icmp_ln849_1_fu_1711_p2;
                icmp_ln849_reg_2427 <= icmp_ln849_fu_1705_p2;
                trunc_ln368_reg_2448 <= trunc_ln368_fu_1733_p1;
                x_assign_reg_2422 <= grp_fu_695_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                icmp_ln849_1_reg_2433_pp5_iter9_reg <= icmp_ln849_1_reg_2433;
                icmp_ln849_reg_2427_pp5_iter9_reg <= icmp_ln849_reg_2427;
                icmp_ln97_reg_2385_pp5_iter10_reg <= icmp_ln97_reg_2385_pp5_iter9_reg;
                icmp_ln97_reg_2385_pp5_iter11_reg <= icmp_ln97_reg_2385_pp5_iter10_reg;
                icmp_ln97_reg_2385_pp5_iter12_reg <= icmp_ln97_reg_2385_pp5_iter11_reg;
                icmp_ln97_reg_2385_pp5_iter13_reg <= icmp_ln97_reg_2385_pp5_iter12_reg;
                icmp_ln97_reg_2385_pp5_iter2_reg <= icmp_ln97_reg_2385_pp5_iter1_reg;
                icmp_ln97_reg_2385_pp5_iter3_reg <= icmp_ln97_reg_2385_pp5_iter2_reg;
                icmp_ln97_reg_2385_pp5_iter4_reg <= icmp_ln97_reg_2385_pp5_iter3_reg;
                icmp_ln97_reg_2385_pp5_iter5_reg <= icmp_ln97_reg_2385_pp5_iter4_reg;
                icmp_ln97_reg_2385_pp5_iter6_reg <= icmp_ln97_reg_2385_pp5_iter5_reg;
                icmp_ln97_reg_2385_pp5_iter7_reg <= icmp_ln97_reg_2385_pp5_iter6_reg;
                icmp_ln97_reg_2385_pp5_iter8_reg <= icmp_ln97_reg_2385_pp5_iter7_reg;
                icmp_ln97_reg_2385_pp5_iter9_reg <= icmp_ln97_reg_2385_pp5_iter8_reg;
                p_Result_15_reg_2416_pp5_iter8_reg <= p_Result_15_reg_2416;
                x_assign_reg_2422_pp5_iter9_reg <= x_assign_reg_2422;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln97_reg_2385 <= icmp_ln97_fu_1595_p2;
                icmp_ln97_reg_2385_pp5_iter1_reg <= icmp_ln97_reg_2385;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln97_reg_2385_pp5_iter12_reg = ap_const_lv1_0))) then
                outprepare_int_V_reg_2520 <= outprepare_int_V_fu_2064_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln97_reg_2385_pp5_iter10_reg = ap_const_lv1_0))) then
                outprepare_reg_2463 <= grp_fu_692_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln97_reg_2385_pp5_iter6_reg = ap_const_lv1_0))) then
                p_Result_15_reg_2416 <= bitcast_ln475_fu_1679_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln63_reg_2154_pp2_iter1_reg = ap_const_lv1_0))) then
                pw_weight1_V_load_reg_2203 <= pw_weight1_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter6 = ap_const_logic_1) and (icmp_ln97_reg_2385_pp5_iter5_reg = ap_const_lv1_0)))) then
                reg_721 <= grp_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln97_fu_1595_p2 = ap_const_lv1_0))) then
                select_ln100_1_reg_2399 <= select_ln100_1_fu_1627_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln97_fu_1595_p2 = ap_const_lv1_0))) then
                select_ln100_reg_2394 <= select_ln100_fu_1619_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln54_fu_829_p2 = ap_const_lv1_0))) then
                select_ln58_1_reg_2142 <= select_ln58_1_fu_861_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln54_fu_829_p2 = ap_const_lv1_0))) then
                select_ln58_reg_2137 <= select_ln58_fu_853_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln63_fu_914_p2 = ap_const_lv1_0))) then
                select_ln66_2_reg_2169 <= select_ln66_2_fu_946_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln63_fu_914_p2 = ap_const_lv1_0))) then
                select_ln66_reg_2163 <= select_ln66_fu_938_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln70_fu_1012_p2 = ap_const_lv1_0))) then
                select_ln73_1_reg_2222 <= select_ln73_1_fu_1044_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln70_fu_1012_p2 = ap_const_lv1_0))) then
                select_ln73_reg_2217 <= select_ln73_fu_1036_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln77_fu_1120_p2 = ap_const_lv1_0))) then
                select_ln80_1_reg_2298 <= select_ln80_1_fu_1152_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln77_fu_1120_p2 = ap_const_lv1_0))) then
                select_ln80_reg_2293 <= select_ln80_fu_1144_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                select_ln89_reg_2374 <= select_ln89_fu_1588_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln70_reg_2208_pp3_iter2_reg = ap_const_lv1_0))) then
                sext_ln544_reg_2244 <= sext_ln544_fu_1101_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                shrink_reg_2379 <= grp_fu_681_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                tmp_16_reg_2362 <= grp_fu_698_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln70_reg_2208_pp3_iter14_reg = ap_const_lv1_0))) then
                tmp_1_reg_2269 <= grp_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dw12pw1_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_40_reg_2080 <= dw12pw1_scale_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln70_reg_2208_pp3_iter9_reg = ap_const_lv1_0))) then
                tmp_7_reg_2259 <= grp_fu_689_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln70_reg_2208_pp3_iter5_reg = ap_const_lv1_0))) then
                tmp_8_reg_2254 <= grp_fu_686_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter10 = ap_const_logic_1) and (icmp_ln70_reg_2208_pp3_iter9_reg = ap_const_lv1_0))) then
                tmp_9_reg_2264 <= grp_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln77_reg_2284_pp4_iter2_reg = ap_const_lv1_0))) then
                tmp_max_reg_2316 <= tmp_max_fu_1298_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                tmp_min_2_reg_2367 <= tmp_min_2_fu_1496_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln63_reg_2154 = ap_const_lv1_0))) then
                tmp_y_V_addr_1_reg_2187 <= zext_ln215_2_fu_1001_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_reg_2123 <= w_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln63_reg_2154_pp2_iter1_reg = ap_const_lv1_0))) then
                x_V_3_load_reg_2198 <= x_V_3_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln77_reg_2284 = ap_const_lv1_0))) then
                y_addr_3_reg_2310 <= sext_ln80_fu_1199_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    sub_ln42_reg_2101(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, dw12pw1_scale_V_empty_n, pw12gru_scale_V_full_n, ap_enable_reg_pp5_iter14, ap_CS_fsm_state78, ap_enable_reg_pp2_iter2, ap_CS_fsm_state7, icmp_ln42_fu_800_p2, icmp_ln42_1_fu_806_p2, icmp_ln47_fu_812_p2, ap_enable_reg_pp0_iter0, icmp_ln54_fu_829_p2, ap_enable_reg_pp1_iter0, icmp_ln63_fu_914_p2, ap_enable_reg_pp2_iter0, icmp_ln70_fu_1012_p2, ap_enable_reg_pp3_iter0, icmp_ln77_fu_1120_p2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter5, icmp_ln97_fu_1595_p2, ap_enable_reg_pp5_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter15, ap_enable_reg_pp3_iter16, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter4, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((dw12pw1_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln42_1_fu_806_p2 = ap_const_lv1_1) and (icmp_ln42_fu_800_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln42_fu_800_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln42_1_fu_806_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln47_fu_812_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln47_fu_812_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln54_fu_829_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln54_fu_829_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln63_fu_914_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln63_fu_914_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln70_fu_1012_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp3_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter16 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter16 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln70_fu_1012_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln77_fu_1120_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln77_fu_1120_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((pw12gru_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln97_fu_1595_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp5_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter14 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln97_fu_1595_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp5_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter14 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln100_fu_1668_p2 <= std_logic_vector(unsigned(sub_ln100_fu_1659_p2) + unsigned(zext_ln100_1_fu_1665_p1));
    add_ln180_fu_902_p2 <= std_logic_vector(unsigned(sub_ln180_fu_893_p2) + unsigned(zext_ln180_33_fu_899_p1));
    add_ln215_fu_995_p2 <= std_logic_vector(unsigned(zext_ln215_1_fu_992_p1) + unsigned(sub_ln215_fu_982_p2));
    add_ln42_1_fu_780_p2 <= std_logic_vector(unsigned(phi_ln42_1_reg_459) + unsigned(ap_const_lv4_1));
    add_ln42_2_fu_790_p2 <= std_logic_vector(unsigned(sub_ln42_reg_2101) + unsigned(zext_ln42_2_fu_786_p1));
    add_ln42_fu_744_p2 <= std_logic_vector(unsigned(phi_ln42_reg_447) + unsigned(ap_const_lv3_1));
    add_ln544_fu_1095_p2 <= std_logic_vector(unsigned(sub_ln544_fu_1086_p2) + unsigned(zext_ln544_1_fu_1092_p1));
    add_ln54_fu_835_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_482) + unsigned(ap_const_lv7_1));
    add_ln63_fu_920_p2 <= std_logic_vector(unsigned(indvar_flatten12_reg_515) + unsigned(ap_const_lv7_1));
    add_ln70_fu_1018_p2 <= std_logic_vector(unsigned(indvar_flatten24_reg_548) + unsigned(ap_const_lv7_1));
    add_ln77_fu_1126_p2 <= std_logic_vector(unsigned(indvar_flatten36_reg_581) + unsigned(ap_const_lv7_1));
    add_ln80_fu_1193_p2 <= std_logic_vector(unsigned(zext_ln80_1_fu_1190_p1) + unsigned(sub_ln80_fu_1184_p2));
    add_ln97_fu_1601_p2 <= std_logic_vector(unsigned(indvar_flatten48_reg_638) + unsigned(ap_const_lv7_1));
    and_ln282_fu_2046_p2 <= (xor_ln278_fu_2041_p2 and icmp_ln282_reg_2490);
    and_ln284_fu_1945_p2 <= (xor_ln282_fu_1939_p2 and icmp_ln284_fu_1889_p2);
    and_ln285_2_fu_2028_p2 <= (xor_ln285_fu_2023_p2 and and_ln284_reg_2505);
    and_ln285_fu_1951_p2 <= (icmp_ln285_fu_1895_p2 and and_ln284_fu_1945_p2);
    and_ln295_fu_1977_p2 <= (xor_ln284_fu_1971_p2 and icmp_ln295_fu_1917_p2);
    and_ln81_1_fu_1410_p2 <= (grp_fu_709_p2 and and_ln81_fu_1405_p2);
    and_ln81_fu_1405_p2 <= (or_ln81_reg_2326 and or_ln81_1_fu_1401_p2);
    and_ln83_1_fu_1432_p2 <= (grp_fu_714_p2 and and_ln83_fu_1427_p2);
    and_ln83_fu_1427_p2 <= (or_ln83_fu_1423_p2 and or_ln81_reg_2326);
    and_ln849_fu_1810_p2 <= (xor_ln849_fu_1805_p2 and icmp_ln849_1_reg_2433_pp5_iter9_reg);
    and_ln87_1_fu_1240_p2 <= (or_ln87_1_fu_1234_p2 and grp_fu_698_p2);
    and_ln87_fu_1481_p2 <= (tmp_16_reg_2362 and or_ln87_fu_1475_p2);
    and_ln89_1_fu_1582_p2 <= (grp_fu_698_p2 and and_ln89_fu_1576_p2);
    and_ln89_2_fu_1266_p2 <= (or_ln89_2_fu_1261_p2 and or_ln87_1_fu_1234_p2);
    and_ln89_3_fu_1272_p2 <= (grp_fu_704_p2 and and_ln89_2_fu_1266_p2);
    and_ln89_4_fu_1284_p2 <= (xor_ln87_fu_1278_p2 and and_ln89_3_fu_1272_p2);
    and_ln89_fu_1576_p2 <= (or_ln89_fu_1552_p2 and or_ln89_1_fu_1570_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(52);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state18 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(14);
    ap_CS_fsm_state37 <= ap_CS_fsm(15);
    ap_CS_fsm_state38 <= ap_CS_fsm(16);
    ap_CS_fsm_state39 <= ap_CS_fsm(17);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(18);
    ap_CS_fsm_state41 <= ap_CS_fsm(19);
    ap_CS_fsm_state42 <= ap_CS_fsm(20);
    ap_CS_fsm_state43 <= ap_CS_fsm(21);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(23);
    ap_CS_fsm_state51 <= ap_CS_fsm(24);
    ap_CS_fsm_state52 <= ap_CS_fsm(25);
    ap_CS_fsm_state53 <= ap_CS_fsm(26);
    ap_CS_fsm_state54 <= ap_CS_fsm(27);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state69 <= ap_CS_fsm(42);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(43);
    ap_CS_fsm_state71 <= ap_CS_fsm(44);
    ap_CS_fsm_state72 <= ap_CS_fsm(45);
    ap_CS_fsm_state73 <= ap_CS_fsm(46);
    ap_CS_fsm_state74 <= ap_CS_fsm(47);
    ap_CS_fsm_state75 <= ap_CS_fsm(48);
    ap_CS_fsm_state76 <= ap_CS_fsm(49);
    ap_CS_fsm_state77 <= ap_CS_fsm(50);
    ap_CS_fsm_state78 <= ap_CS_fsm(51);
    ap_CS_fsm_state94 <= ap_CS_fsm(53);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln47_reg_2119)
    begin
                ap_block_pp0_stage0_11001 <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln47_reg_2119 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln47_reg_2119)
    begin
                ap_block_pp0_stage0_subdone <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln47_reg_2119 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_01001_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp5_iter14, icmp_ln97_reg_2385_pp5_iter13_reg)
    begin
                ap_block_pp5_stage0_01001 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp5_iter14 = ap_const_logic_1) and (icmp_ln97_reg_2385_pp5_iter13_reg = ap_const_lv1_0));
    end process;


    ap_block_pp5_stage0_11001_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp5_iter14, icmp_ln97_reg_2385_pp5_iter13_reg)
    begin
                ap_block_pp5_stage0_11001 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp5_iter14 = ap_const_logic_1) and (icmp_ln97_reg_2385_pp5_iter13_reg = ap_const_lv1_0));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp5_iter14, icmp_ln97_reg_2385_pp5_iter13_reg)
    begin
                ap_block_pp5_stage0_subdone <= ((out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp5_iter14 = ap_const_logic_1) and (icmp_ln97_reg_2385_pp5_iter13_reg = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, dw12pw1_scale_V_empty_n)
    begin
                ap_block_state1 <= ((dw12pw1_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state11_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp3_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp3_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp4_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp5_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp5_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp5_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp5_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp5_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp5_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp5_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp5_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp5_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp5_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state93_pp5_stage0_iter14_assign_proc : process(out_stream_V_V_full_n, icmp_ln97_reg_2385_pp5_iter13_reg)
    begin
                ap_block_state93_pp5_stage0_iter14 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (icmp_ln97_reg_2385_pp5_iter13_reg = ap_const_lv1_0));
    end process;


    ap_block_state9_pp0_stage0_iter1_assign_proc : process(in_stream_V_V_empty_n, icmp_ln47_reg_2119)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (icmp_ln47_reg_2119 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln47_fu_812_p2)
    begin
        if ((icmp_ln47_fu_812_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state11_assign_proc : process(icmp_ln54_fu_829_p2)
    begin
        if ((icmp_ln54_fu_829_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state14_assign_proc : process(icmp_ln63_fu_914_p2)
    begin
        if ((icmp_ln63_fu_914_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state19_assign_proc : process(icmp_ln70_fu_1012_p2)
    begin
        if ((icmp_ln70_fu_1012_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state44_assign_proc : process(icmp_ln77_fu_1120_p2)
    begin
        if ((icmp_ln77_fu_1120_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state44 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state79_assign_proc : process(icmp_ln97_fu_1595_p2)
    begin
        if ((icmp_ln97_fu_1595_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state79 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state79 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12, ap_enable_reg_pp3_iter13, ap_enable_reg_pp3_iter14, ap_enable_reg_pp3_iter15, ap_enable_reg_pp3_iter16)
    begin
        if (((ap_enable_reg_pp3_iter16 = ap_const_logic_0) and (ap_enable_reg_pp3_iter15 = ap_const_logic_0) and (ap_enable_reg_pp3_iter14 = ap_const_logic_0) and (ap_enable_reg_pp3_iter13 = ap_const_logic_0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter4)
    begin
        if (((ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter14, ap_enable_reg_pp5_iter6, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter3, ap_enable_reg_pp5_iter4, ap_enable_reg_pp5_iter5, ap_enable_reg_pp5_iter7, ap_enable_reg_pp5_iter8, ap_enable_reg_pp5_iter9, ap_enable_reg_pp5_iter10, ap_enable_reg_pp5_iter11, ap_enable_reg_pp5_iter12, ap_enable_reg_pp5_iter13)
    begin
        if (((ap_enable_reg_pp5_iter13 = ap_const_logic_0) and (ap_enable_reg_pp5_iter12 = ap_const_logic_0) and (ap_enable_reg_pp5_iter11 = ap_const_logic_0) and (ap_enable_reg_pp5_iter10 = ap_const_logic_0) and (ap_enable_reg_pp5_iter9 = ap_const_logic_0) and (ap_enable_reg_pp5_iter8 = ap_const_logic_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_0) and (ap_enable_reg_pp5_iter5 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter14 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_iw10_0_phi_fu_653_p4_assign_proc : process(ap_block_pp5_stage0, icmp_ln97_reg_2385, iw10_0_reg_649, ap_CS_fsm_pp5_stage0, select_ln100_1_reg_2399, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln97_reg_2385 = ap_const_lv1_0))) then 
            ap_phi_mux_iw10_0_phi_fu_653_p4 <= select_ln100_1_reg_2399;
        else 
            ap_phi_mux_iw10_0_phi_fu_653_p4 <= iw10_0_reg_649;
        end if; 
    end process;


    ap_phi_mux_iw4_0_phi_fu_530_p4_assign_proc : process(iw4_0_reg_526, icmp_ln63_reg_2154, ap_CS_fsm_pp2_stage0, select_ln66_2_reg_2169, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln63_reg_2154 = ap_const_lv1_0))) then 
            ap_phi_mux_iw4_0_phi_fu_530_p4 <= select_ln66_2_reg_2169;
        else 
            ap_phi_mux_iw4_0_phi_fu_530_p4 <= iw4_0_reg_526;
        end if; 
    end process;


    ap_phi_mux_iw6_0_phi_fu_563_p4_assign_proc : process(iw6_0_reg_559, icmp_ln70_reg_2208, ap_CS_fsm_pp3_stage0, select_ln73_1_reg_2222, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln70_reg_2208 = ap_const_lv1_0))) then 
            ap_phi_mux_iw6_0_phi_fu_563_p4 <= select_ln73_1_reg_2222;
        else 
            ap_phi_mux_iw6_0_phi_fu_563_p4 <= iw6_0_reg_559;
        end if; 
    end process;


    ap_phi_mux_iw8_0_phi_fu_596_p4_assign_proc : process(iw8_0_reg_592, icmp_ln77_reg_2284, ap_CS_fsm_pp4_stage0, select_ln80_1_reg_2298, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln77_reg_2284 = ap_const_lv1_0))) then 
            ap_phi_mux_iw8_0_phi_fu_596_p4 <= select_ln80_1_reg_2298;
        else 
            ap_phi_mux_iw8_0_phi_fu_596_p4 <= iw8_0_reg_592;
        end if; 
    end process;


    ap_phi_mux_iw_0_phi_fu_497_p4_assign_proc : process(iw_0_reg_493, icmp_ln54_reg_2128, ap_CS_fsm_pp1_stage0, select_ln58_1_reg_2142, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln54_reg_2128 = ap_const_lv1_0))) then 
            ap_phi_mux_iw_0_phi_fu_497_p4 <= select_ln58_1_reg_2142;
        else 
            ap_phi_mux_iw_0_phi_fu_497_p4 <= iw_0_reg_493;
        end if; 
    end process;


    ap_phi_mux_tmp_max_1_phi_fu_619_p4_assign_proc : process(tmp_max_1_reg_615, icmp_ln77_reg_2284_pp4_iter4_reg, tmp_min_3_fu_1416_p3, ap_enable_reg_pp4_iter5, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1) and (icmp_ln77_reg_2284_pp4_iter4_reg = ap_const_lv1_0))) then 
            ap_phi_mux_tmp_max_1_phi_fu_619_p4 <= tmp_min_3_fu_1416_p3;
        else 
            ap_phi_mux_tmp_max_1_phi_fu_619_p4 <= tmp_max_1_reg_615;
        end if; 
    end process;


    ap_phi_mux_tmp_min_1_phi_fu_607_p4_assign_proc : process(tmp_min_1_reg_603, icmp_ln77_reg_2284_pp4_iter4_reg, ap_enable_reg_pp4_iter5, tmp_min_5_fu_1438_p3, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1) and (icmp_ln77_reg_2284_pp4_iter4_reg = ap_const_lv1_0))) then 
            ap_phi_mux_tmp_min_1_phi_fu_607_p4 <= tmp_min_5_fu_1438_p3;
        else 
            ap_phi_mux_tmp_min_1_phi_fu_607_p4 <= tmp_min_1_reg_603;
        end if; 
    end process;


    ap_phi_mux_w_0_phi_fu_474_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln47_reg_2119, w_0_reg_470, w_reg_2123)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln47_reg_2119 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_w_0_phi_fu_474_p4 <= w_reg_2123;
        else 
            ap_phi_mux_w_0_phi_fu_474_p4 <= w_0_reg_470;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln475_fu_1679_p1 <= reg_721;
    bitcast_ln81_1_fu_1323_p1 <= ap_phi_mux_tmp_max_1_phi_fu_619_p4;
    bitcast_ln81_fu_1306_p1 <= tmp_max_reg_2316;
    bitcast_ln83_fu_1371_p1 <= ap_phi_mux_tmp_min_1_phi_fu_607_p4;
    bitcast_ln849_fu_1801_p1 <= select_ln849_fu_1794_p3;
    bitcast_ln87_1_fu_1204_p1 <= reg_736;
    bitcast_ln87_fu_1445_p1 <= tmp_min_1_reg_603;
    bitcast_ln89_1_fu_1523_p1 <= tmp_min_2_reg_2367;
    bitcast_ln89_2_fu_1106_p1 <= grp_fu_675_p2;
    bitcast_ln89_fu_1505_p1 <= tmp_max_1_reg_615;
    bn_bias1_V_address0 <= zext_ln73_fu_1052_p1(4 - 1 downto 0);

    bn_bias1_V_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            bn_bias1_V_ce0 <= ap_const_logic_1;
        else 
            bn_bias1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dw12pw1_scale_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, dw12pw1_scale_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dw12pw1_scale_V_blk_n <= dw12pw1_scale_V_empty_n;
        else 
            dw12pw1_scale_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dw12pw1_scale_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, dw12pw1_scale_V_empty_n)
    begin
        if ((not(((dw12pw1_scale_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dw12pw1_scale_V_read <= ap_const_logic_1;
        else 
            dw12pw1_scale_V_read <= ap_const_logic_0;
        end if; 
    end process;

    exp_V_fu_1847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_1837_p4),9));

    grp_fu_675_ce_assign_proc : process(ap_CS_fsm_state5, ap_block_pp5_stage0_11001, ap_CS_fsm_state39, ap_CS_fsm_state43, ap_CS_fsm_state73, ap_CS_fsm_state77, ap_block_pp3_stage0_11001, ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp5_stage0, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state75, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            grp_fu_675_ce <= ap_const_logic_1;
        else 
            grp_fu_675_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_675_p0_assign_proc : process(ap_block_pp5_stage0, reg_721, reg_736, tmp_40_reg_2080, ap_CS_fsm_state2, tmp_8_reg_2254, shrink_reg_2379, ap_enable_reg_pp3_iter7, ap_enable_reg_pp5_iter3, ap_block_pp3_stage0, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state70, ap_CS_fsm_state74)
    begin
        if (((ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_fu_675_p0 <= reg_736;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_675_p0 <= shrink_reg_2379;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            grp_fu_675_p0 <= reg_721;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1))) then 
            grp_fu_675_p0 <= tmp_8_reg_2254;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_675_p0 <= tmp_40_reg_2080;
        else 
            grp_fu_675_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_675_p1_assign_proc : process(pw_weights_scale, tmp_scalepw, ap_block_pp5_stage0, reg_721, tmp_40_reg_2080, ap_CS_fsm_state2, shrink_reg_2379, ap_enable_reg_pp3_iter7, ap_enable_reg_pp5_iter3, ap_block_pp3_stage0, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state70, ap_CS_fsm_state74)
    begin
        if (((ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_fu_675_p1 <= shrink_reg_2379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_675_p1 <= tmp_40_reg_2080;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_675_p1 <= ap_const_lv32_40C00000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_675_p1 <= pw_weights_scale;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1))) then 
            grp_fu_675_p1 <= reg_721;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_675_p1 <= tmp_scalepw;
        else 
            grp_fu_675_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        grp_fu_686_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(bn_bias1_V_q0),32));


    grp_fu_692_ce_assign_proc : process(ap_block_pp5_stage0_11001, ap_CS_fsm_pp5_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            grp_fu_692_ce <= ap_const_logic_1;
        else 
            grp_fu_692_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_692_p0 <= 
        x_assign_reg_2422_pp5_iter9_reg when (and_ln849_fu_1810_p2(0) = '1') else 
        bitcast_ln849_reg_2453;

    grp_fu_695_ce_assign_proc : process(ap_block_pp5_stage0_11001, ap_CS_fsm_pp5_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            grp_fu_695_ce <= ap_const_logic_1;
        else 
            grp_fu_695_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_698_opcode_assign_proc : process(ap_enable_reg_pp4_iter2, icmp_ln77_reg_2284_pp4_iter1_reg, ap_CS_fsm_state52, ap_CS_fsm_state50, ap_block_pp4_stage0_00001)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_698_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_00001) and (icmp_ln77_reg_2284_pp4_iter1_reg = ap_const_lv1_0)))) then 
            grp_fu_698_opcode <= ap_const_lv5_4;
        else 
            grp_fu_698_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_698_p0_assign_proc : process(tmp_min_1_reg_603, tmp_max_1_reg_615, y_q0, ap_enable_reg_pp4_iter2, ap_CS_fsm_state52, ap_block_pp4_stage0, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_698_p0 <= tmp_max_1_reg_615;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_698_p0 <= tmp_min_1_reg_603;
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            grp_fu_698_p0 <= y_q0;
        else 
            grp_fu_698_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_698_p1_assign_proc : process(ap_enable_reg_pp4_iter2, tmp_min_2_fu_1496_p3, ap_CS_fsm_state52, ap_block_pp4_stage0, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_698_p1 <= tmp_min_2_fu_1496_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)))) then 
            grp_fu_698_p1 <= ap_const_lv32_0;
        else 
            grp_fu_698_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln278_fu_1867_p2 <= "1" when (trunc_ln262_fu_1825_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_fu_1883_p2 <= "1" when (p_Result_s_fu_1837_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_fu_1889_p2 <= "1" when (signed(sh_amt_fu_1873_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_fu_1895_p2 <= "1" when (signed(sh_amt_fu_1873_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_fu_1917_p2 <= "1" when (signed(tmp_38_fu_1907_p4) < signed(ap_const_lv6_1)) else "0";
    icmp_ln42_1_fu_806_p2 <= "1" when (phi_ln42_reg_447 = ap_const_lv3_7) else "0";
    icmp_ln42_fu_800_p2 <= "1" when (phi_ln42_1_reg_459 = ap_const_lv4_B) else "0";
    icmp_ln47_fu_812_p2 <= "1" when (ap_phi_mux_w_0_phi_fu_474_p4 = ap_const_lv4_8) else "0";
    icmp_ln54_fu_829_p2 <= "1" when (indvar_flatten_reg_482 = ap_const_lv7_60) else "0";
    icmp_ln55_fu_847_p2 <= "1" when (om_0_reg_504 = ap_const_lv4_C) else "0";
    icmp_ln63_fu_914_p2 <= "1" when (indvar_flatten12_reg_515 = ap_const_lv7_60) else "0";
    icmp_ln64_fu_932_p2 <= "1" when (om5_0_reg_537 = ap_const_lv4_C) else "0";
    icmp_ln70_fu_1012_p2 <= "1" when (indvar_flatten24_reg_548 = ap_const_lv7_60) else "0";
    icmp_ln71_fu_1030_p2 <= "1" when (om7_0_reg_570 = ap_const_lv4_C) else "0";
    icmp_ln77_fu_1120_p2 <= "1" when (indvar_flatten36_reg_581 = ap_const_lv7_60) else "0";
    icmp_ln78_fu_1138_p2 <= "1" when (om9_0_reg_627 = ap_const_lv4_C) else "0";
    icmp_ln81_1_fu_1347_p2 <= "1" when (trunc_ln81_fu_1319_p1 = ap_const_lv23_0) else "0";
    icmp_ln81_2_fu_1359_p2 <= "0" when (tmp_31_fu_1327_p4 = ap_const_lv8_FF) else "1";
    icmp_ln81_3_fu_1365_p2 <= "1" when (trunc_ln81_1_fu_1337_p1 = ap_const_lv23_0) else "0";
    icmp_ln81_fu_1341_p2 <= "0" when (tmp_30_fu_1309_p4 = ap_const_lv8_FF) else "1";
    icmp_ln83_1_fu_1395_p2 <= "1" when (trunc_ln83_fu_1385_p1 = ap_const_lv23_0) else "0";
    icmp_ln83_fu_1389_p2 <= "0" when (tmp_33_fu_1375_p4 = ap_const_lv8_FF) else "1";
    icmp_ln849_1_fu_1711_p2 <= "1" when (unsigned(tmp_V_4_fu_1695_p4) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln849_fu_1705_p2 <= "1" when (unsigned(tmp_V_4_fu_1695_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    icmp_ln87_1_fu_1469_p2 <= "1" when (trunc_ln87_fu_1459_p1 = ap_const_lv23_0) else "0";
    icmp_ln87_2_fu_1222_p2 <= "0" when (tmp_24_fu_1208_p4 = ap_const_lv8_FF) else "1";
    icmp_ln87_3_fu_1228_p2 <= "1" when (trunc_ln87_1_fu_1218_p1 = ap_const_lv23_0) else "0";
    icmp_ln87_fu_1463_p2 <= "0" when (tmp_15_fu_1449_p4 = ap_const_lv8_FF) else "1";
    icmp_ln89_1_fu_1546_p2 <= "1" when (trunc_ln89_1_fu_1519_p1 = ap_const_lv23_0) else "0";
    icmp_ln89_2_fu_1558_p2 <= "0" when (tmp_21_fu_1526_p4 = ap_const_lv8_FF) else "1";
    icmp_ln89_3_fu_1564_p2 <= "1" when (trunc_ln89_2_fu_1536_p1 = ap_const_lv23_0) else "0";
    icmp_ln89_4_fu_1255_p2 <= "0" when (tmp_26_fu_1246_p4 = ap_const_lv8_FF) else "1";
    icmp_ln89_5_fu_1114_p2 <= "1" when (trunc_ln89_fu_1110_p1 = ap_const_lv23_0) else "0";
    icmp_ln89_fu_1540_p2 <= "0" when (tmp_20_fu_1509_p4 = ap_const_lv8_FF) else "1";
    icmp_ln97_fu_1595_p2 <= "1" when (indvar_flatten48_reg_638 = ap_const_lv7_60) else "0";
    icmp_ln98_fu_1613_p2 <= "1" when (om11_0_reg_660 = ap_const_lv4_C) else "0";

    in_stream_V_V_blk_n_assign_proc : process(in_stream_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln47_reg_2119)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln47_reg_2119 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_stream_V_V_blk_n <= in_stream_V_V_empty_n;
        else 
            in_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln47_reg_2119, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln47_reg_2119 = ap_const_lv1_0))) then 
            in_stream_V_V_read <= ap_const_logic_1;
        else 
            in_stream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    index_V_fu_1717_p4 <= p_Val2_s_fu_1691_p1(57 downto 52);
    iw_1_fu_926_p2 <= std_logic_vector(unsigned(ap_phi_mux_iw4_0_phi_fu_530_p4) + unsigned(ap_const_lv4_1));
    iw_2_fu_1024_p2 <= std_logic_vector(unsigned(ap_phi_mux_iw6_0_phi_fu_563_p4) + unsigned(ap_const_lv4_1));
    iw_3_fu_1132_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_iw8_0_phi_fu_596_p4));
    iw_4_fu_1607_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_iw10_0_phi_fu_653_p4));
    iw_fu_841_p2 <= std_logic_vector(unsigned(ap_phi_mux_iw_0_phi_fu_497_p4) + unsigned(ap_const_lv4_1));
    lshr_ln286_fu_1923_p2 <= std_logic_vector(shift_right(unsigned(tmp_28_fu_1859_p3),to_integer(unsigned('0' & sext_ln281_fu_1879_p1(24-1 downto 0)))));
    mask_table2_address0 <= zext_ln498_fu_1727_p1(6 - 1 downto 0);

    mask_table2_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter8 = ap_const_logic_1))) then 
            mask_table2_ce0 <= ap_const_logic_1;
        else 
            mask_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    om_1_fu_954_p2 <= std_logic_vector(unsigned(select_ln66_fu_938_p3) + unsigned(ap_const_lv4_1));
    om_2_fu_1057_p2 <= std_logic_vector(unsigned(select_ln73_fu_1036_p3) + unsigned(ap_const_lv4_1));
    om_3_fu_1160_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln80_fu_1144_p3));
    om_4_fu_1635_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln100_fu_1619_p3));
    om_fu_869_p2 <= std_logic_vector(unsigned(select_ln58_fu_853_p3) + unsigned(ap_const_lv4_1));
    one_half_table3_address0 <= zext_ln498_fu_1727_p1(6 - 1 downto 0);

    one_half_table3_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter8 = ap_const_logic_1))) then 
            one_half_table3_ce0 <= ap_const_logic_1;
        else 
            one_half_table3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln282_fu_1933_p2 <= (icmp_ln282_fu_1883_p2 or icmp_ln278_fu_1867_p2);
    or_ln284_fu_1965_p2 <= (or_ln282_fu_1933_p2 or icmp_ln284_fu_1889_p2);
    or_ln81_1_fu_1401_p2 <= (icmp_ln81_3_reg_2337 or icmp_ln81_2_reg_2332);
    or_ln81_fu_1353_p2 <= (icmp_ln81_fu_1341_p2 or icmp_ln81_1_fu_1347_p2);
    or_ln83_fu_1423_p2 <= (icmp_ln83_reg_2342 or icmp_ln83_1_reg_2347);
    or_ln87_1_fu_1234_p2 <= (icmp_ln87_3_fu_1228_p2 or icmp_ln87_2_fu_1222_p2);
    or_ln87_fu_1475_p2 <= (icmp_ln87_fu_1463_p2 or icmp_ln87_1_fu_1469_p2);
    or_ln89_1_fu_1570_p2 <= (icmp_ln89_3_fu_1564_p2 or icmp_ln89_2_fu_1558_p2);
    or_ln89_2_fu_1261_p2 <= (icmp_ln89_5_reg_2279 or icmp_ln89_4_fu_1255_p2);
    or_ln89_fu_1552_p2 <= (icmp_ln89_fu_1540_p2 or icmp_ln89_1_fu_1546_p2);

    out_stream_V_V_blk_n_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp5_iter14, ap_block_pp5_stage0, icmp_ln97_reg_2385_pp5_iter13_reg)
    begin
        if (((ap_enable_reg_pp5_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln97_reg_2385_pp5_iter13_reg = ap_const_lv1_0))) then 
            out_stream_V_V_blk_n <= out_stream_V_V_full_n;
        else 
            out_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_V_din <= outprepare_int_V_reg_2520;

    out_stream_V_V_write_assign_proc : process(ap_enable_reg_pp5_iter14, icmp_ln97_reg_2385_pp5_iter13_reg, ap_block_pp5_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter14 = ap_const_logic_1) and (icmp_ln97_reg_2385_pp5_iter13_reg = ap_const_lv1_0))) then 
            out_stream_V_V_write <= ap_const_logic_1;
        else 
            out_stream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    outprepare_int_V_fu_2064_p3 <= 
        sub_ln461_fu_2058_p2 when (p_Result_19_reg_2473(0) = '1') else 
        select_ln282_fu_2051_p3;
    p_Result_16_fu_1737_p3 <= (p_Result_15_reg_2416_pp5_iter8_reg & ap_const_lv63_0);
    p_Result_17_fu_1748_p3 <= (p_Result_15_reg_2416_pp5_iter8_reg & trunc_ln368_reg_2448);
    p_Result_18_fu_1786_p3 <= (tmp_58_fu_1776_p4 & xs_sig_V_fu_1770_p2);
    p_Result_s_fu_1837_p4 <= reg_V_fu_1822_p1(30 downto 23);
    p_Val2_19_fu_1754_p2 <= std_logic_vector(unsigned(zext_ln209_fu_1744_p1) + unsigned(p_Result_17_fu_1748_p3));
    p_Val2_s_fu_1691_p1 <= grp_fu_695_p1;
    p_shl_cast_fu_964_p3 <= (select_ln66_2_reg_2169 & ap_const_lv4_0);

    pw12gru_scale_V_blk_n_assign_proc : process(pw12gru_scale_V_full_n, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            pw12gru_scale_V_blk_n <= pw12gru_scale_V_full_n;
        else 
            pw12gru_scale_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pw12gru_scale_V_din <= reg_721;

    pw12gru_scale_V_write_assign_proc : process(pw12gru_scale_V_full_n, ap_CS_fsm_state78)
    begin
        if (((pw12gru_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            pw12gru_scale_V_write <= ap_const_logic_1;
        else 
            pw12gru_scale_V_write <= ap_const_logic_0;
        end if; 
    end process;

    pw_weight1_V_address0 <= zext_ln66_1_fu_988_p1(4 - 1 downto 0);

    pw_weight1_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            pw_weight1_V_ce0 <= ap_const_logic_1;
        else 
            pw_weight1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    reg_V_fu_1822_p1 <= outprepare_reg_2463;
    select_ln100_1_fu_1627_p3 <= 
        iw_4_fu_1607_p2 when (icmp_ln98_fu_1613_p2(0) = '1') else 
        ap_phi_mux_iw10_0_phi_fu_653_p4;
    select_ln100_fu_1619_p3 <= 
        ap_const_lv4_0 when (icmp_ln98_fu_1613_p2(0) = '1') else 
        om11_0_reg_660;
    select_ln278_fu_2016_p3 <= 
        ap_const_lv8_0 when (icmp_ln278_reg_2484(0) = '1') else 
        select_ln295_fu_2010_p3;
    select_ln282_fu_2051_p3 <= 
        trunc_ln283_reg_2478 when (and_ln282_fu_2046_p2(0) = '1') else 
        select_ln285_2_fu_2033_p3;
    select_ln285_2_fu_2033_p3 <= 
        select_ln288_fu_1993_p3 when (and_ln285_2_fu_2028_p2(0) = '1') else 
        select_ln278_fu_2016_p3;
    select_ln285_fu_1957_p3 <= 
        trunc_ln286_fu_1929_p1 when (and_ln285_fu_1951_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln288_fu_1993_p3 <= 
        ap_const_lv8_FF when (tmp_39_fu_1986_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln295_fu_2010_p3 <= 
        shl_ln297_fu_2005_p2 when (and_ln295_reg_2515(0) = '1') else 
        select_ln285_reg_2510;
    select_ln58_1_fu_861_p3 <= 
        iw_fu_841_p2 when (icmp_ln55_fu_847_p2(0) = '1') else 
        ap_phi_mux_iw_0_phi_fu_497_p4;
    select_ln58_fu_853_p3 <= 
        ap_const_lv4_0 when (icmp_ln55_fu_847_p2(0) = '1') else 
        om_0_reg_504;
    select_ln66_2_fu_946_p3 <= 
        iw_1_fu_926_p2 when (icmp_ln64_fu_932_p2(0) = '1') else 
        ap_phi_mux_iw4_0_phi_fu_530_p4;
    select_ln66_fu_938_p3 <= 
        ap_const_lv4_0 when (icmp_ln64_fu_932_p2(0) = '1') else 
        om5_0_reg_537;
    select_ln73_1_fu_1044_p3 <= 
        iw_2_fu_1024_p2 when (icmp_ln71_fu_1030_p2(0) = '1') else 
        ap_phi_mux_iw6_0_phi_fu_563_p4;
    select_ln73_fu_1036_p3 <= 
        ap_const_lv4_0 when (icmp_ln71_fu_1030_p2(0) = '1') else 
        om7_0_reg_570;
    select_ln80_1_fu_1152_p3 <= 
        iw_3_fu_1132_p2 when (icmp_ln78_fu_1138_p2(0) = '1') else 
        ap_phi_mux_iw8_0_phi_fu_596_p4;
    select_ln80_fu_1144_p3 <= 
        ap_const_lv4_0 when (icmp_ln78_fu_1138_p2(0) = '1') else 
        om9_0_reg_627;
    select_ln849_fu_1794_p3 <= 
        p_Result_16_fu_1737_p3 when (icmp_ln849_reg_2427(0) = '1') else 
        p_Result_18_fu_1786_p3;
    select_ln89_1_fu_1290_p3 <= 
        reg_721 when (and_ln89_4_fu_1284_p2(0) = '1') else 
        reg_736;
    select_ln89_fu_1588_p3 <= 
        tmp_max_1_reg_615 when (and_ln89_1_fu_1582_p2(0) = '1') else 
        tmp_min_2_reg_2367;
        sext_ln100_fu_1674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln100_fu_1668_p2),64));

        sext_ln180_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln180_fu_902_p2),64));

        sext_ln281_fu_1879_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_1873_p2),24));

        sext_ln294_fu_1983_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_2500),32));

    sext_ln294cast_fu_2001_p1 <= sext_ln294_fu_1983_p1(8 - 1 downto 0);
        sext_ln42_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln42_2_fu_790_p2),64));

        sext_ln544_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln544_fu_1095_p2),64));

        sext_ln80_fu_1199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln80_fu_1193_p2),64));

    sh_amt_2_fu_1901_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_fu_1873_p2));
    sh_amt_fu_1873_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_1847_p1));
    shl_ln297_fu_2005_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln283_reg_2478),to_integer(unsigned('0' & sext_ln294cast_fu_2001_p1(8-1 downto 0)))));
    sub_ln100_fu_1659_p2 <= std_logic_vector(unsigned(tmp_56_fu_1641_p3) - unsigned(zext_ln100_fu_1655_p1));
    sub_ln180_fu_893_p2 <= std_logic_vector(unsigned(tmp_50_fu_875_p3) - unsigned(zext_ln180_fu_889_p1));
    sub_ln215_fu_982_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_964_p3) - unsigned(zext_ln215_fu_978_p1));
    sub_ln42_fu_774_p2 <= std_logic_vector(unsigned(zext_ln42_fu_758_p1) - unsigned(zext_ln42_1_fu_770_p1));
    sub_ln461_fu_2058_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln282_fu_2051_p3));
    sub_ln544_fu_1086_p2 <= std_logic_vector(unsigned(tmp_52_fu_1068_p3) - unsigned(zext_ln544_fu_1082_p1));
    sub_ln80_fu_1184_p2 <= std_logic_vector(unsigned(tmp_54_fu_1166_p3) - unsigned(zext_ln80_fu_1180_p1));
    tmp_15_fu_1449_p4 <= bitcast_ln87_fu_1445_p1(30 downto 23);
    tmp_20_fu_1509_p4 <= bitcast_ln89_fu_1505_p1(30 downto 23);
    tmp_21_fu_1526_p4 <= bitcast_ln89_1_fu_1523_p1(30 downto 23);
    tmp_24_fu_1208_p4 <= bitcast_ln87_1_fu_1204_p1(30 downto 23);
    tmp_26_fu_1246_p4 <= bitcast_ln89_2_reg_2274(30 downto 23);
    tmp_28_fu_1859_p3 <= (ap_const_lv1_1 & trunc_ln270_fu_1851_p1);
    tmp_30_fu_1309_p4 <= bitcast_ln81_fu_1306_p1(30 downto 23);
    tmp_31_fu_1327_p4 <= bitcast_ln81_1_fu_1323_p1(30 downto 23);
    tmp_33_fu_1375_p4 <= bitcast_ln83_fu_1371_p1(30 downto 23);
    tmp_38_fu_1907_p4 <= sh_amt_2_fu_1901_p2(8 downto 3);
    tmp_39_fu_1986_p3 <= reg_V_reg_2468(31 downto 31);
    tmp_48_fu_750_p3 <= (phi_ln42_reg_447 & ap_const_lv4_0);
    tmp_49_fu_762_p3 <= (phi_ln42_reg_447 & ap_const_lv2_0);
    tmp_50_fu_875_p3 <= (select_ln58_1_reg_2142 & ap_const_lv4_0);
    tmp_51_fu_882_p3 <= (select_ln58_1_reg_2142 & ap_const_lv2_0);
    tmp_52_fu_1068_p3 <= (select_ln73_1_reg_2222_pp3_iter2_reg & ap_const_lv4_0);
    tmp_53_fu_1075_p3 <= (select_ln73_1_reg_2222_pp3_iter2_reg & ap_const_lv2_0);
    tmp_54_fu_1166_p3 <= (select_ln80_1_reg_2298 & ap_const_lv4_0);
    tmp_55_fu_1173_p3 <= (select_ln80_1_reg_2298 & ap_const_lv2_0);
    tmp_56_fu_1641_p3 <= (select_ln100_1_reg_2399 & ap_const_lv4_0);
    tmp_57_fu_1648_p3 <= (select_ln100_1_reg_2399 & ap_const_lv2_0);
    tmp_58_fu_1776_p4 <= p_Val2_19_fu_1754_p2(63 downto 52);
    tmp_V_4_fu_1695_p4 <= p_Val2_s_fu_1691_p1(62 downto 52);
    tmp_V_5_fu_1760_p1 <= p_Val2_19_fu_1754_p2(52 - 1 downto 0);
    tmp_fu_971_p3 <= (select_ln66_2_reg_2169 & ap_const_lv2_0);
    tmp_max_fu_1298_p3 <= 
        ap_const_lv32_0 when (and_ln87_1_fu_1240_p2(0) = '1') else 
        select_ln89_1_fu_1290_p3;
    tmp_min_2_fu_1496_p3 <= 
        tmp_min_fu_1492_p1 when (and_ln87_fu_1481_p2(0) = '1') else 
        tmp_min_1_reg_603;
    tmp_min_3_fu_1416_p3 <= 
        tmp_max_reg_2316_pp4_iter4_reg when (and_ln81_1_fu_1410_p2(0) = '1') else 
        tmp_max_1_reg_615;
    tmp_min_5_fu_1438_p3 <= 
        tmp_max_reg_2316_pp4_iter4_reg when (and_ln83_1_fu_1432_p2(0) = '1') else 
        tmp_min_1_reg_603;
    tmp_min_fu_1492_p1 <= xor_ln88_fu_1486_p2;

    tmp_y_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp1_stage0, ap_block_pp2_stage0, sext_ln180_fu_908_p1, zext_ln215_2_fu_1001_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            tmp_y_V_address0 <= zext_ln215_2_fu_1001_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tmp_y_V_address0 <= sext_ln180_fu_908_p1(7 - 1 downto 0);
        else 
            tmp_y_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    tmp_y_V_address1_assign_proc : process(tmp_y_V_addr_1_reg_2187_pp2_iter2_reg, sext_ln544_fu_1101_p1, ap_enable_reg_pp2_iter3, ap_enable_reg_pp3_iter3, ap_block_pp2_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            tmp_y_V_address1 <= sext_ln544_fu_1101_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            tmp_y_V_address1 <= tmp_y_V_addr_1_reg_2187_pp2_iter2_reg;
        else 
            tmp_y_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    tmp_y_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            tmp_y_V_ce0 <= ap_const_logic_1;
        else 
            tmp_y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_y_V_ce1_assign_proc : process(ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp2_iter3, ap_enable_reg_pp3_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)))) then 
            tmp_y_V_ce1 <= ap_const_logic_1;
        else 
            tmp_y_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_y_V_we0_assign_proc : process(icmp_ln54_reg_2128, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln54_reg_2128 = ap_const_lv1_0))) then 
            tmp_y_V_we0 <= ap_const_logic_1;
        else 
            tmp_y_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_y_V_we1_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln63_reg_2154_pp2_iter2_reg, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln63_reg_2154_pp2_iter2_reg = ap_const_lv1_0))) then 
            tmp_y_V_we1 <= ap_const_logic_1;
        else 
            tmp_y_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln262_fu_1825_p1 <= reg_V_fu_1822_p1(31 - 1 downto 0);
    trunc_ln270_fu_1851_p1 <= reg_V_fu_1822_p1(23 - 1 downto 0);
    trunc_ln283_fu_1855_p1 <= reg_V_fu_1822_p1(8 - 1 downto 0);
    trunc_ln286_fu_1929_p1 <= lshr_ln286_fu_1923_p2(8 - 1 downto 0);
    trunc_ln368_fu_1733_p1 <= p_Val2_s_fu_1691_p1(63 - 1 downto 0);
    trunc_ln81_1_fu_1337_p1 <= bitcast_ln81_1_fu_1323_p1(23 - 1 downto 0);
    trunc_ln81_fu_1319_p1 <= bitcast_ln81_fu_1306_p1(23 - 1 downto 0);
    trunc_ln83_fu_1385_p1 <= bitcast_ln83_fu_1371_p1(23 - 1 downto 0);
    trunc_ln87_1_fu_1218_p1 <= bitcast_ln87_1_fu_1204_p1(23 - 1 downto 0);
    trunc_ln87_fu_1459_p1 <= bitcast_ln87_fu_1445_p1(23 - 1 downto 0);
    trunc_ln89_1_fu_1519_p1 <= bitcast_ln89_fu_1505_p1(23 - 1 downto 0);
    trunc_ln89_2_fu_1536_p1 <= bitcast_ln89_1_fu_1523_p1(23 - 1 downto 0);
    trunc_ln89_fu_1110_p1 <= bitcast_ln89_2_fu_1106_p1(23 - 1 downto 0);
    w_fu_818_p2 <= std_logic_vector(unsigned(ap_phi_mux_w_0_phi_fu_474_p4) + unsigned(ap_const_lv4_1));

    x_V_3_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state5, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, zext_ln51_fu_824_p1, zext_ln66_fu_960_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            x_V_3_1_address0 <= zext_ln66_fu_960_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            x_V_3_1_address0 <= zext_ln51_fu_824_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_V_3_1_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            x_V_3_1_address0 <= "XXX";
        end if; 
    end process;


    x_V_3_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state5, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            x_V_3_1_ce0 <= ap_const_logic_1;
        else 
            x_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_V_3_1_d0_assign_proc : process(in_stream_V_V_dout, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state5)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            x_V_3_1_d0 <= in_stream_V_V_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_V_3_1_d0 <= ap_const_lv8_0;
        else 
            x_V_3_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    x_V_3_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln47_reg_2119, ap_CS_fsm_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln47_reg_2119 = ap_const_lv1_0)))) then 
            x_V_3_1_we0 <= ap_const_logic_1;
        else 
            x_V_3_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1309_fu_1764_p2 <= (mask_table2_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    xor_ln278_fu_2041_p2 <= (icmp_ln278_reg_2484 xor ap_const_lv1_1);
    xor_ln282_fu_1939_p2 <= (or_ln282_fu_1933_p2 xor ap_const_lv1_1);
    xor_ln284_fu_1971_p2 <= (or_ln284_fu_1965_p2 xor ap_const_lv1_1);
    xor_ln285_fu_2023_p2 <= (icmp_ln285_reg_2495 xor ap_const_lv1_1);
    xor_ln849_fu_1805_p2 <= (icmp_ln849_reg_2427_pp5_iter9_reg xor ap_const_lv1_1);
    xor_ln87_fu_1278_p2 <= (ap_const_lv1_1 xor and_ln87_1_fu_1240_p2);
    xor_ln88_fu_1486_p2 <= (bitcast_ln87_fu_1445_p1 xor ap_const_lv32_80000000);
    xs_sig_V_fu_1770_p2 <= (xor_ln1309_fu_1764_p2 and tmp_V_5_fu_1760_p1);

    y_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, sext_ln544_reg_2244_pp3_iter15_reg, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter16, ap_enable_reg_pp4_iter1, ap_block_pp1_stage0, ap_block_pp3_stage0, ap_block_pp4_stage0, sext_ln42_fu_795_p1, sext_ln180_fu_908_p1, sext_ln80_fu_1199_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            y_address0 <= sext_ln80_fu_1199_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter16 = ap_const_logic_1))) then 
            y_address0 <= sext_ln544_reg_2244_pp3_iter15_reg(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            y_address0 <= sext_ln180_fu_908_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_address0 <= sext_ln42_fu_795_p1(7 - 1 downto 0);
        else 
            y_address0 <= "XXXXXXX";
        end if; 
    end process;


    y_address1_assign_proc : process(ap_block_pp5_stage0, y_addr_3_reg_2310_pp4_iter3_reg, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp4_iter4, ap_enable_reg_pp5_iter1, ap_block_pp4_stage0, sext_ln100_fu_1674_p1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            y_address1 <= sext_ln100_fu_1674_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_1))) then 
            y_address1 <= y_addr_3_reg_2310_pp4_iter3_reg;
        else 
            y_address1 <= "XXXXXXX";
        end if; 
    end process;


    y_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter16, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter16 = ap_const_logic_1)))) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_ce1_assign_proc : process(ap_block_pp5_stage0_11001, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp4_iter4, ap_enable_reg_pp5_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            y_ce1 <= ap_const_logic_1;
        else 
            y_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, tmp_1_reg_2269, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter16, ap_block_pp1_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter16 = ap_const_logic_1))) then 
            y_d0 <= tmp_1_reg_2269;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            y_d0 <= ap_const_lv32_0;
        else 
            y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_we0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state7, icmp_ln54_reg_2128, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln70_reg_2208_pp3_iter15_reg, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln54_reg_2128 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter16 = ap_const_logic_1) and (icmp_ln70_reg_2208_pp3_iter15_reg = ap_const_lv1_0)))) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_we1_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln77_reg_2284_pp4_iter3_reg, ap_enable_reg_pp4_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (icmp_ln77_reg_2284_pp4_iter3_reg = ap_const_lv1_0))) then 
            y_we1 <= ap_const_logic_1;
        else 
            y_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln100_1_fu_1665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_reg_2394),8));
    zext_ln100_fu_1655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_1648_p3),8));
    zext_ln180_33_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_reg_2137),8));
    zext_ln180_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_882_p3),8));
    zext_ln209_fu_1744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_table3_q0),64));
    zext_ln215_1_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_reg_2163),8));
    zext_ln215_2_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_995_p2),64));
    zext_ln215_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_971_p3),8));
    zext_ln42_1_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_762_p3),8));
    zext_ln42_2_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln42_1_reg_459),8));
    zext_ln42_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_750_p3),8));
    zext_ln498_fu_1727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_1717_p4),64));
    zext_ln51_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_0_reg_470),64));
    zext_ln544_1_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_reg_2217_pp3_iter2_reg),8));
    zext_ln544_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_1075_p3),8));
    zext_ln66_1_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_reg_2163),64));
    zext_ln66_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_2_reg_2169),64));
    zext_ln73_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_fu_1036_p3),64));
    zext_ln80_1_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln80_reg_2293),8));
    zext_ln80_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_1173_p3),8));
end behav;
