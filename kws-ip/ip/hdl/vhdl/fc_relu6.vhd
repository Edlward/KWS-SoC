-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_relu6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_stream_V_V_empty_n : IN STD_LOGIC;
    in_stream_V_V_read : OUT STD_LOGIC;
    out_stream_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_V_V_full_n : IN STD_LOGIC;
    out_stream_V_V_write : OUT STD_LOGIC;
    gru2fc_scale_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    gru2fc_scale_V_empty_n : IN STD_LOGIC;
    gru2fc_scale_V_read : OUT STD_LOGIC;
    fc2final_scale_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc2final_scale_V_full_n : IN STD_LOGIC;
    fc2final_scale_V_write : OUT STD_LOGIC;
    fc_weight1_scale : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_scale_fc6 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc_weights1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    fc_weights1_V_ce0 : OUT STD_LOGIC;
    fc_weights1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    fc_bias1_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fc_bias1_V_ce0 : OUT STD_LOGIC;
    fc_bias1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of fc_relu6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_40C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000110000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_42FE0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111111100000000000000000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_V_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_V_3_ce0 : STD_LOGIC;
    signal x_V_3_we0 : STD_LOGIC;
    signal x_V_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_V_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_V_1_ce0 : STD_LOGIC;
    signal y_V_1_we0 : STD_LOGIC;
    signal y_V_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_relu_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_relu_ce0 : STD_LOGIC;
    signal tmp_relu_we0 : STD_LOGIC;
    signal tmp_relu_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_table2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table2_ce0 : STD_LOGIC;
    signal mask_table2_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_table3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table3_ce0 : STD_LOGIC;
    signal one_half_table3_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal in_stream_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln38_reg_1598 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp3_iter13 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln78_reg_1840 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1840_pp3_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gru2fc_scale_V_blk_n : STD_LOGIC;
    signal fc2final_scale_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal i_0_reg_374 : STD_LOGIC_VECTOR (6 downto 0);
    signal im_0_reg_432 : STD_LOGIC_VECTOR (6 downto 0);
    signal om2_0_reg_443 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state77_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state78_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state79_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state80_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state81_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state82_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state83_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state84_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state85_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_state86_pp3_stage0_iter9 : BOOLEAN;
    signal ap_block_state87_pp3_stage0_iter10 : BOOLEAN;
    signal ap_block_state88_pp3_stage0_iter11 : BOOLEAN;
    signal ap_block_state89_pp3_stage0_iter12 : BOOLEAN;
    signal ap_block_state90_pp3_stage0_iter13 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal icmp_ln78_reg_1840_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_520 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal reg_520_pp3_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal icmp_ln78_reg_1840_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_reg_1582 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln38_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_532_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_1602 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal om_fu_549_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal bitcast_ln89_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln89_reg_1615 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln89_6_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_6_reg_1620 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal om_6_fu_580_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal om_6_reg_1629 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln58_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1634 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_591_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln215_reg_1640 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_V_1_addr_1_reg_1645 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln70_fu_623_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_reg_1650 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln56_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1655 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state19_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal im_fu_637_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal im_reg_1659 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal x_V_3_load_reg_1674 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state20_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal fc_weights1_V_load_reg_1679 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln89_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_1689 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1428_fu_691_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal y_V_1_load_reg_1699 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_292_reg_1704 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_var_assign_reg_1709 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal or_ln87_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln87_reg_1717 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal and_ln87_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln87_reg_1722 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln87_fu_770_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln87_reg_1728 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_293_reg_1735 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_V_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_1741 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_55_reg_1746 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_810_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_89_reg_1751 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln278_3_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_3_reg_1756 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_3_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_3_reg_1761 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_10_fu_852_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_10_reg_1766 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_3_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_3_reg_1771 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_9_fu_924_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_9_reg_1776 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_3_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_3_reg_1781 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_294_reg_1786 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln1629_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1629_reg_1792 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal icmp_ln1629_2_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1629_2_reg_1798 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1629_3_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1629_3_reg_1803 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_max_V_fu_1083_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_max_V_reg_1808 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1630_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1630_reg_1814 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1630_1_fu_1113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1630_1_reg_1819 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_max_V_1_fu_1134_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_min_V_2_fu_1156_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shrink_reg_1834 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal icmp_ln78_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal icmp_ln78_reg_1840_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1840_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1840_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1840_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1840_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1840_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1840_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1840_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1840_pp3_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal om_5_fu_1169_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal tmp_relu_load_reg_1854 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal p_Result_56_reg_1859 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_56_reg_1859_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_fu_1206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_reg_1865 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_reg_1865_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_3_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_3_reg_1871 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln849_3_reg_1871_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_fu_1234_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_reg_1886 : STD_LOGIC_VECTOR (62 downto 0);
    signal bitcast_ln849_fu_1302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln849_reg_1891 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outprepare_tmp_reg_1901 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_4_fu_1324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_4_reg_1906 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_60_reg_1911 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln283_fu_1357_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln283_reg_1916 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln278_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_1922 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_fu_1385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_1928 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_fu_1397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_1933 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_8_fu_1403_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_8_reg_1938 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_1447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_1943 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_1459_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln285_reg_1948 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln295_fu_1479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_1953 : STD_LOGIC_VECTOR (0 downto 0);
    signal outprepare_V_fu_1566_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal outprepare_V_reg_1958 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state77 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter12 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_378_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal om_0_reg_386 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln45_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_091_0_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0130_0_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal om1_0_reg_421 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_im_0_phi_fu_436_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln41_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_11_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_1_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal zext_ln80_fu_1175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_fu_1228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal grp_fu_1573_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_458_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_469_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_472_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_475_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_478_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal trunc_ln89_fu_564_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_fu_595_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_min_V_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_fu_609_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln895_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_fu_648_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln215_10_fu_656_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln215_fu_660_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_309_fu_676_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln87_fu_696_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_307_fu_699_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln87_fu_709_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln87_4_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln89_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_5_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln87_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_6_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln89_fu_763_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_792_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_3_fu_806_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_3_fu_780_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_3_fu_802_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_9_fu_824_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_125_fu_858_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln281_3_fu_830_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln282_3_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_3_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_3_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_3_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_3_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_3_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_9_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_3_fu_874_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_3_fu_892_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_3_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_3_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_3_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln1629_fu_950_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln1629_1_fu_968_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_311_fu_954_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1629_fu_964_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln1629_1_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1629_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_312_fu_971_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1629_1_fu_981_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_126_fu_1021_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln283_fu_1015_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_3_fu_1018_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln297_3_fu_1036_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln285_fu_1042_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln295_3_fu_1045_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln285_3_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_10_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_3_fu_1028_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln278_3_fu_1052_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_10_fu_1069_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln461_3_fu_1077_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1630_fu_1090_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_314_fu_1093_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1630_fu_1103_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln1629_1_fu_1119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1629_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1629_1_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1630_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1630_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1630_1_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln475_fu_1180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_1192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_14_fu_1196_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_V_fu_1218_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_58_fu_1249_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln209_fu_1245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_33_fu_1255_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_15_fu_1261_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln1309_fu_1265_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_106_fu_1277_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_fu_1271_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_57_fu_1238_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_59_fu_1287_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln849_fu_1295_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln849_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln849_fu_1311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_121_fu_1339_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_fu_1353_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_fu_1327_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_1349_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_fu_1375_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_122_fu_1409_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_87_fu_1361_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln281_fu_1381_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln286_fu_1425_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_fu_1435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_1391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_1441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_1453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln286_fu_1431_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln284_fu_1467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_1419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_1473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_123_fu_1488_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_fu_1485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294cast_fu_1503_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln297_fu_1507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln295_fu_1512_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln285_fu_1525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_8_fu_1530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_1495_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln278_fu_1518_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln278_fu_1543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_1548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_8_fu_1535_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln282_fu_1553_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln461_fu_1560_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_458_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_fu_472_ce : STD_LOGIC;
    signal grp_fu_475_ce : STD_LOGIC;
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component kws_fadd_32ns_32nwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fdiv_32ns_32nGfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_sitofp_32s_32OgC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fptrunc_64ns_Aem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fpext_32ns_64Bew IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kws_fcmp_32ns_32nHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kws_dcmp_64ns_64nCeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kws_sitodp_32ns_6Yie IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kws_mac_muladd_8sLf8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_relu6_x_V_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component grucell_zz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dw_layer1_mask_taIfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component dw_layer1_one_halJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;



begin
    x_V_3_U : component fc_relu6_x_V_3
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_V_3_address0,
        ce0 => x_V_3_ce0,
        we0 => x_V_3_we0,
        d0 => in_stream_V_V_dout,
        q0 => x_V_3_q0);

    y_V_1_U : component grucell_zz
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_V_1_address0,
        ce0 => y_V_1_ce0,
        we0 => y_V_1_we0,
        d0 => y_V_1_d0,
        q0 => y_V_1_q0);

    tmp_relu_U : component grucell_zz
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_relu_address0,
        ce0 => tmp_relu_ce0,
        we0 => tmp_relu_we0,
        d0 => select_ln87_reg_1728,
        q0 => tmp_relu_q0);

    mask_table2_U : component dw_layer1_mask_taIfE
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table2_address0,
        ce0 => mask_table2_ce0,
        q0 => mask_table2_q0);

    one_half_table3_U : component dw_layer1_one_halJfO
    generic map (
        DataWidth => 53,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_table3_address0,
        ce0 => one_half_table3_ce0,
        q0 => one_half_table3_q0);

    kws_fadd_32ns_32nwdI_U326 : component kws_fadd_32ns_32nwdI
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_513,
        din1 => tmp_292_reg_1704,
        ce => ap_const_logic_1,
        dout => grp_fu_454_p2);

    kws_fmul_32ns_32neOg_U327 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_458_p0,
        din1 => grp_fu_458_p1,
        ce => grp_fu_458_ce,
        dout => grp_fu_458_p2);

    kws_fdiv_32ns_32nGfk_U328 : component kws_fdiv_32ns_32nGfk
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_42FE0000,
        din1 => reg_513,
        ce => ap_const_logic_1,
        dout => grp_fu_464_p2);

    kws_sitofp_32s_32OgC_U329 : component kws_sitofp_32s_32OgC
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_469_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_469_p1);

    kws_fptrunc_64ns_Aem_U330 : component kws_fptrunc_64ns_Aem
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_472_p0,
        ce => grp_fu_472_ce,
        dout => grp_fu_472_p1);

    kws_fpext_32ns_64Bew_U331 : component kws_fpext_32ns_64Bew
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_475_p0,
        ce => grp_fu_475_ce,
        dout => grp_fu_475_p1);

    kws_fcmp_32ns_32nHfu_U332 : component kws_fcmp_32ns_32nHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_478_p0,
        din1 => grp_fu_478_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_478_p2);

    kws_dcmp_64ns_64nCeG_U333 : component kws_dcmp_64ns_64nCeG
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_520,
        din1 => tmp_293_reg_1735,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_483_p2);

    kws_dcmp_64ns_64nCeG_U334 : component kws_dcmp_64ns_64nCeG
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_520,
        din1 => tmp_294_reg_1786,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_487_p2);

    kws_sitodp_32ns_6Yie_U335 : component kws_sitodp_32ns_6Yie
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_091_0_reg_397,
        ce => ap_const_logic_1,
        dout => grp_fu_491_p1);

    kws_sitodp_32ns_6Yie_U336 : component kws_sitodp_32ns_6Yie
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_0130_0_reg_409,
        ce => ap_const_logic_1,
        dout => grp_fu_495_p1);

    kws_mac_muladd_8sLf8_U337 : component kws_mac_muladd_8sLf8
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => x_V_3_load_reg_1674,
        din1 => fc_weights1_V_load_reg_1679,
        din2 => y_V_1_q0,
        dout => grp_fu_1573_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln55_fu_574_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln55_fu_574_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state77) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (fc2final_scale_V_full_n = ap_const_logic_1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state77)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state77);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (fc2final_scale_V_full_n = ap_const_logic_1))) then 
                    ap_enable_reg_pp3_iter13 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln38_reg_1598 = ap_const_lv1_0))) then 
                i_0_reg_374 <= i_reg_1602;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_374 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    im_0_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln56_reg_1655 = ap_const_lv1_0))) then 
                im_0_reg_432 <= im_reg_1659;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln55_fu_574_p2 = ap_const_lv1_0))) then 
                im_0_reg_432 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    om1_0_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                om1_0_reg_421 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                om1_0_reg_421 <= om_6_reg_1629;
            end if; 
        end if;
    end process;

    om2_0_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln78_fu_1163_p2 = ap_const_lv1_0))) then 
                om2_0_reg_443 <= om_5_fu_1169_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state76) and (fc2final_scale_V_full_n = ap_const_logic_1))) then 
                om2_0_reg_443 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    om_0_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                om_0_reg_386 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln45_fu_543_p2 = ap_const_lv1_0))) then 
                om_0_reg_386 <= om_fu_549_p2;
            end if; 
        end if;
    end process;

    p_0130_0_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                p_0130_0_reg_409 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                p_0130_0_reg_409 <= tmp_min_V_2_fu_1156_p3;
            end if; 
        end if;
    end process;

    p_091_0_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                p_091_0_reg_397 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                p_091_0_reg_397 <= tmp_max_V_1_fu_1134_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                and_ln284_3_reg_1771 <= and_ln284_3_fu_912_p2;
                and_ln295_3_reg_1781 <= and_ln295_3_fu_944_p2;
                icmp_ln278_3_reg_1756 <= icmp_ln278_3_fu_818_p2;
                icmp_ln285_3_reg_1761 <= icmp_ln285_3_fu_846_p2;
                p_Result_55_reg_1746 <= reg_V_fu_777_p1(31 downto 31);
                reg_V_reg_1741 <= reg_V_fu_777_p1;
                select_ln285_9_reg_1776 <= select_ln285_9_fu_924_p3;
                sh_amt_10_reg_1766 <= sh_amt_10_fu_852_p2;
                tmp_293_reg_1735 <= grp_fu_491_p1;
                tmp_294_reg_1786 <= grp_fu_495_p1;
                    tmp_89_reg_1751(22 downto 0) <= tmp_89_fu_810_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln78_reg_1840_pp3_iter10_reg = ap_const_lv1_0))) then
                and_ln284_reg_1943 <= and_ln284_fu_1447_p2;
                and_ln295_reg_1953 <= and_ln295_fu_1479_p2;
                icmp_ln278_reg_1922 <= icmp_ln278_fu_1369_p2;
                icmp_ln282_reg_1928 <= icmp_ln282_fu_1385_p2;
                icmp_ln285_reg_1933 <= icmp_ln285_fu_1397_p2;
                p_Result_60_reg_1911 <= reg_V_4_fu_1324_p1(31 downto 31);
                reg_V_4_reg_1906 <= reg_V_4_fu_1324_p1;
                select_ln285_reg_1948 <= select_ln285_fu_1459_p3;
                sh_amt_8_reg_1938 <= sh_amt_8_fu_1403_p2;
                trunc_ln283_reg_1916 <= trunc_ln283_fu_1357_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                and_ln87_reg_1722 <= and_ln87_fu_731_p2;
                or_ln87_reg_1717 <= or_ln87_fu_725_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln78_reg_1840_pp3_iter7_reg = ap_const_lv1_0))) then
                bitcast_ln849_reg_1891 <= bitcast_ln849_fu_1302_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bitcast_ln89_reg_1615 <= bitcast_ln89_fu_560_p1;
                icmp_ln89_6_reg_1620 <= icmp_ln89_6_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln56_reg_1655 = ap_const_lv1_0))) then
                fc_weights1_V_load_reg_1679 <= fc_weights1_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_1602 <= i_fu_532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                icmp_ln1629_2_reg_1798 <= icmp_ln1629_2_fu_1003_p2;
                icmp_ln1629_3_reg_1803 <= icmp_ln1629_3_fu_1009_p2;
                icmp_ln1630_1_reg_1819 <= icmp_ln1630_1_fu_1113_p2;
                icmp_ln1630_reg_1814 <= icmp_ln1630_fu_1107_p2;
                or_ln1629_reg_1792 <= or_ln1629_fu_997_p2;
                tmp_max_V_reg_1808 <= tmp_max_V_fu_1083_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln38_reg_1598 <= icmp_ln38_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln56_reg_1655 <= icmp_ln56_fu_631_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln78_reg_1840 <= icmp_ln78_fu_1163_p2;
                icmp_ln78_reg_1840_pp3_iter1_reg <= icmp_ln78_reg_1840;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln78_reg_1840_pp3_iter10_reg <= icmp_ln78_reg_1840_pp3_iter9_reg;
                icmp_ln78_reg_1840_pp3_iter11_reg <= icmp_ln78_reg_1840_pp3_iter10_reg;
                icmp_ln78_reg_1840_pp3_iter12_reg <= icmp_ln78_reg_1840_pp3_iter11_reg;
                icmp_ln78_reg_1840_pp3_iter2_reg <= icmp_ln78_reg_1840_pp3_iter1_reg;
                icmp_ln78_reg_1840_pp3_iter3_reg <= icmp_ln78_reg_1840_pp3_iter2_reg;
                icmp_ln78_reg_1840_pp3_iter4_reg <= icmp_ln78_reg_1840_pp3_iter3_reg;
                icmp_ln78_reg_1840_pp3_iter5_reg <= icmp_ln78_reg_1840_pp3_iter4_reg;
                icmp_ln78_reg_1840_pp3_iter6_reg <= icmp_ln78_reg_1840_pp3_iter5_reg;
                icmp_ln78_reg_1840_pp3_iter7_reg <= icmp_ln78_reg_1840_pp3_iter6_reg;
                icmp_ln78_reg_1840_pp3_iter8_reg <= icmp_ln78_reg_1840_pp3_iter7_reg;
                icmp_ln78_reg_1840_pp3_iter9_reg <= icmp_ln78_reg_1840_pp3_iter8_reg;
                icmp_ln849_3_reg_1871_pp3_iter8_reg <= icmp_ln849_3_reg_1871;
                icmp_ln849_reg_1865_pp3_iter8_reg <= icmp_ln849_reg_1865;
                p_Result_56_reg_1859_pp3_iter7_reg <= p_Result_56_reg_1859;
                reg_520_pp3_iter8_reg <= reg_520;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln78_reg_1840_pp3_iter6_reg = ap_const_lv1_0))) then
                icmp_ln849_3_reg_1871 <= icmp_ln849_3_fu_1212_p2;
                icmp_ln849_reg_1865 <= icmp_ln849_fu_1206_p2;
                trunc_ln368_reg_1886 <= trunc_ln368_fu_1234_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                icmp_ln89_reg_1689 <= icmp_ln89_fu_685_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                im_reg_1659 <= im_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                in_var_assign_reg_1709 <= grp_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                om_6_reg_1629 <= om_6_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln78_reg_1840_pp3_iter11_reg = ap_const_lv1_0))) then
                outprepare_V_reg_1958 <= outprepare_V_fu_1566_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln78_reg_1840_pp3_iter9_reg = ap_const_lv1_0))) then
                outprepare_tmp_reg_1901 <= grp_fu_472_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln78_reg_1840_pp3_iter5_reg = ap_const_lv1_0))) then
                p_Result_56_reg_1859 <= bitcast_ln475_fu_1180_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter5 = ap_const_logic_1) and (icmp_ln78_reg_1840_pp3_iter4_reg = ap_const_lv1_0)))) then
                reg_499 <= grp_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_507 <= grp_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_513 <= grp_fu_469_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (icmp_ln78_reg_1840_pp3_iter6_reg = ap_const_lv1_0)))) then
                reg_520 <= grp_fu_475_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                select_ln70_reg_1650 <= select_ln70_fu_623_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                select_ln87_reg_1728 <= select_ln87_fu_770_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                shrink_reg_1834 <= grp_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (gru2fc_scale_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_127_reg_1582 <= gru2fc_scale_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_292_reg_1704 <= grp_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln78_reg_1840 = ap_const_lv1_0))) then
                tmp_relu_load_reg_1854 <= tmp_relu_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln56_reg_1655 = ap_const_lv1_0))) then
                x_V_3_load_reg_1674 <= x_V_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln55_fu_574_p2 = ap_const_lv1_0))) then
                y_V_1_addr_1_reg_1645 <= zext_ln58_fu_586_p1(6 - 1 downto 0);
                    zext_ln215_reg_1640(6 downto 0) <= zext_ln215_fu_591_p1(6 downto 0);
                    zext_ln58_reg_1634(6 downto 0) <= zext_ln58_fu_586_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                y_V_1_load_reg_1699 <= y_V_1_q0;
            end if;
        end if;
    end process;
    zext_ln58_reg_1634(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln215_reg_1640(13 downto 7) <= "0000000";
    tmp_89_reg_1751(23) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, gru2fc_scale_V_empty_n, fc2final_scale_V_full_n, ap_enable_reg_pp3_iter13, ap_CS_fsm_state76, icmp_ln38_fu_526_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, icmp_ln55_fu_574_p2, ap_CS_fsm_state18, icmp_ln56_fu_631_p2, ap_enable_reg_pp2_iter0, icmp_ln78_fu_1163_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter12, icmp_ln45_fu_543_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (gru2fc_scale_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln38_fu_526_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln38_fu_526_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln45_fu_543_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln55_fu_574_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln56_fu_631_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln56_fu_631_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and (fc2final_scale_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln78_fu_1163_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter13 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln78_fu_1163_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter13 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln215_fu_660_p2 <= std_logic_vector(unsigned(zext_ln215_reg_1640) + unsigned(zext_ln215_10_fu_656_p1));
    and_ln1629_1_fu_1128_p2 <= (grp_fu_483_p2 and and_ln1629_fu_1123_p2);
    and_ln1629_fu_1123_p2 <= (or_ln1629_reg_1792 and or_ln1629_1_fu_1119_p2);
    and_ln1630_1_fu_1150_p2 <= (grp_fu_487_p2 and and_ln1630_fu_1145_p2);
    and_ln1630_fu_1145_p2 <= (or_ln1630_fu_1141_p2 and or_ln1629_reg_1792);
    and_ln282_3_fu_886_p2 <= (xor_ln278_3_fu_880_p2 and icmp_ln282_3_fu_834_p2);
    and_ln282_fu_1548_p2 <= (xor_ln278_fu_1543_p2 and icmp_ln282_reg_1928);
    and_ln284_3_fu_912_p2 <= (xor_ln282_3_fu_906_p2 and icmp_ln284_3_fu_840_p2);
    and_ln284_fu_1447_p2 <= (xor_ln282_fu_1441_p2 and icmp_ln284_fu_1391_p2);
    and_ln285_10_fu_1064_p2 <= (xor_ln285_3_fu_1059_p2 and and_ln284_3_reg_1771);
    and_ln285_8_fu_1530_p2 <= (xor_ln285_fu_1525_p2 and and_ln284_reg_1943);
    and_ln285_9_fu_918_p2 <= (icmp_ln285_3_fu_846_p2 and and_ln284_3_fu_912_p2);
    and_ln285_fu_1453_p2 <= (icmp_ln285_fu_1397_p2 and and_ln284_fu_1447_p2);
    and_ln295_3_fu_944_p2 <= (xor_ln284_3_fu_938_p2 and icmp_ln295_3_fu_868_p2);
    and_ln295_fu_1479_p2 <= (xor_ln284_fu_1473_p2 and icmp_ln295_fu_1419_p2);
    and_ln849_fu_1311_p2 <= (xor_ln849_fu_1306_p2 and icmp_ln849_3_reg_1871_pp3_iter8_reg);
    and_ln87_fu_731_p2 <= (or_ln87_fu_725_p2 and grp_fu_478_p2);
    and_ln89_5_fu_746_p2 <= (grp_fu_478_p2 and and_ln89_fu_741_p2);
    and_ln89_6_fu_757_p2 <= (xor_ln87_fu_752_p2 and and_ln89_5_fu_746_p2);
    and_ln89_fu_741_p2 <= (or_ln89_fu_737_p2 and or_ln87_reg_1717);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(18);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(74);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state32 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(30);
    ap_CS_fsm_state37 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(35);
    ap_CS_fsm_state39 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(37);
    ap_CS_fsm_state41 <= ap_CS_fsm(38);
    ap_CS_fsm_state42 <= ap_CS_fsm(39);
    ap_CS_fsm_state43 <= ap_CS_fsm(40);
    ap_CS_fsm_state44 <= ap_CS_fsm(41);
    ap_CS_fsm_state45 <= ap_CS_fsm(42);
    ap_CS_fsm_state46 <= ap_CS_fsm(43);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state51 <= ap_CS_fsm(48);
    ap_CS_fsm_state52 <= ap_CS_fsm(49);
    ap_CS_fsm_state67 <= ap_CS_fsm(64);
    ap_CS_fsm_state68 <= ap_CS_fsm(65);
    ap_CS_fsm_state69 <= ap_CS_fsm(66);
    ap_CS_fsm_state70 <= ap_CS_fsm(67);
    ap_CS_fsm_state71 <= ap_CS_fsm(68);
    ap_CS_fsm_state72 <= ap_CS_fsm(69);
    ap_CS_fsm_state73 <= ap_CS_fsm(70);
    ap_CS_fsm_state74 <= ap_CS_fsm(71);
    ap_CS_fsm_state75 <= ap_CS_fsm(72);
    ap_CS_fsm_state76 <= ap_CS_fsm(73);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
    ap_CS_fsm_state91 <= ap_CS_fsm(75);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln38_reg_1598)
    begin
                ap_block_pp0_stage0_11001 <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln38_reg_1598 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln38_reg_1598)
    begin
                ap_block_pp0_stage0_subdone <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln38_reg_1598 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp3_iter13, icmp_ln78_reg_1840_pp3_iter12_reg)
    begin
                ap_block_pp3_stage0_01001 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter13 = ap_const_logic_1) and (icmp_ln78_reg_1840_pp3_iter12_reg = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp3_iter13, icmp_ln78_reg_1840_pp3_iter12_reg)
    begin
                ap_block_pp3_stage0_11001 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter13 = ap_const_logic_1) and (icmp_ln78_reg_1840_pp3_iter12_reg = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp3_iter13, icmp_ln78_reg_1840_pp3_iter12_reg)
    begin
                ap_block_pp3_stage0_subdone <= ((out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter13 = ap_const_logic_1) and (icmp_ln78_reg_1840_pp3_iter12_reg = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, gru2fc_scale_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (gru2fc_scale_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state19_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter1_assign_proc : process(in_stream_V_V_empty_n, icmp_ln38_reg_1598)
    begin
                ap_block_state7_pp0_stage0_iter1 <= ((in_stream_V_V_empty_n = ap_const_logic_0) and (icmp_ln38_reg_1598 = ap_const_lv1_0));
    end process;

        ap_block_state80_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp3_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp3_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp3_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp3_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state90_pp3_stage0_iter13_assign_proc : process(out_stream_V_V_full_n, icmp_ln78_reg_1840_pp3_iter12_reg)
    begin
                ap_block_state90_pp3_stage0_iter13 <= ((out_stream_V_V_full_n = ap_const_logic_0) and (icmp_ln78_reg_1840_pp3_iter12_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln38_fu_526_p2)
    begin
        if ((icmp_ln38_fu_526_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state19_assign_proc : process(icmp_ln56_fu_631_p2)
    begin
        if ((icmp_ln56_fu_631_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state77_assign_proc : process(icmp_ln78_fu_1163_p2)
    begin
        if ((icmp_ln78_fu_1163_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state77 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state77 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter13, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12)
    begin
        if (((ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter13 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_378_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln38_reg_1598, i_0_reg_374, i_reg_1602)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln38_reg_1598 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_378_p4 <= i_reg_1602;
        else 
            ap_phi_mux_i_0_phi_fu_378_p4 <= i_0_reg_374;
        end if; 
    end process;


    ap_phi_mux_im_0_phi_fu_436_p4_assign_proc : process(im_0_reg_432, icmp_ln56_reg_1655, ap_CS_fsm_pp2_stage0, im_reg_1659, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln56_reg_1655 = ap_const_lv1_0))) then 
            ap_phi_mux_im_0_phi_fu_436_p4 <= im_reg_1659;
        else 
            ap_phi_mux_im_0_phi_fu_436_p4 <= im_0_reg_432;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln1629_1_fu_968_p1 <= tmp_293_reg_1735;
    bitcast_ln1629_fu_950_p1 <= reg_520;
    bitcast_ln1630_fu_1090_p1 <= tmp_294_reg_1786;
    bitcast_ln475_fu_1180_p1 <= reg_499;
    bitcast_ln849_fu_1302_p1 <= select_ln849_fu_1295_p3;
    bitcast_ln87_fu_696_p1 <= in_var_assign_reg_1709;
    bitcast_ln89_fu_560_p1 <= grp_fu_458_p2;
    exp_V_3_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_792_p4),9));
    exp_V_fu_1349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_121_fu_1339_p4),9));

    fc2final_scale_V_blk_n_assign_proc : process(fc2final_scale_V_full_n, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            fc2final_scale_V_blk_n <= fc2final_scale_V_full_n;
        else 
            fc2final_scale_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fc2final_scale_V_din <= reg_499;

    fc2final_scale_V_write_assign_proc : process(fc2final_scale_V_full_n, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) and (fc2final_scale_V_full_n = ap_const_logic_1))) then 
            fc2final_scale_V_write <= ap_const_logic_1;
        else 
            fc2final_scale_V_write <= ap_const_logic_0;
        end if; 
    end process;

    fc_bias1_V_address0 <= zext_ln58_reg_1634(6 - 1 downto 0);

    fc_bias1_V_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            fc_bias1_V_ce0 <= ap_const_logic_1;
        else 
            fc_bias1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_weights1_V_address0 <= zext_ln215_11_fu_665_p1(12 - 1 downto 0);

    fc_weights1_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            fc_weights1_V_ce0 <= ap_const_logic_1;
        else 
            fc_weights1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_458_ce_assign_proc : process(ap_CS_fsm_state5, ap_block_pp3_stage0_11001, ap_CS_fsm_state71, ap_CS_fsm_state75, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state32, ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state29, ap_CS_fsm_state68, ap_CS_fsm_state72, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            grp_fu_458_ce <= ap_const_logic_1;
        else 
            grp_fu_458_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_458_p0_assign_proc : process(ap_block_pp3_stage0, reg_499, reg_507, reg_513, tmp_127_reg_1582, ap_CS_fsm_state2, shrink_reg_1834, tmp_relu_load_reg_1854, ap_enable_reg_pp3_iter2, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state29, ap_CS_fsm_state68, ap_CS_fsm_state72)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_458_p0 <= tmp_relu_load_reg_1854;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_458_p0 <= reg_499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_458_p0 <= shrink_reg_1834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_458_p0 <= reg_513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_458_p0 <= reg_507;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_458_p0 <= tmp_127_reg_1582;
        else 
            grp_fu_458_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_458_p1_assign_proc : process(fc_weight1_scale, tmp_scale_fc6, ap_block_pp3_stage0, reg_499, tmp_127_reg_1582, ap_CS_fsm_state2, shrink_reg_1834, ap_enable_reg_pp3_iter2, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state29, ap_CS_fsm_state68, ap_CS_fsm_state72)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_458_p1 <= shrink_reg_1834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_458_p1 <= tmp_127_reg_1582;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_458_p1 <= reg_499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_458_p1 <= ap_const_lv32_40C00000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_458_p1 <= fc_weight1_scale;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_458_p1 <= tmp_scale_fc6;
        else 
            grp_fu_458_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_469_p0_assign_proc : process(select_ln70_reg_1650, sext_ln1428_fu_691_p1, ap_CS_fsm_state23, y_V_1_load_reg_1699, ap_CS_fsm_state27, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_469_p0 <= select_ln70_reg_1650;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_469_p0 <= y_V_1_load_reg_1699;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_469_p0 <= sext_ln1428_fu_691_p1;
        else 
            grp_fu_469_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_472_ce_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            grp_fu_472_ce <= ap_const_logic_1;
        else 
            grp_fu_472_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_472_p0 <= 
        reg_520_pp3_iter8_reg when (and_ln849_fu_1311_p2(0) = '1') else 
        bitcast_ln849_reg_1891;

    grp_fu_475_ce_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state43, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state43) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            grp_fu_475_ce <= ap_const_logic_1;
        else 
            grp_fu_475_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_475_p0_assign_proc : process(ap_block_pp3_stage0, reg_499, select_ln87_reg_1728, ap_enable_reg_pp3_iter6, ap_CS_fsm_state42)
    begin
        if (((ap_enable_reg_pp3_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_475_p0 <= reg_499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_475_p0 <= select_ln87_reg_1728;
        else 
            grp_fu_475_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_478_p0_assign_proc : process(reg_507, in_var_assign_reg_1709, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_478_p0 <= reg_507;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_478_p0 <= in_var_assign_reg_1709;
        else 
            grp_fu_478_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_478_p1_assign_proc : process(in_var_assign_reg_1709, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_478_p1 <= in_var_assign_reg_1709;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_478_p1 <= ap_const_lv32_0;
        else 
            grp_fu_478_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gru2fc_scale_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, gru2fc_scale_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gru2fc_scale_V_blk_n <= gru2fc_scale_V_empty_n;
        else 
            gru2fc_scale_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gru2fc_scale_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, gru2fc_scale_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (gru2fc_scale_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gru2fc_scale_V_read <= ap_const_logic_1;
        else 
            gru2fc_scale_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_532_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_378_p4) + unsigned(ap_const_lv7_1));
    icmp_ln1629_1_fu_991_p2 <= "1" when (trunc_ln1629_fu_964_p1 = ap_const_lv52_0) else "0";
    icmp_ln1629_2_fu_1003_p2 <= "0" when (tmp_312_fu_971_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln1629_3_fu_1009_p2 <= "1" when (trunc_ln1629_1_fu_981_p1 = ap_const_lv52_0) else "0";
    icmp_ln1629_fu_985_p2 <= "0" when (tmp_311_fu_954_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln1630_1_fu_1113_p2 <= "1" when (trunc_ln1630_fu_1103_p1 = ap_const_lv52_0) else "0";
    icmp_ln1630_fu_1107_p2 <= "0" when (tmp_314_fu_1093_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln278_3_fu_818_p2 <= "1" when (trunc_ln262_3_fu_780_p1 = ap_const_lv31_0) else "0";
    icmp_ln278_fu_1369_p2 <= "1" when (trunc_ln262_fu_1327_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_3_fu_834_p2 <= "1" when (p_Result_s_fu_792_p4 = ap_const_lv8_96) else "0";
    icmp_ln282_fu_1385_p2 <= "1" when (p_Result_s_121_fu_1339_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_3_fu_840_p2 <= "1" when (signed(sh_amt_9_fu_824_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln284_fu_1391_p2 <= "1" when (signed(sh_amt_fu_1375_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_3_fu_846_p2 <= "1" when (signed(sh_amt_9_fu_824_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln285_fu_1397_p2 <= "1" when (signed(sh_amt_fu_1375_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_3_fu_868_p2 <= "1" when (signed(tmp_125_fu_858_p4) < signed(ap_const_lv4_1)) else "0";
    icmp_ln295_fu_1419_p2 <= "1" when (signed(tmp_122_fu_1409_p4) < signed(ap_const_lv6_1)) else "0";
    icmp_ln38_fu_526_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_378_p4 = ap_const_lv7_40) else "0";
    icmp_ln45_fu_543_p2 <= "1" when (om_0_reg_386 = ap_const_lv7_40) else "0";
    icmp_ln55_fu_574_p2 <= "1" when (om1_0_reg_421 = ap_const_lv7_40) else "0";
    icmp_ln56_fu_631_p2 <= "1" when (ap_phi_mux_im_0_phi_fu_436_p4 = ap_const_lv7_40) else "0";
    icmp_ln78_fu_1163_p2 <= "1" when (om2_0_reg_443 = ap_const_lv7_40) else "0";
    icmp_ln849_3_fu_1212_p2 <= "1" when (unsigned(tmp_V_14_fu_1196_p4) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln849_fu_1206_p2 <= "1" when (unsigned(tmp_V_14_fu_1196_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    icmp_ln87_4_fu_719_p2 <= "1" when (trunc_ln87_fu_709_p1 = ap_const_lv23_0) else "0";
    icmp_ln87_fu_713_p2 <= "0" when (tmp_307_fu_699_p4 = ap_const_lv8_FF) else "1";
    icmp_ln895_fu_617_p2 <= "1" when (signed(p_091_0_reg_397) > signed(select_ln68_fu_609_p3)) else "0";
    icmp_ln89_6_fu_568_p2 <= "1" when (trunc_ln89_fu_564_p1 = ap_const_lv23_0) else "0";
    icmp_ln89_fu_685_p2 <= "0" when (tmp_309_fu_676_p4 = ap_const_lv8_FF) else "1";
    im_fu_637_p2 <= std_logic_vector(unsigned(ap_phi_mux_im_0_phi_fu_436_p4) + unsigned(ap_const_lv7_1));

    in_stream_V_V_blk_n_assign_proc : process(in_stream_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln38_reg_1598)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln38_reg_1598 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_stream_V_V_blk_n <= in_stream_V_V_empty_n;
        else 
            in_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln38_reg_1598, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln38_reg_1598 = ap_const_lv1_0))) then 
            in_stream_V_V_read <= ap_const_logic_1;
        else 
            in_stream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    index_V_fu_1218_p4 <= p_Val2_s_fu_1192_p1(57 downto 52);
    lshr_ln286_3_fu_874_p2 <= std_logic_vector(shift_right(unsigned(tmp_89_fu_810_p3),to_integer(unsigned('0' & sext_ln281_3_fu_830_p1(24-1 downto 0)))));
    lshr_ln286_fu_1425_p2 <= std_logic_vector(shift_right(unsigned(tmp_87_fu_1361_p3),to_integer(unsigned('0' & sext_ln281_fu_1381_p1(24-1 downto 0)))));
    mask_table2_address0 <= zext_ln498_fu_1228_p1(6 - 1 downto 0);

    mask_table2_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1))) then 
            mask_table2_ce0 <= ap_const_logic_1;
        else 
            mask_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    om_5_fu_1169_p2 <= std_logic_vector(unsigned(om2_0_reg_443) + unsigned(ap_const_lv7_1));
    om_6_fu_580_p2 <= std_logic_vector(unsigned(om1_0_reg_421) + unsigned(ap_const_lv7_1));
    om_fu_549_p2 <= std_logic_vector(unsigned(om_0_reg_386) + unsigned(ap_const_lv7_1));
    one_half_table3_address0 <= zext_ln498_fu_1228_p1(6 - 1 downto 0);

    one_half_table3_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1))) then 
            one_half_table3_ce0 <= ap_const_logic_1;
        else 
            one_half_table3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1629_1_fu_1119_p2 <= (icmp_ln1629_3_reg_1803 or icmp_ln1629_2_reg_1798);
    or_ln1629_fu_997_p2 <= (icmp_ln1629_fu_985_p2 or icmp_ln1629_1_fu_991_p2);
    or_ln1630_fu_1141_p2 <= (icmp_ln1630_reg_1814 or icmp_ln1630_1_reg_1819);
    or_ln282_3_fu_900_p2 <= (icmp_ln282_3_fu_834_p2 or icmp_ln278_3_fu_818_p2);
    or_ln282_fu_1435_p2 <= (icmp_ln282_fu_1385_p2 or icmp_ln278_fu_1369_p2);
    or_ln284_3_fu_932_p2 <= (or_ln282_3_fu_900_p2 or icmp_ln284_3_fu_840_p2);
    or_ln284_fu_1467_p2 <= (or_ln282_fu_1435_p2 or icmp_ln284_fu_1391_p2);
    or_ln87_fu_725_p2 <= (icmp_ln87_fu_713_p2 or icmp_ln87_4_fu_719_p2);
    or_ln89_fu_737_p2 <= (icmp_ln89_reg_1689 or icmp_ln89_6_reg_1620);

    out_stream_V_V_blk_n_assign_proc : process(out_stream_V_V_full_n, ap_enable_reg_pp3_iter13, ap_block_pp3_stage0, icmp_ln78_reg_1840_pp3_iter12_reg)
    begin
        if (((ap_enable_reg_pp3_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln78_reg_1840_pp3_iter12_reg = ap_const_lv1_0))) then 
            out_stream_V_V_blk_n <= out_stream_V_V_full_n;
        else 
            out_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_V_din <= outprepare_V_reg_1958;

    out_stream_V_V_write_assign_proc : process(ap_enable_reg_pp3_iter13, icmp_ln78_reg_1840_pp3_iter12_reg, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter13 = ap_const_logic_1) and (icmp_ln78_reg_1840_pp3_iter12_reg = ap_const_lv1_0))) then 
            out_stream_V_V_write <= ap_const_logic_1;
        else 
            out_stream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    outprepare_V_fu_1566_p3 <= 
        sub_ln461_fu_1560_p2 when (p_Result_60_reg_1911(0) = '1') else 
        select_ln282_fu_1553_p3;
    p_Result_57_fu_1238_p3 <= (p_Result_56_reg_1859_pp3_iter7_reg & ap_const_lv63_0);
    p_Result_58_fu_1249_p3 <= (p_Result_56_reg_1859_pp3_iter7_reg & trunc_ln368_reg_1886);
    p_Result_59_fu_1287_p3 <= (tmp_106_fu_1277_p4 & xs_sig_V_fu_1271_p2);
    p_Result_s_121_fu_1339_p4 <= reg_V_4_fu_1324_p1(30 downto 23);
    p_Result_s_fu_792_p4 <= reg_V_fu_777_p1(30 downto 23);
    p_Val2_33_fu_1255_p2 <= std_logic_vector(unsigned(p_Result_58_fu_1249_p3) + unsigned(zext_ln209_fu_1245_p1));
    p_Val2_s_fu_1192_p1 <= grp_fu_475_p1;
    reg_V_4_fu_1324_p1 <= outprepare_tmp_reg_1901;
    reg_V_fu_777_p1 <= select_ln87_reg_1728;
    select_ln278_3_fu_1052_p3 <= 
        ap_const_lv32_0 when (icmp_ln278_3_reg_1756(0) = '1') else 
        select_ln295_3_fu_1045_p3;
    select_ln278_fu_1518_p3 <= 
        ap_const_lv8_0 when (icmp_ln278_reg_1922(0) = '1') else 
        select_ln295_fu_1512_p3;
    select_ln282_3_fu_892_p3 <= 
        tmp_89_fu_810_p3 when (and_ln282_3_fu_886_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln282_fu_1553_p3 <= 
        trunc_ln283_reg_1916 when (and_ln282_fu_1548_p2(0) = '1') else 
        select_ln285_8_fu_1535_p3;
    select_ln285_10_fu_1069_p3 <= 
        select_ln288_3_fu_1028_p3 when (and_ln285_10_fu_1064_p2(0) = '1') else 
        select_ln278_3_fu_1052_p3;
    select_ln285_8_fu_1535_p3 <= 
        select_ln288_fu_1495_p3 when (and_ln285_8_fu_1530_p2(0) = '1') else 
        select_ln278_fu_1518_p3;
    select_ln285_9_fu_924_p3 <= 
        lshr_ln286_3_fu_874_p2 when (and_ln285_9_fu_918_p2(0) = '1') else 
        select_ln282_3_fu_892_p3;
    select_ln285_fu_1459_p3 <= 
        trunc_ln286_fu_1431_p1 when (and_ln285_fu_1453_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln288_3_fu_1028_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_126_fu_1021_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln288_fu_1495_p3 <= 
        ap_const_lv8_FF when (tmp_123_fu_1488_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln295_3_fu_1045_p3 <= 
        shl_ln297_3_fu_1036_p2 when (and_ln295_3_reg_1781(0) = '1') else 
        zext_ln285_fu_1042_p1;
    select_ln295_fu_1512_p3 <= 
        shl_ln297_fu_1507_p2 when (and_ln295_reg_1953(0) = '1') else 
        select_ln285_reg_1948;
    select_ln68_fu_609_p3 <= 
        tmp_min_V_fu_603_p2 when (tmp_fu_595_p3(0) = '1') else 
        p_0130_0_reg_409;
    select_ln70_fu_623_p3 <= 
        p_091_0_reg_397 when (icmp_ln895_fu_617_p2(0) = '1') else 
        select_ln68_fu_609_p3;
    select_ln849_fu_1295_p3 <= 
        p_Result_57_fu_1238_p3 when (icmp_ln849_reg_1865(0) = '1') else 
        p_Result_59_fu_1287_p3;
    select_ln87_fu_770_p3 <= 
        ap_const_lv32_0 when (and_ln87_reg_1722(0) = '1') else 
        select_ln89_fu_763_p3;
    select_ln89_fu_763_p3 <= 
        reg_507 when (and_ln89_6_fu_757_p2(0) = '1') else 
        in_var_assign_reg_1709;
        sext_ln1428_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(fc_bias1_V_q0),32));

        sext_ln281_3_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_9_fu_824_p2),24));

        sext_ln281_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_1375_p2),24));

        sext_ln294_3_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_10_reg_1766),32));

        sext_ln294_fu_1485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_8_reg_1938),32));

    sext_ln294cast_fu_1503_p1 <= sext_ln294_fu_1485_p1(8 - 1 downto 0);
    sh_amt_10_fu_852_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_9_fu_824_p2));
    sh_amt_8_fu_1403_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_fu_1375_p2));
    sh_amt_9_fu_824_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_3_fu_802_p1));
    sh_amt_fu_1375_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_1349_p1));
    shl_ln297_3_fu_1036_p2 <= std_logic_vector(shift_left(unsigned(zext_ln283_fu_1015_p1),to_integer(unsigned('0' & sext_ln294_3_fu_1018_p1(31-1 downto 0)))));
    shl_ln297_fu_1507_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln283_reg_1916),to_integer(unsigned('0' & sext_ln294cast_fu_1503_p1(8-1 downto 0)))));
    sub_ln461_3_fu_1077_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln285_10_fu_1069_p3));
    sub_ln461_fu_1560_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln282_fu_1553_p3));
    tmp_106_fu_1277_p4 <= p_Val2_33_fu_1255_p2(63 downto 52);
    tmp_107_fu_648_p3 <= (ap_phi_mux_im_0_phi_fu_436_p4 & ap_const_lv6_0);
    tmp_122_fu_1409_p4 <= sh_amt_8_fu_1403_p2(8 downto 3);
    tmp_123_fu_1488_p3 <= reg_V_4_reg_1906(31 downto 31);
    tmp_125_fu_858_p4 <= sh_amt_10_fu_852_p2(8 downto 5);
    tmp_126_fu_1021_p3 <= reg_V_reg_1741(31 downto 31);
    tmp_307_fu_699_p4 <= bitcast_ln87_fu_696_p1(30 downto 23);
    tmp_309_fu_676_p4 <= bitcast_ln89_reg_1615(30 downto 23);
    tmp_311_fu_954_p4 <= bitcast_ln1629_fu_950_p1(62 downto 52);
    tmp_312_fu_971_p4 <= bitcast_ln1629_1_fu_968_p1(62 downto 52);
    tmp_314_fu_1093_p4 <= bitcast_ln1630_fu_1090_p1(62 downto 52);
    tmp_87_fu_1361_p3 <= (ap_const_lv1_1 & trunc_ln270_fu_1353_p1);
    tmp_89_fu_810_p3 <= (ap_const_lv1_1 & trunc_ln270_3_fu_806_p1);
    tmp_V_14_fu_1196_p4 <= p_Val2_s_fu_1192_p1(62 downto 52);
    tmp_V_15_fu_1261_p1 <= p_Val2_33_fu_1255_p2(52 - 1 downto 0);
    tmp_fu_595_p3 <= p_0130_0_reg_409(31 downto 31);
    tmp_max_V_1_fu_1134_p3 <= 
        tmp_max_V_reg_1808 when (and_ln1629_1_fu_1128_p2(0) = '1') else 
        p_091_0_reg_397;
    tmp_max_V_fu_1083_p3 <= 
        sub_ln461_3_fu_1077_p2 when (p_Result_55_reg_1746(0) = '1') else 
        select_ln285_10_fu_1069_p3;
    tmp_min_V_2_fu_1156_p3 <= 
        tmp_max_V_reg_1808 when (and_ln1630_1_fu_1150_p2(0) = '1') else 
        p_0130_0_reg_409;
    tmp_min_V_fu_603_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_0130_0_reg_409));

    tmp_relu_address0_assign_proc : process(ap_block_pp3_stage0, zext_ln58_reg_1634, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state42, zext_ln80_fu_1175_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            tmp_relu_address0 <= zext_ln80_fu_1175_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            tmp_relu_address0 <= zext_ln58_reg_1634(6 - 1 downto 0);
        else 
            tmp_relu_address0 <= "XXXXXX";
        end if; 
    end process;


    tmp_relu_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            tmp_relu_ce0 <= ap_const_logic_1;
        else 
            tmp_relu_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_relu_we0_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            tmp_relu_we0 <= ap_const_logic_1;
        else 
            tmp_relu_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1629_1_fu_981_p1 <= bitcast_ln1629_1_fu_968_p1(52 - 1 downto 0);
    trunc_ln1629_fu_964_p1 <= bitcast_ln1629_fu_950_p1(52 - 1 downto 0);
    trunc_ln1630_fu_1103_p1 <= bitcast_ln1630_fu_1090_p1(52 - 1 downto 0);
    trunc_ln262_3_fu_780_p1 <= reg_V_fu_777_p1(31 - 1 downto 0);
    trunc_ln262_fu_1327_p1 <= reg_V_4_fu_1324_p1(31 - 1 downto 0);
    trunc_ln270_3_fu_806_p1 <= reg_V_fu_777_p1(23 - 1 downto 0);
    trunc_ln270_fu_1353_p1 <= reg_V_4_fu_1324_p1(23 - 1 downto 0);
    trunc_ln283_fu_1357_p1 <= reg_V_4_fu_1324_p1(8 - 1 downto 0);
    trunc_ln286_fu_1431_p1 <= lshr_ln286_fu_1425_p2(8 - 1 downto 0);
    trunc_ln368_fu_1234_p1 <= p_Val2_s_fu_1192_p1(63 - 1 downto 0);
    trunc_ln87_fu_709_p1 <= bitcast_ln87_fu_696_p1(23 - 1 downto 0);
    trunc_ln89_fu_564_p1 <= bitcast_ln89_fu_560_p1(23 - 1 downto 0);

    x_V_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, zext_ln41_fu_538_p1, zext_ln58_1_fu_643_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            x_V_3_address0 <= zext_ln58_1_fu_643_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            x_V_3_address0 <= zext_ln41_fu_538_p1(6 - 1 downto 0);
        else 
            x_V_3_address0 <= "XXXXXX";
        end if; 
    end process;


    x_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            x_V_3_ce0 <= ap_const_logic_1;
        else 
            x_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_V_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln38_reg_1598, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln38_reg_1598 = ap_const_lv1_0))) then 
            x_V_3_we0 <= ap_const_logic_1;
        else 
            x_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1309_fu_1265_p2 <= (mask_table2_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    xor_ln278_3_fu_880_p2 <= (icmp_ln278_3_fu_818_p2 xor ap_const_lv1_1);
    xor_ln278_fu_1543_p2 <= (icmp_ln278_reg_1922 xor ap_const_lv1_1);
    xor_ln282_3_fu_906_p2 <= (or_ln282_3_fu_900_p2 xor ap_const_lv1_1);
    xor_ln282_fu_1441_p2 <= (or_ln282_fu_1435_p2 xor ap_const_lv1_1);
    xor_ln284_3_fu_938_p2 <= (or_ln284_3_fu_932_p2 xor ap_const_lv1_1);
    xor_ln284_fu_1473_p2 <= (or_ln284_fu_1467_p2 xor ap_const_lv1_1);
    xor_ln285_3_fu_1059_p2 <= (icmp_ln285_3_reg_1761 xor ap_const_lv1_1);
    xor_ln285_fu_1525_p2 <= (icmp_ln285_reg_1933 xor ap_const_lv1_1);
    xor_ln849_fu_1306_p2 <= (icmp_ln849_reg_1865_pp3_iter8_reg xor ap_const_lv1_1);
    xor_ln87_fu_752_p2 <= (ap_const_lv1_1 xor and_ln87_reg_1722);
    xs_sig_V_fu_1271_p2 <= (xor_ln1309_fu_1265_p2 and tmp_V_15_fu_1261_p1);

    y_V_1_address0_assign_proc : process(ap_CS_fsm_state9, y_V_1_addr_1_reg_1645, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, zext_ln47_fu_555_p1, ap_block_pp2_stage1, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            y_V_1_address0 <= y_V_1_addr_1_reg_1645;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_V_1_address0 <= zext_ln47_fu_555_p1(6 - 1 downto 0);
        else 
            y_V_1_address0 <= "XXXXXX";
        end if; 
    end process;


    y_V_1_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            y_V_1_ce0 <= ap_const_logic_1;
        else 
            y_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_V_1_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, grp_fu_1573_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            y_V_1_d0 <= grp_fu_1573_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_V_1_d0 <= ap_const_lv32_0;
        else 
            y_V_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_V_1_we0_assign_proc : process(ap_CS_fsm_state9, icmp_ln56_reg_1655, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, icmp_ln45_fu_543_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln56_reg_1655 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln45_fu_543_p2 = ap_const_lv1_0)))) then 
            y_V_1_we0 <= ap_const_logic_1;
        else 
            y_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln209_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_table3_q0),64));
    zext_ln215_10_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_107_fu_648_p3),14));
    zext_ln215_11_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_660_p2),64));
    zext_ln215_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(om1_0_reg_421),14));
    zext_ln283_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_reg_1751),32));
    zext_ln285_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln285_9_reg_1776),32));
    zext_ln41_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_374),64));
    zext_ln47_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(om_0_reg_386),64));
    zext_ln498_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_1218_p4),64));
    zext_ln58_1_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_im_0_phi_fu_436_p4),64));
    zext_ln58_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(om1_0_reg_421),64));
    zext_ln80_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(om2_0_reg_443),64));
end behav;
