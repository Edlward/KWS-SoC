-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quant_layer_10u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data2dw1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data2dw1_V_empty_n : IN STD_LOGIC;
    data2dw1_V_read : OUT STD_LOGIC;
    data2dw1_quant_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    data2dw1_quant_V_V_full_n : IN STD_LOGIC;
    data2dw1_quant_V_V_write : OUT STD_LOGIC;
    data2dw1_scale_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data2dw1_scale_V_full_n : IN STD_LOGIC;
    data2dw1_scale_V_write : OUT STD_LOGIC );
end;


architecture behav of quant_layer_10u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_42FE0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111111100000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data2dw1_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln26_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data2dw1_quant_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal data2dw1_scale_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_fu_231_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_811 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_23_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln28_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal and_ln28_1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_data_2_fu_325_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_data_2_reg_835 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal max_data_2_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_845 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln39_fu_443_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal select_ln44_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal quant_scale_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_25_fu_548_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_25_reg_871 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln55_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_reg_886 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal reg_V_fu_559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal p_Result_2_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln283_fu_592_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln283_reg_901 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln278_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_907 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_913 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_918 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_638_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_1_reg_923 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_694_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln285_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln295_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal quant_data_V_fu_801_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal quant_data_V_reg_943 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_ce0 : STD_LOGIC;
    signal tmp_data_we0 : STD_LOGIC;
    signal max_data_0_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_data_0_reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_184 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_0_reg_195 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln36_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_216_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bitcast_ln28_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_245_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_255_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_263_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_273_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln32_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_335_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_345_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_1_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_data_fu_378_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_396_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_fu_406_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_1_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln39_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_data_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln44_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln44_1_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_456_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln44_fu_466_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln44_1_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_473_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln44_1_fu_483_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln44_3_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_2_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_1_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_1_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_fu_588_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_fu_562_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_584_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_fu_610_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_fu_644_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_596_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln281_fu_616_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln286_fu_660_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln286_fu_666_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln284_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_723_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294cast_fu_738_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln297_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln295_fu_747_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln285_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_730_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln278_fu_753_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln278_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_1_fu_770_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln282_fu_788_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln461_fu_795_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_216_ce : STD_LOGIC;
    signal grp_fu_216_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);

    component kws_fmul_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fdiv_32ns_32nGfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kws_fcmp_32ns_32nHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component quant_layer_10u_sFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    tmp_data_U : component quant_layer_10u_sFfa
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_data_address0,
        ce0 => tmp_data_ce0,
        we0 => tmp_data_we0,
        d0 => data2dw1_V_dout,
        q0 => tmp_data_q0);

    kws_fmul_32ns_32neOg_U194 : component kws_fmul_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => quant_scale_reg_862,
        din1 => tmp_data_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_206_p2);

    kws_fdiv_32ns_32nGfk_U195 : component kws_fdiv_32ns_32nGfk
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_42FE0000,
        din1 => select_ln44_reg_857,
        ce => ap_const_logic_1,
        dout => grp_fu_211_p2);

    kws_fcmp_32ns_32nHfu_U196 : component kws_fcmp_32ns_32nHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_216_p0,
        din1 => grp_fu_216_p1,
        ce => grp_fu_216_ce,
        opcode => grp_fu_216_opcode,
        dout => grp_fu_216_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data2dw1_quant_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                i1_0_reg_195 <= i_25_reg_871;
            elsif (((data2dw1_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i1_0_reg_195 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_reg_184 <= i_reg_811;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_184 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    max_data_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                max_data_0_reg_160 <= min_data_2_reg_835;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_data_0_reg_160 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    min_data_0_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                min_data_0_reg_172 <= max_data_2_fu_385_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                min_data_0_reg_172 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                and_ln284_reg_928 <= and_ln284_fu_682_p2;
                and_ln295_reg_938 <= and_ln295_fu_714_p2;
                icmp_ln278_reg_907 <= icmp_ln278_fu_604_p2;
                icmp_ln282_reg_913 <= icmp_ln282_fu_620_p2;
                icmp_ln285_reg_918 <= icmp_ln285_fu_632_p2;
                p_Result_2_reg_896 <= reg_V_fu_559_p1(31 downto 31);
                reg_V_reg_891 <= reg_V_fu_559_p1;
                select_ln285_reg_933 <= select_ln285_fu_694_p3;
                sh_amt_1_reg_923 <= sh_amt_1_fu_638_p2;
                trunc_ln283_reg_901 <= trunc_ln283_fu_592_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                and_ln28_1_reg_829 <= and_ln28_1_fu_319_p2;
                or_ln28_reg_824 <= or_ln28_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                i_25_reg_871 <= i_25_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (data2dw1_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_811 <= i_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                min_data_2_reg_835 <= min_data_2_fu_325_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                quant_data_V_reg_943 <= quant_data_V_fu_801_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                quant_scale_reg_862 <= grp_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                select_ln39_reg_850 <= select_ln39_fu_443_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                select_ln44_reg_857 <= select_ln44_fu_535_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (data2dw1_V_empty_n = ap_const_logic_0))) and (icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_23_reg_816 <= data2dw1_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_2_reg_845 <= grp_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                val_assign_reg_886 <= grp_fu_206_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data2dw1_V_empty_n, data2dw1_quant_V_V_full_n, data2dw1_scale_V_full_n, ap_CS_fsm_state2, icmp_ln26_fu_225_p2, ap_CS_fsm_state34, ap_CS_fsm_state26, ap_CS_fsm_state27, icmp_ln55_fu_542_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (data2dw1_V_empty_n = ap_const_logic_0))) and (icmp_ln26_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (data2dw1_V_empty_n = ap_const_logic_0))) and (icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((data2dw1_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln55_fu_542_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((data2dw1_quant_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln282_fu_783_p2 <= (xor_ln278_fu_778_p2 and icmp_ln282_reg_913);
    and_ln284_fu_682_p2 <= (xor_ln282_fu_676_p2 and icmp_ln284_fu_626_p2);
    and_ln285_1_fu_765_p2 <= (xor_ln285_fu_760_p2 and and_ln284_reg_928);
    and_ln285_fu_688_p2 <= (icmp_ln285_fu_632_p2 and and_ln284_fu_682_p2);
    and_ln28_1_fu_319_p2 <= (grp_fu_216_p2 and and_ln28_fu_313_p2);
    and_ln28_fu_313_p2 <= (or_ln28_fu_289_p2 and or_ln28_1_fu_307_p2);
    and_ln295_fu_714_p2 <= (xor_ln284_fu_708_p2 and icmp_ln295_fu_654_p2);
    and_ln32_1_fu_372_p2 <= (grp_fu_216_p2 and and_ln32_fu_367_p2);
    and_ln32_fu_367_p2 <= (or_ln32_fu_361_p2 and or_ln28_reg_824);
    and_ln39_fu_428_p2 <= (tmp_2_reg_845 and or_ln39_fu_422_p2);
    and_ln44_1_fu_529_p2 <= (grp_fu_216_p2 and and_ln44_fu_523_p2);
    and_ln44_fu_523_p2 <= (or_ln44_fu_499_p2 and or_ln44_1_fu_517_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_assign_proc : process(data2dw1_V_empty_n, icmp_ln26_fu_225_p2)
    begin
                ap_block_state2 <= ((icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (data2dw1_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state27, icmp_ln55_fu_542_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln55_fu_542_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27, icmp_ln55_fu_542_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln55_fu_542_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_259_p1 <= max_data_0_reg_160;
    bitcast_ln28_fu_242_p1 <= tmp_23_reg_816;
    bitcast_ln32_fu_331_p1 <= min_data_0_reg_172;
    bitcast_ln39_fu_392_p1 <= min_data_0_reg_172;
    bitcast_ln44_1_fu_470_p1 <= select_ln39_reg_850;
    bitcast_ln44_fu_452_p1 <= max_data_0_reg_160;

    data2dw1_V_blk_n_assign_proc : process(data2dw1_V_empty_n, ap_CS_fsm_state2, icmp_ln26_fu_225_p2)
    begin
        if (((icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data2dw1_V_blk_n <= data2dw1_V_empty_n;
        else 
            data2dw1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data2dw1_V_read_assign_proc : process(data2dw1_V_empty_n, ap_CS_fsm_state2, icmp_ln26_fu_225_p2)
    begin
        if ((not(((icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (data2dw1_V_empty_n = ap_const_logic_0))) and (icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data2dw1_V_read <= ap_const_logic_1;
        else 
            data2dw1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data2dw1_quant_V_V_blk_n_assign_proc : process(data2dw1_quant_V_V_full_n, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            data2dw1_quant_V_V_blk_n <= data2dw1_quant_V_V_full_n;
        else 
            data2dw1_quant_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data2dw1_quant_V_V_din <= quant_data_V_reg_943;

    data2dw1_quant_V_V_write_assign_proc : process(data2dw1_quant_V_V_full_n, ap_CS_fsm_state34)
    begin
        if (((data2dw1_quant_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            data2dw1_quant_V_V_write <= ap_const_logic_1;
        else 
            data2dw1_quant_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    data2dw1_scale_V_blk_n_assign_proc : process(data2dw1_scale_V_full_n, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            data2dw1_scale_V_blk_n <= data2dw1_scale_V_full_n;
        else 
            data2dw1_scale_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data2dw1_scale_V_din <= quant_scale_reg_862;

    data2dw1_scale_V_write_assign_proc : process(data2dw1_scale_V_full_n, ap_CS_fsm_state26)
    begin
        if (((data2dw1_scale_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            data2dw1_scale_V_write <= ap_const_logic_1;
        else 
            data2dw1_scale_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exp_V_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_574_p4),9));

    grp_fu_216_ce_assign_proc : process(data2dw1_V_empty_n, ap_CS_fsm_state2, icmp_ln26_fu_225_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (data2dw1_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_216_ce <= ap_const_logic_1;
        else 
            grp_fu_216_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_216_opcode_assign_proc : process(data2dw1_V_empty_n, ap_CS_fsm_state2, icmp_ln26_fu_225_p2, and_ln28_1_reg_829, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_216_opcode <= ap_const_lv5_2;
        elsif (((not(((icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (data2dw1_V_empty_n = ap_const_logic_0))) and (icmp_ln26_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_0 = and_ln28_1_reg_829) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            grp_fu_216_opcode <= ap_const_lv5_4;
        else 
            grp_fu_216_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_216_p0_assign_proc : process(ap_CS_fsm_state2, tmp_23_reg_816, ap_CS_fsm_state5, ap_CS_fsm_state8, max_data_0_reg_160, min_data_0_reg_172, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_216_p0 <= max_data_0_reg_160;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_216_p0 <= tmp_23_reg_816;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_216_p0 <= min_data_0_reg_172;
        else 
            grp_fu_216_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_216_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, select_ln39_fu_443_p3, ap_CS_fsm_state8, max_data_0_reg_160, min_data_0_reg_172, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_216_p1 <= select_ln39_fu_443_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_216_p1 <= min_data_0_reg_172;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_216_p1 <= max_data_0_reg_160;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_216_p1 <= ap_const_lv32_0;
        else 
            grp_fu_216_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_25_fu_548_p2 <= std_logic_vector(unsigned(i1_0_reg_195) + unsigned(ap_const_lv4_1));
    i_fu_231_p2 <= std_logic_vector(unsigned(i_0_reg_184) + unsigned(ap_const_lv4_1));
    icmp_ln26_fu_225_p2 <= "1" when (i_0_reg_184 = ap_const_lv4_A) else "0";
    icmp_ln278_fu_604_p2 <= "1" when (trunc_ln262_fu_562_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_fu_620_p2 <= "1" when (p_Result_s_fu_574_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_fu_626_p2 <= "1" when (signed(sh_amt_fu_610_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_fu_632_p2 <= "1" when (signed(sh_amt_fu_610_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln28_1_fu_283_p2 <= "1" when (trunc_ln28_fu_255_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_295_p2 <= "0" when (tmp_9_fu_263_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_301_p2 <= "1" when (trunc_ln28_1_fu_273_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_277_p2 <= "0" when (tmp_8_fu_245_p4 = ap_const_lv8_FF) else "1";
    icmp_ln295_fu_654_p2 <= "1" when (signed(tmp_21_fu_644_p4) < signed(ap_const_lv6_1)) else "0";
    icmp_ln32_1_fu_355_p2 <= "1" when (trunc_ln32_fu_345_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_349_p2 <= "0" when (tmp_12_fu_335_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_1_fu_416_p2 <= "1" when (trunc_ln39_fu_406_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_fu_410_p2 <= "0" when (tmp_fu_396_p4 = ap_const_lv8_FF) else "1";
    icmp_ln44_1_fu_493_p2 <= "1" when (trunc_ln44_fu_466_p1 = ap_const_lv23_0) else "0";
    icmp_ln44_2_fu_505_p2 <= "0" when (tmp_5_fu_473_p4 = ap_const_lv8_FF) else "1";
    icmp_ln44_3_fu_511_p2 <= "1" when (trunc_ln44_1_fu_483_p1 = ap_const_lv23_0) else "0";
    icmp_ln44_fu_487_p2 <= "0" when (tmp_4_fu_456_p4 = ap_const_lv8_FF) else "1";
    icmp_ln55_fu_542_p2 <= "1" when (i1_0_reg_195 = ap_const_lv4_A) else "0";
    lshr_ln286_fu_660_p2 <= std_logic_vector(shift_right(unsigned(tmp_s_fu_596_p3),to_integer(unsigned('0' & sext_ln281_fu_616_p1(24-1 downto 0)))));
    max_data_2_fu_385_p3 <= 
        min_data_0_reg_172 when (and_ln28_1_reg_829(0) = '1') else 
        max_data_fu_378_p3;
    max_data_fu_378_p3 <= 
        tmp_23_reg_816 when (and_ln32_1_fu_372_p2(0) = '1') else 
        min_data_0_reg_172;
    min_data_2_fu_325_p3 <= 
        tmp_23_reg_816 when (and_ln28_1_reg_829(0) = '1') else 
        max_data_0_reg_160;
    min_data_fu_439_p1 <= xor_ln40_fu_433_p2;
    or_ln282_fu_670_p2 <= (icmp_ln282_fu_620_p2 or icmp_ln278_fu_604_p2);
    or_ln284_fu_702_p2 <= (or_ln282_fu_670_p2 or icmp_ln284_fu_626_p2);
    or_ln28_1_fu_307_p2 <= (icmp_ln28_3_fu_301_p2 or icmp_ln28_2_fu_295_p2);
    or_ln28_fu_289_p2 <= (icmp_ln28_fu_277_p2 or icmp_ln28_1_fu_283_p2);
    or_ln32_fu_361_p2 <= (icmp_ln32_fu_349_p2 or icmp_ln32_1_fu_355_p2);
    or_ln39_fu_422_p2 <= (icmp_ln39_fu_410_p2 or icmp_ln39_1_fu_416_p2);
    or_ln44_1_fu_517_p2 <= (icmp_ln44_3_fu_511_p2 or icmp_ln44_2_fu_505_p2);
    or_ln44_fu_499_p2 <= (icmp_ln44_fu_487_p2 or icmp_ln44_1_fu_493_p2);
    p_Result_s_fu_574_p4 <= reg_V_fu_559_p1(30 downto 23);
    quant_data_V_fu_801_p3 <= 
        sub_ln461_fu_795_p2 when (p_Result_2_reg_896(0) = '1') else 
        select_ln282_fu_788_p3;
    reg_V_fu_559_p1 <= val_assign_reg_886;
    select_ln278_fu_753_p3 <= 
        ap_const_lv8_0 when (icmp_ln278_reg_907(0) = '1') else 
        select_ln295_fu_747_p3;
    select_ln282_fu_788_p3 <= 
        trunc_ln283_reg_901 when (and_ln282_fu_783_p2(0) = '1') else 
        select_ln285_1_fu_770_p3;
    select_ln285_1_fu_770_p3 <= 
        select_ln288_fu_730_p3 when (and_ln285_1_fu_765_p2(0) = '1') else 
        select_ln278_fu_753_p3;
    select_ln285_fu_694_p3 <= 
        trunc_ln286_fu_666_p1 when (and_ln285_fu_688_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln288_fu_730_p3 <= 
        ap_const_lv8_FF when (tmp_22_fu_723_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln295_fu_747_p3 <= 
        shl_ln297_fu_742_p2 when (and_ln295_reg_938(0) = '1') else 
        select_ln285_reg_933;
    select_ln39_fu_443_p3 <= 
        min_data_fu_439_p1 when (and_ln39_fu_428_p2(0) = '1') else 
        min_data_0_reg_172;
    select_ln44_fu_535_p3 <= 
        max_data_0_reg_160 when (and_ln44_1_fu_529_p2(0) = '1') else 
        select_ln39_reg_850;
        sext_ln281_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_610_p2),24));

        sext_ln294_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_923),32));

    sext_ln294cast_fu_738_p1 <= sext_ln294_fu_720_p1(8 - 1 downto 0);
    sh_amt_1_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_fu_610_p2));
    sh_amt_fu_610_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_584_p1));
    shl_ln297_fu_742_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln283_reg_901),to_integer(unsigned('0' & sext_ln294cast_fu_738_p1(8-1 downto 0)))));
    sub_ln461_fu_795_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln282_fu_788_p3));
    tmp_12_fu_335_p4 <= bitcast_ln32_fu_331_p1(30 downto 23);
    tmp_21_fu_644_p4 <= sh_amt_1_fu_638_p2(8 downto 3);
    tmp_22_fu_723_p3 <= reg_V_reg_891(31 downto 31);
    tmp_4_fu_456_p4 <= bitcast_ln44_fu_452_p1(30 downto 23);
    tmp_5_fu_473_p4 <= bitcast_ln44_1_fu_470_p1(30 downto 23);
    tmp_8_fu_245_p4 <= bitcast_ln28_fu_242_p1(30 downto 23);
    tmp_9_fu_263_p4 <= bitcast_ln28_1_fu_259_p1(30 downto 23);

    tmp_data_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state27, zext_ln36_fu_237_p1, zext_ln56_fu_554_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            tmp_data_address0 <= zext_ln56_fu_554_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tmp_data_address0 <= zext_ln36_fu_237_p1(4 - 1 downto 0);
        else 
            tmp_data_address0 <= "XXXX";
        end if; 
    end process;


    tmp_data_ce0_assign_proc : process(data2dw1_V_empty_n, ap_CS_fsm_state2, icmp_ln26_fu_225_p2, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (not(((icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (data2dw1_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            tmp_data_ce0 <= ap_const_logic_1;
        else 
            tmp_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_data_we0_assign_proc : process(data2dw1_V_empty_n, ap_CS_fsm_state2, icmp_ln26_fu_225_p2)
    begin
        if ((not(((icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (data2dw1_V_empty_n = ap_const_logic_0))) and (icmp_ln26_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tmp_data_we0 <= ap_const_logic_1;
        else 
            tmp_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_396_p4 <= bitcast_ln39_fu_392_p1(30 downto 23);
    tmp_s_fu_596_p3 <= (ap_const_lv1_1 & trunc_ln270_fu_588_p1);
    trunc_ln262_fu_562_p1 <= reg_V_fu_559_p1(31 - 1 downto 0);
    trunc_ln270_fu_588_p1 <= reg_V_fu_559_p1(23 - 1 downto 0);
    trunc_ln283_fu_592_p1 <= reg_V_fu_559_p1(8 - 1 downto 0);
    trunc_ln286_fu_666_p1 <= lshr_ln286_fu_660_p2(8 - 1 downto 0);
    trunc_ln28_1_fu_273_p1 <= bitcast_ln28_1_fu_259_p1(23 - 1 downto 0);
    trunc_ln28_fu_255_p1 <= bitcast_ln28_fu_242_p1(23 - 1 downto 0);
    trunc_ln32_fu_345_p1 <= bitcast_ln32_fu_331_p1(23 - 1 downto 0);
    trunc_ln39_fu_406_p1 <= bitcast_ln39_fu_392_p1(23 - 1 downto 0);
    trunc_ln44_1_fu_483_p1 <= bitcast_ln44_1_fu_470_p1(23 - 1 downto 0);
    trunc_ln44_fu_466_p1 <= bitcast_ln44_fu_452_p1(23 - 1 downto 0);
    xor_ln278_fu_778_p2 <= (icmp_ln278_reg_907 xor ap_const_lv1_1);
    xor_ln282_fu_676_p2 <= (or_ln282_fu_670_p2 xor ap_const_lv1_1);
    xor_ln284_fu_708_p2 <= (or_ln284_fu_702_p2 xor ap_const_lv1_1);
    xor_ln285_fu_760_p2 <= (icmp_ln285_reg_918 xor ap_const_lv1_1);
    xor_ln40_fu_433_p2 <= (bitcast_ln39_fu_392_p1 xor ap_const_lv32_80000000);
    zext_ln36_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_184),64));
    zext_ln56_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_195),64));
end behav;
